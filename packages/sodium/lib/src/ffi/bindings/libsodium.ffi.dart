// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings of libsodium
class LibSodiumFFI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibSodiumFFI(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibSodiumFFI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int8> sodium_version_string() {
    return _sodium_version_string();
  }

  late final _sodium_version_string_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_version_string>>(
          'sodium_version_string');
  late final _dart_sodium_version_string _sodium_version_string =
      _sodium_version_string_ptr.asFunction<_dart_sodium_version_string>();

  int sodium_library_version_major() {
    return _sodium_library_version_major();
  }

  late final _sodium_library_version_major_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_library_version_major>>(
          'sodium_library_version_major');
  late final _dart_sodium_library_version_major _sodium_library_version_major =
      _sodium_library_version_major_ptr
          .asFunction<_dart_sodium_library_version_major>();

  int sodium_library_version_minor() {
    return _sodium_library_version_minor();
  }

  late final _sodium_library_version_minor_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_library_version_minor>>(
          'sodium_library_version_minor');
  late final _dart_sodium_library_version_minor _sodium_library_version_minor =
      _sodium_library_version_minor_ptr
          .asFunction<_dart_sodium_library_version_minor>();

  int sodium_library_minimal() {
    return _sodium_library_minimal();
  }

  late final _sodium_library_minimal_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_library_minimal>>(
          'sodium_library_minimal');
  late final _dart_sodium_library_minimal _sodium_library_minimal =
      _sodium_library_minimal_ptr.asFunction<_dart_sodium_library_minimal>();

  int sodium_init() {
    return _sodium_init();
  }

  late final _sodium_init_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_init>>('sodium_init');
  late final _dart_sodium_init _sodium_init =
      _sodium_init_ptr.asFunction<_dart_sodium_init>();

  int sodium_set_misuse_handler(
    ffi.Pointer<ffi.NativeFunction<_typedefC_1>> handler,
  ) {
    return _sodium_set_misuse_handler(
      handler,
    );
  }

  late final _sodium_set_misuse_handler_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_set_misuse_handler>>(
          'sodium_set_misuse_handler');
  late final _dart_sodium_set_misuse_handler _sodium_set_misuse_handler =
      _sodium_set_misuse_handler_ptr
          .asFunction<_dart_sodium_set_misuse_handler>();

  void sodium_misuse() {
    return _sodium_misuse();
  }

  late final _sodium_misuse_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_misuse>>('sodium_misuse');
  late final _dart_sodium_misuse _sodium_misuse =
      _sodium_misuse_ptr.asFunction<_dart_sodium_misuse>();

  int crypto_aead_aes256gcm_is_available() {
    return _crypto_aead_aes256gcm_is_available();
  }

  late final _crypto_aead_aes256gcm_is_available_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_is_available>>(
          'crypto_aead_aes256gcm_is_available');
  late final _dart_crypto_aead_aes256gcm_is_available
      _crypto_aead_aes256gcm_is_available =
      _crypto_aead_aes256gcm_is_available_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_is_available>();

  int crypto_aead_aes256gcm_keybytes() {
    return _crypto_aead_aes256gcm_keybytes();
  }

  late final _crypto_aead_aes256gcm_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_keybytes>>(
          'crypto_aead_aes256gcm_keybytes');
  late final _dart_crypto_aead_aes256gcm_keybytes
      _crypto_aead_aes256gcm_keybytes = _crypto_aead_aes256gcm_keybytes_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_keybytes>();

  int crypto_aead_aes256gcm_nsecbytes() {
    return _crypto_aead_aes256gcm_nsecbytes();
  }

  late final _crypto_aead_aes256gcm_nsecbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_nsecbytes>>(
          'crypto_aead_aes256gcm_nsecbytes');
  late final _dart_crypto_aead_aes256gcm_nsecbytes
      _crypto_aead_aes256gcm_nsecbytes = _crypto_aead_aes256gcm_nsecbytes_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_nsecbytes>();

  int crypto_aead_aes256gcm_npubbytes() {
    return _crypto_aead_aes256gcm_npubbytes();
  }

  late final _crypto_aead_aes256gcm_npubbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_npubbytes>>(
          'crypto_aead_aes256gcm_npubbytes');
  late final _dart_crypto_aead_aes256gcm_npubbytes
      _crypto_aead_aes256gcm_npubbytes = _crypto_aead_aes256gcm_npubbytes_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_npubbytes>();

  int crypto_aead_aes256gcm_abytes() {
    return _crypto_aead_aes256gcm_abytes();
  }

  late final _crypto_aead_aes256gcm_abytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_abytes>>(
          'crypto_aead_aes256gcm_abytes');
  late final _dart_crypto_aead_aes256gcm_abytes _crypto_aead_aes256gcm_abytes =
      _crypto_aead_aes256gcm_abytes_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_abytes>();

  int crypto_aead_aes256gcm_messagebytes_max() {
    return _crypto_aead_aes256gcm_messagebytes_max();
  }

  late final _crypto_aead_aes256gcm_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_messagebytes_max>>(
          'crypto_aead_aes256gcm_messagebytes_max');
  late final _dart_crypto_aead_aes256gcm_messagebytes_max
      _crypto_aead_aes256gcm_messagebytes_max =
      _crypto_aead_aes256gcm_messagebytes_max_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_messagebytes_max>();

  int crypto_aead_aes256gcm_statebytes() {
    return _crypto_aead_aes256gcm_statebytes();
  }

  late final _crypto_aead_aes256gcm_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_statebytes>>(
          'crypto_aead_aes256gcm_statebytes');
  late final _dart_crypto_aead_aes256gcm_statebytes
      _crypto_aead_aes256gcm_statebytes = _crypto_aead_aes256gcm_statebytes_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_statebytes>();

  int crypto_aead_aes256gcm_encrypt(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint64> clen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_aes256gcm_encrypt(
      c,
      clen_p,
      m,
      mlen,
      ad,
      adlen,
      nsec,
      npub,
      k,
    );
  }

  late final _crypto_aead_aes256gcm_encrypt_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_encrypt>>(
          'crypto_aead_aes256gcm_encrypt');
  late final _dart_crypto_aead_aes256gcm_encrypt
      _crypto_aead_aes256gcm_encrypt = _crypto_aead_aes256gcm_encrypt_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_encrypt>();

  int crypto_aead_aes256gcm_decrypt(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint64> mlen_p,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_aes256gcm_decrypt(
      m,
      mlen_p,
      nsec,
      c,
      clen,
      ad,
      adlen,
      npub,
      k,
    );
  }

  late final _crypto_aead_aes256gcm_decrypt_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_decrypt>>(
          'crypto_aead_aes256gcm_decrypt');
  late final _dart_crypto_aead_aes256gcm_decrypt
      _crypto_aead_aes256gcm_decrypt = _crypto_aead_aes256gcm_decrypt_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_decrypt>();

  int crypto_aead_aes256gcm_encrypt_detached(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint64> maclen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_aes256gcm_encrypt_detached(
      c,
      mac,
      maclen_p,
      m,
      mlen,
      ad,
      adlen,
      nsec,
      npub,
      k,
    );
  }

  late final _crypto_aead_aes256gcm_encrypt_detached_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_encrypt_detached>>(
          'crypto_aead_aes256gcm_encrypt_detached');
  late final _dart_crypto_aead_aes256gcm_encrypt_detached
      _crypto_aead_aes256gcm_encrypt_detached =
      _crypto_aead_aes256gcm_encrypt_detached_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_encrypt_detached>();

  int crypto_aead_aes256gcm_decrypt_detached(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_aes256gcm_decrypt_detached(
      m,
      nsec,
      c,
      clen,
      mac,
      ad,
      adlen,
      npub,
      k,
    );
  }

  late final _crypto_aead_aes256gcm_decrypt_detached_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_decrypt_detached>>(
          'crypto_aead_aes256gcm_decrypt_detached');
  late final _dart_crypto_aead_aes256gcm_decrypt_detached
      _crypto_aead_aes256gcm_decrypt_detached =
      _crypto_aead_aes256gcm_decrypt_detached_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_decrypt_detached>();

  int crypto_aead_aes256gcm_beforenm(
    ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_aes256gcm_beforenm(
      ctx_,
      k,
    );
  }

  late final _crypto_aead_aes256gcm_beforenm_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_beforenm>>(
          'crypto_aead_aes256gcm_beforenm');
  late final _dart_crypto_aead_aes256gcm_beforenm
      _crypto_aead_aes256gcm_beforenm = _crypto_aead_aes256gcm_beforenm_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_beforenm>();

  int crypto_aead_aes256gcm_encrypt_afternm(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint64> clen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
  ) {
    return _crypto_aead_aes256gcm_encrypt_afternm(
      c,
      clen_p,
      m,
      mlen,
      ad,
      adlen,
      nsec,
      npub,
      ctx_,
    );
  }

  late final _crypto_aead_aes256gcm_encrypt_afternm_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_encrypt_afternm>>(
          'crypto_aead_aes256gcm_encrypt_afternm');
  late final _dart_crypto_aead_aes256gcm_encrypt_afternm
      _crypto_aead_aes256gcm_encrypt_afternm =
      _crypto_aead_aes256gcm_encrypt_afternm_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_encrypt_afternm>();

  int crypto_aead_aes256gcm_decrypt_afternm(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint64> mlen_p,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
  ) {
    return _crypto_aead_aes256gcm_decrypt_afternm(
      m,
      mlen_p,
      nsec,
      c,
      clen,
      ad,
      adlen,
      npub,
      ctx_,
    );
  }

  late final _crypto_aead_aes256gcm_decrypt_afternm_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_decrypt_afternm>>(
          'crypto_aead_aes256gcm_decrypt_afternm');
  late final _dart_crypto_aead_aes256gcm_decrypt_afternm
      _crypto_aead_aes256gcm_decrypt_afternm =
      _crypto_aead_aes256gcm_decrypt_afternm_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_decrypt_afternm>();

  int crypto_aead_aes256gcm_encrypt_detached_afternm(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint64> maclen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
  ) {
    return _crypto_aead_aes256gcm_encrypt_detached_afternm(
      c,
      mac,
      maclen_p,
      m,
      mlen,
      ad,
      adlen,
      nsec,
      npub,
      ctx_,
    );
  }

  late final _crypto_aead_aes256gcm_encrypt_detached_afternm_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_aead_aes256gcm_encrypt_detached_afternm>>(
      'crypto_aead_aes256gcm_encrypt_detached_afternm');
  late final _dart_crypto_aead_aes256gcm_encrypt_detached_afternm
      _crypto_aead_aes256gcm_encrypt_detached_afternm =
      _crypto_aead_aes256gcm_encrypt_detached_afternm_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_encrypt_detached_afternm>();

  int crypto_aead_aes256gcm_decrypt_detached_afternm(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
  ) {
    return _crypto_aead_aes256gcm_decrypt_detached_afternm(
      m,
      nsec,
      c,
      clen,
      mac,
      ad,
      adlen,
      npub,
      ctx_,
    );
  }

  late final _crypto_aead_aes256gcm_decrypt_detached_afternm_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_aead_aes256gcm_decrypt_detached_afternm>>(
      'crypto_aead_aes256gcm_decrypt_detached_afternm');
  late final _dart_crypto_aead_aes256gcm_decrypt_detached_afternm
      _crypto_aead_aes256gcm_decrypt_detached_afternm =
      _crypto_aead_aes256gcm_decrypt_detached_afternm_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_decrypt_detached_afternm>();

  void crypto_aead_aes256gcm_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_aes256gcm_keygen(
      k,
    );
  }

  late final _crypto_aead_aes256gcm_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_aes256gcm_keygen>>(
          'crypto_aead_aes256gcm_keygen');
  late final _dart_crypto_aead_aes256gcm_keygen _crypto_aead_aes256gcm_keygen =
      _crypto_aead_aes256gcm_keygen_ptr
          .asFunction<_dart_crypto_aead_aes256gcm_keygen>();

  int crypto_aead_chacha20poly1305_ietf_keybytes() {
    return _crypto_aead_chacha20poly1305_ietf_keybytes();
  }

  late final _crypto_aead_chacha20poly1305_ietf_keybytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_ietf_keybytes>>(
      'crypto_aead_chacha20poly1305_ietf_keybytes');
  late final _dart_crypto_aead_chacha20poly1305_ietf_keybytes
      _crypto_aead_chacha20poly1305_ietf_keybytes =
      _crypto_aead_chacha20poly1305_ietf_keybytes_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_ietf_keybytes>();

  int crypto_aead_chacha20poly1305_ietf_nsecbytes() {
    return _crypto_aead_chacha20poly1305_ietf_nsecbytes();
  }

  late final _crypto_aead_chacha20poly1305_ietf_nsecbytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_ietf_nsecbytes>>(
      'crypto_aead_chacha20poly1305_ietf_nsecbytes');
  late final _dart_crypto_aead_chacha20poly1305_ietf_nsecbytes
      _crypto_aead_chacha20poly1305_ietf_nsecbytes =
      _crypto_aead_chacha20poly1305_ietf_nsecbytes_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_ietf_nsecbytes>();

  int crypto_aead_chacha20poly1305_ietf_npubbytes() {
    return _crypto_aead_chacha20poly1305_ietf_npubbytes();
  }

  late final _crypto_aead_chacha20poly1305_ietf_npubbytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_ietf_npubbytes>>(
      'crypto_aead_chacha20poly1305_ietf_npubbytes');
  late final _dart_crypto_aead_chacha20poly1305_ietf_npubbytes
      _crypto_aead_chacha20poly1305_ietf_npubbytes =
      _crypto_aead_chacha20poly1305_ietf_npubbytes_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_ietf_npubbytes>();

  int crypto_aead_chacha20poly1305_ietf_abytes() {
    return _crypto_aead_chacha20poly1305_ietf_abytes();
  }

  late final _crypto_aead_chacha20poly1305_ietf_abytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_ietf_abytes>>(
          'crypto_aead_chacha20poly1305_ietf_abytes');
  late final _dart_crypto_aead_chacha20poly1305_ietf_abytes
      _crypto_aead_chacha20poly1305_ietf_abytes =
      _crypto_aead_chacha20poly1305_ietf_abytes_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_ietf_abytes>();

  int crypto_aead_chacha20poly1305_ietf_messagebytes_max() {
    return _crypto_aead_chacha20poly1305_ietf_messagebytes_max();
  }

  late final _crypto_aead_chacha20poly1305_ietf_messagebytes_max_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_aead_chacha20poly1305_ietf_messagebytes_max>>(
      'crypto_aead_chacha20poly1305_ietf_messagebytes_max');
  late final _dart_crypto_aead_chacha20poly1305_ietf_messagebytes_max
      _crypto_aead_chacha20poly1305_ietf_messagebytes_max =
      _crypto_aead_chacha20poly1305_ietf_messagebytes_max_ptr.asFunction<
          _dart_crypto_aead_chacha20poly1305_ietf_messagebytes_max>();

  int crypto_aead_chacha20poly1305_ietf_encrypt(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint64> clen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_chacha20poly1305_ietf_encrypt(
      c,
      clen_p,
      m,
      mlen,
      ad,
      adlen,
      nsec,
      npub,
      k,
    );
  }

  late final _crypto_aead_chacha20poly1305_ietf_encrypt_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_ietf_encrypt>>(
          'crypto_aead_chacha20poly1305_ietf_encrypt');
  late final _dart_crypto_aead_chacha20poly1305_ietf_encrypt
      _crypto_aead_chacha20poly1305_ietf_encrypt =
      _crypto_aead_chacha20poly1305_ietf_encrypt_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_ietf_encrypt>();

  int crypto_aead_chacha20poly1305_ietf_decrypt(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint64> mlen_p,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_chacha20poly1305_ietf_decrypt(
      m,
      mlen_p,
      nsec,
      c,
      clen,
      ad,
      adlen,
      npub,
      k,
    );
  }

  late final _crypto_aead_chacha20poly1305_ietf_decrypt_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_ietf_decrypt>>(
          'crypto_aead_chacha20poly1305_ietf_decrypt');
  late final _dart_crypto_aead_chacha20poly1305_ietf_decrypt
      _crypto_aead_chacha20poly1305_ietf_decrypt =
      _crypto_aead_chacha20poly1305_ietf_decrypt_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_ietf_decrypt>();

  int crypto_aead_chacha20poly1305_ietf_encrypt_detached(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint64> maclen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_chacha20poly1305_ietf_encrypt_detached(
      c,
      mac,
      maclen_p,
      m,
      mlen,
      ad,
      adlen,
      nsec,
      npub,
      k,
    );
  }

  late final _crypto_aead_chacha20poly1305_ietf_encrypt_detached_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_aead_chacha20poly1305_ietf_encrypt_detached>>(
      'crypto_aead_chacha20poly1305_ietf_encrypt_detached');
  late final _dart_crypto_aead_chacha20poly1305_ietf_encrypt_detached
      _crypto_aead_chacha20poly1305_ietf_encrypt_detached =
      _crypto_aead_chacha20poly1305_ietf_encrypt_detached_ptr.asFunction<
          _dart_crypto_aead_chacha20poly1305_ietf_encrypt_detached>();

  int crypto_aead_chacha20poly1305_ietf_decrypt_detached(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_chacha20poly1305_ietf_decrypt_detached(
      m,
      nsec,
      c,
      clen,
      mac,
      ad,
      adlen,
      npub,
      k,
    );
  }

  late final _crypto_aead_chacha20poly1305_ietf_decrypt_detached_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_aead_chacha20poly1305_ietf_decrypt_detached>>(
      'crypto_aead_chacha20poly1305_ietf_decrypt_detached');
  late final _dart_crypto_aead_chacha20poly1305_ietf_decrypt_detached
      _crypto_aead_chacha20poly1305_ietf_decrypt_detached =
      _crypto_aead_chacha20poly1305_ietf_decrypt_detached_ptr.asFunction<
          _dart_crypto_aead_chacha20poly1305_ietf_decrypt_detached>();

  void crypto_aead_chacha20poly1305_ietf_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_chacha20poly1305_ietf_keygen(
      k,
    );
  }

  late final _crypto_aead_chacha20poly1305_ietf_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_ietf_keygen>>(
          'crypto_aead_chacha20poly1305_ietf_keygen');
  late final _dart_crypto_aead_chacha20poly1305_ietf_keygen
      _crypto_aead_chacha20poly1305_ietf_keygen =
      _crypto_aead_chacha20poly1305_ietf_keygen_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_ietf_keygen>();

  int crypto_aead_chacha20poly1305_keybytes() {
    return _crypto_aead_chacha20poly1305_keybytes();
  }

  late final _crypto_aead_chacha20poly1305_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_keybytes>>(
          'crypto_aead_chacha20poly1305_keybytes');
  late final _dart_crypto_aead_chacha20poly1305_keybytes
      _crypto_aead_chacha20poly1305_keybytes =
      _crypto_aead_chacha20poly1305_keybytes_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_keybytes>();

  int crypto_aead_chacha20poly1305_nsecbytes() {
    return _crypto_aead_chacha20poly1305_nsecbytes();
  }

  late final _crypto_aead_chacha20poly1305_nsecbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_nsecbytes>>(
          'crypto_aead_chacha20poly1305_nsecbytes');
  late final _dart_crypto_aead_chacha20poly1305_nsecbytes
      _crypto_aead_chacha20poly1305_nsecbytes =
      _crypto_aead_chacha20poly1305_nsecbytes_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_nsecbytes>();

  int crypto_aead_chacha20poly1305_npubbytes() {
    return _crypto_aead_chacha20poly1305_npubbytes();
  }

  late final _crypto_aead_chacha20poly1305_npubbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_npubbytes>>(
          'crypto_aead_chacha20poly1305_npubbytes');
  late final _dart_crypto_aead_chacha20poly1305_npubbytes
      _crypto_aead_chacha20poly1305_npubbytes =
      _crypto_aead_chacha20poly1305_npubbytes_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_npubbytes>();

  int crypto_aead_chacha20poly1305_abytes() {
    return _crypto_aead_chacha20poly1305_abytes();
  }

  late final _crypto_aead_chacha20poly1305_abytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_abytes>>(
          'crypto_aead_chacha20poly1305_abytes');
  late final _dart_crypto_aead_chacha20poly1305_abytes
      _crypto_aead_chacha20poly1305_abytes =
      _crypto_aead_chacha20poly1305_abytes_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_abytes>();

  int crypto_aead_chacha20poly1305_messagebytes_max() {
    return _crypto_aead_chacha20poly1305_messagebytes_max();
  }

  late final _crypto_aead_chacha20poly1305_messagebytes_max_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_messagebytes_max>>(
      'crypto_aead_chacha20poly1305_messagebytes_max');
  late final _dart_crypto_aead_chacha20poly1305_messagebytes_max
      _crypto_aead_chacha20poly1305_messagebytes_max =
      _crypto_aead_chacha20poly1305_messagebytes_max_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_messagebytes_max>();

  int crypto_aead_chacha20poly1305_encrypt(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint64> clen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_chacha20poly1305_encrypt(
      c,
      clen_p,
      m,
      mlen,
      ad,
      adlen,
      nsec,
      npub,
      k,
    );
  }

  late final _crypto_aead_chacha20poly1305_encrypt_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_encrypt>>(
          'crypto_aead_chacha20poly1305_encrypt');
  late final _dart_crypto_aead_chacha20poly1305_encrypt
      _crypto_aead_chacha20poly1305_encrypt =
      _crypto_aead_chacha20poly1305_encrypt_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_encrypt>();

  int crypto_aead_chacha20poly1305_decrypt(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint64> mlen_p,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_chacha20poly1305_decrypt(
      m,
      mlen_p,
      nsec,
      c,
      clen,
      ad,
      adlen,
      npub,
      k,
    );
  }

  late final _crypto_aead_chacha20poly1305_decrypt_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_decrypt>>(
          'crypto_aead_chacha20poly1305_decrypt');
  late final _dart_crypto_aead_chacha20poly1305_decrypt
      _crypto_aead_chacha20poly1305_decrypt =
      _crypto_aead_chacha20poly1305_decrypt_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_decrypt>();

  int crypto_aead_chacha20poly1305_encrypt_detached(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint64> maclen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_chacha20poly1305_encrypt_detached(
      c,
      mac,
      maclen_p,
      m,
      mlen,
      ad,
      adlen,
      nsec,
      npub,
      k,
    );
  }

  late final _crypto_aead_chacha20poly1305_encrypt_detached_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_encrypt_detached>>(
      'crypto_aead_chacha20poly1305_encrypt_detached');
  late final _dart_crypto_aead_chacha20poly1305_encrypt_detached
      _crypto_aead_chacha20poly1305_encrypt_detached =
      _crypto_aead_chacha20poly1305_encrypt_detached_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_encrypt_detached>();

  int crypto_aead_chacha20poly1305_decrypt_detached(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_chacha20poly1305_decrypt_detached(
      m,
      nsec,
      c,
      clen,
      mac,
      ad,
      adlen,
      npub,
      k,
    );
  }

  late final _crypto_aead_chacha20poly1305_decrypt_detached_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_decrypt_detached>>(
      'crypto_aead_chacha20poly1305_decrypt_detached');
  late final _dart_crypto_aead_chacha20poly1305_decrypt_detached
      _crypto_aead_chacha20poly1305_decrypt_detached =
      _crypto_aead_chacha20poly1305_decrypt_detached_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_decrypt_detached>();

  void crypto_aead_chacha20poly1305_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_chacha20poly1305_keygen(
      k,
    );
  }

  late final _crypto_aead_chacha20poly1305_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_chacha20poly1305_keygen>>(
          'crypto_aead_chacha20poly1305_keygen');
  late final _dart_crypto_aead_chacha20poly1305_keygen
      _crypto_aead_chacha20poly1305_keygen =
      _crypto_aead_chacha20poly1305_keygen_ptr
          .asFunction<_dart_crypto_aead_chacha20poly1305_keygen>();

  int crypto_aead_xchacha20poly1305_ietf_keybytes() {
    return _crypto_aead_xchacha20poly1305_ietf_keybytes();
  }

  late final _crypto_aead_xchacha20poly1305_ietf_keybytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_aead_xchacha20poly1305_ietf_keybytes>>(
      'crypto_aead_xchacha20poly1305_ietf_keybytes');
  late final _dart_crypto_aead_xchacha20poly1305_ietf_keybytes
      _crypto_aead_xchacha20poly1305_ietf_keybytes =
      _crypto_aead_xchacha20poly1305_ietf_keybytes_ptr
          .asFunction<_dart_crypto_aead_xchacha20poly1305_ietf_keybytes>();

  int crypto_aead_xchacha20poly1305_ietf_nsecbytes() {
    return _crypto_aead_xchacha20poly1305_ietf_nsecbytes();
  }

  late final _crypto_aead_xchacha20poly1305_ietf_nsecbytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_aead_xchacha20poly1305_ietf_nsecbytes>>(
      'crypto_aead_xchacha20poly1305_ietf_nsecbytes');
  late final _dart_crypto_aead_xchacha20poly1305_ietf_nsecbytes
      _crypto_aead_xchacha20poly1305_ietf_nsecbytes =
      _crypto_aead_xchacha20poly1305_ietf_nsecbytes_ptr
          .asFunction<_dart_crypto_aead_xchacha20poly1305_ietf_nsecbytes>();

  int crypto_aead_xchacha20poly1305_ietf_npubbytes() {
    return _crypto_aead_xchacha20poly1305_ietf_npubbytes();
  }

  late final _crypto_aead_xchacha20poly1305_ietf_npubbytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_aead_xchacha20poly1305_ietf_npubbytes>>(
      'crypto_aead_xchacha20poly1305_ietf_npubbytes');
  late final _dart_crypto_aead_xchacha20poly1305_ietf_npubbytes
      _crypto_aead_xchacha20poly1305_ietf_npubbytes =
      _crypto_aead_xchacha20poly1305_ietf_npubbytes_ptr
          .asFunction<_dart_crypto_aead_xchacha20poly1305_ietf_npubbytes>();

  int crypto_aead_xchacha20poly1305_ietf_abytes() {
    return _crypto_aead_xchacha20poly1305_ietf_abytes();
  }

  late final _crypto_aead_xchacha20poly1305_ietf_abytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_xchacha20poly1305_ietf_abytes>>(
          'crypto_aead_xchacha20poly1305_ietf_abytes');
  late final _dart_crypto_aead_xchacha20poly1305_ietf_abytes
      _crypto_aead_xchacha20poly1305_ietf_abytes =
      _crypto_aead_xchacha20poly1305_ietf_abytes_ptr
          .asFunction<_dart_crypto_aead_xchacha20poly1305_ietf_abytes>();

  int crypto_aead_xchacha20poly1305_ietf_messagebytes_max() {
    return _crypto_aead_xchacha20poly1305_ietf_messagebytes_max();
  }

  late final _crypto_aead_xchacha20poly1305_ietf_messagebytes_max_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_aead_xchacha20poly1305_ietf_messagebytes_max>>(
      'crypto_aead_xchacha20poly1305_ietf_messagebytes_max');
  late final _dart_crypto_aead_xchacha20poly1305_ietf_messagebytes_max
      _crypto_aead_xchacha20poly1305_ietf_messagebytes_max =
      _crypto_aead_xchacha20poly1305_ietf_messagebytes_max_ptr.asFunction<
          _dart_crypto_aead_xchacha20poly1305_ietf_messagebytes_max>();

  int crypto_aead_xchacha20poly1305_ietf_encrypt(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint64> clen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_xchacha20poly1305_ietf_encrypt(
      c,
      clen_p,
      m,
      mlen,
      ad,
      adlen,
      nsec,
      npub,
      k,
    );
  }

  late final _crypto_aead_xchacha20poly1305_ietf_encrypt_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_aead_xchacha20poly1305_ietf_encrypt>>(
      'crypto_aead_xchacha20poly1305_ietf_encrypt');
  late final _dart_crypto_aead_xchacha20poly1305_ietf_encrypt
      _crypto_aead_xchacha20poly1305_ietf_encrypt =
      _crypto_aead_xchacha20poly1305_ietf_encrypt_ptr
          .asFunction<_dart_crypto_aead_xchacha20poly1305_ietf_encrypt>();

  int crypto_aead_xchacha20poly1305_ietf_decrypt(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint64> mlen_p,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_xchacha20poly1305_ietf_decrypt(
      m,
      mlen_p,
      nsec,
      c,
      clen,
      ad,
      adlen,
      npub,
      k,
    );
  }

  late final _crypto_aead_xchacha20poly1305_ietf_decrypt_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_aead_xchacha20poly1305_ietf_decrypt>>(
      'crypto_aead_xchacha20poly1305_ietf_decrypt');
  late final _dart_crypto_aead_xchacha20poly1305_ietf_decrypt
      _crypto_aead_xchacha20poly1305_ietf_decrypt =
      _crypto_aead_xchacha20poly1305_ietf_decrypt_ptr
          .asFunction<_dart_crypto_aead_xchacha20poly1305_ietf_decrypt>();

  int crypto_aead_xchacha20poly1305_ietf_encrypt_detached(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint64> maclen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_xchacha20poly1305_ietf_encrypt_detached(
      c,
      mac,
      maclen_p,
      m,
      mlen,
      ad,
      adlen,
      nsec,
      npub,
      k,
    );
  }

  late final _crypto_aead_xchacha20poly1305_ietf_encrypt_detached_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_aead_xchacha20poly1305_ietf_encrypt_detached>>(
      'crypto_aead_xchacha20poly1305_ietf_encrypt_detached');
  late final _dart_crypto_aead_xchacha20poly1305_ietf_encrypt_detached
      _crypto_aead_xchacha20poly1305_ietf_encrypt_detached =
      _crypto_aead_xchacha20poly1305_ietf_encrypt_detached_ptr.asFunction<
          _dart_crypto_aead_xchacha20poly1305_ietf_encrypt_detached>();

  int crypto_aead_xchacha20poly1305_ietf_decrypt_detached(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> nsec,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    ffi.Pointer<ffi.Uint8> npub,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_xchacha20poly1305_ietf_decrypt_detached(
      m,
      nsec,
      c,
      clen,
      mac,
      ad,
      adlen,
      npub,
      k,
    );
  }

  late final _crypto_aead_xchacha20poly1305_ietf_decrypt_detached_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_aead_xchacha20poly1305_ietf_decrypt_detached>>(
      'crypto_aead_xchacha20poly1305_ietf_decrypt_detached');
  late final _dart_crypto_aead_xchacha20poly1305_ietf_decrypt_detached
      _crypto_aead_xchacha20poly1305_ietf_decrypt_detached =
      _crypto_aead_xchacha20poly1305_ietf_decrypt_detached_ptr.asFunction<
          _dart_crypto_aead_xchacha20poly1305_ietf_decrypt_detached>();

  void crypto_aead_xchacha20poly1305_ietf_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_aead_xchacha20poly1305_ietf_keygen(
      k,
    );
  }

  late final _crypto_aead_xchacha20poly1305_ietf_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_aead_xchacha20poly1305_ietf_keygen>>(
          'crypto_aead_xchacha20poly1305_ietf_keygen');
  late final _dart_crypto_aead_xchacha20poly1305_ietf_keygen
      _crypto_aead_xchacha20poly1305_ietf_keygen =
      _crypto_aead_xchacha20poly1305_ietf_keygen_ptr
          .asFunction<_dart_crypto_aead_xchacha20poly1305_ietf_keygen>();

  int crypto_hash_sha512_statebytes() {
    return _crypto_hash_sha512_statebytes();
  }

  late final _crypto_hash_sha512_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha512_statebytes>>(
          'crypto_hash_sha512_statebytes');
  late final _dart_crypto_hash_sha512_statebytes
      _crypto_hash_sha512_statebytes = _crypto_hash_sha512_statebytes_ptr
          .asFunction<_dart_crypto_hash_sha512_statebytes>();

  int crypto_hash_sha512_bytes() {
    return _crypto_hash_sha512_bytes();
  }

  late final _crypto_hash_sha512_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha512_bytes>>(
          'crypto_hash_sha512_bytes');
  late final _dart_crypto_hash_sha512_bytes _crypto_hash_sha512_bytes =
      _crypto_hash_sha512_bytes_ptr
          .asFunction<_dart_crypto_hash_sha512_bytes>();

  int crypto_hash_sha512(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_hash_sha512(
      out,
      in_1,
      inlen,
    );
  }

  late final _crypto_hash_sha512_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha512>>('crypto_hash_sha512');
  late final _dart_crypto_hash_sha512 _crypto_hash_sha512 =
      _crypto_hash_sha512_ptr.asFunction<_dart_crypto_hash_sha512>();

  int crypto_hash_sha512_init(
    ffi.Pointer<crypto_hash_sha512_state> state,
  ) {
    return _crypto_hash_sha512_init(
      state,
    );
  }

  late final _crypto_hash_sha512_init_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha512_init>>(
          'crypto_hash_sha512_init');
  late final _dart_crypto_hash_sha512_init _crypto_hash_sha512_init =
      _crypto_hash_sha512_init_ptr.asFunction<_dart_crypto_hash_sha512_init>();

  int crypto_hash_sha512_update(
    ffi.Pointer<crypto_hash_sha512_state> state,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_hash_sha512_update(
      state,
      in_1,
      inlen,
    );
  }

  late final _crypto_hash_sha512_update_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha512_update>>(
          'crypto_hash_sha512_update');
  late final _dart_crypto_hash_sha512_update _crypto_hash_sha512_update =
      _crypto_hash_sha512_update_ptr
          .asFunction<_dart_crypto_hash_sha512_update>();

  int crypto_hash_sha512_final(
    ffi.Pointer<crypto_hash_sha512_state> state,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _crypto_hash_sha512_final(
      state,
      out,
    );
  }

  late final _crypto_hash_sha512_final_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha512_final>>(
          'crypto_hash_sha512_final');
  late final _dart_crypto_hash_sha512_final _crypto_hash_sha512_final =
      _crypto_hash_sha512_final_ptr
          .asFunction<_dart_crypto_hash_sha512_final>();

  int crypto_auth_hmacsha512_bytes() {
    return _crypto_auth_hmacsha512_bytes();
  }

  late final _crypto_auth_hmacsha512_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512_bytes>>(
          'crypto_auth_hmacsha512_bytes');
  late final _dart_crypto_auth_hmacsha512_bytes _crypto_auth_hmacsha512_bytes =
      _crypto_auth_hmacsha512_bytes_ptr
          .asFunction<_dart_crypto_auth_hmacsha512_bytes>();

  int crypto_auth_hmacsha512_keybytes() {
    return _crypto_auth_hmacsha512_keybytes();
  }

  late final _crypto_auth_hmacsha512_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512_keybytes>>(
          'crypto_auth_hmacsha512_keybytes');
  late final _dart_crypto_auth_hmacsha512_keybytes
      _crypto_auth_hmacsha512_keybytes = _crypto_auth_hmacsha512_keybytes_ptr
          .asFunction<_dart_crypto_auth_hmacsha512_keybytes>();

  int crypto_auth_hmacsha512(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth_hmacsha512(
      out,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_auth_hmacsha512_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512>>(
          'crypto_auth_hmacsha512');
  late final _dart_crypto_auth_hmacsha512 _crypto_auth_hmacsha512 =
      _crypto_auth_hmacsha512_ptr.asFunction<_dart_crypto_auth_hmacsha512>();

  int crypto_auth_hmacsha512_verify(
    ffi.Pointer<ffi.Uint8> h,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth_hmacsha512_verify(
      h,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_auth_hmacsha512_verify_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512_verify>>(
          'crypto_auth_hmacsha512_verify');
  late final _dart_crypto_auth_hmacsha512_verify
      _crypto_auth_hmacsha512_verify = _crypto_auth_hmacsha512_verify_ptr
          .asFunction<_dart_crypto_auth_hmacsha512_verify>();

  int crypto_auth_hmacsha512_statebytes() {
    return _crypto_auth_hmacsha512_statebytes();
  }

  late final _crypto_auth_hmacsha512_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512_statebytes>>(
          'crypto_auth_hmacsha512_statebytes');
  late final _dart_crypto_auth_hmacsha512_statebytes
      _crypto_auth_hmacsha512_statebytes =
      _crypto_auth_hmacsha512_statebytes_ptr
          .asFunction<_dart_crypto_auth_hmacsha512_statebytes>();

  int crypto_auth_hmacsha512_init(
    ffi.Pointer<crypto_auth_hmacsha512_state> state,
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
  ) {
    return _crypto_auth_hmacsha512_init(
      state,
      key,
      keylen,
    );
  }

  late final _crypto_auth_hmacsha512_init_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512_init>>(
          'crypto_auth_hmacsha512_init');
  late final _dart_crypto_auth_hmacsha512_init _crypto_auth_hmacsha512_init =
      _crypto_auth_hmacsha512_init_ptr
          .asFunction<_dart_crypto_auth_hmacsha512_init>();

  int crypto_auth_hmacsha512_update(
    ffi.Pointer<crypto_auth_hmacsha512_state> state,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_auth_hmacsha512_update(
      state,
      in_1,
      inlen,
    );
  }

  late final _crypto_auth_hmacsha512_update_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512_update>>(
          'crypto_auth_hmacsha512_update');
  late final _dart_crypto_auth_hmacsha512_update
      _crypto_auth_hmacsha512_update = _crypto_auth_hmacsha512_update_ptr
          .asFunction<_dart_crypto_auth_hmacsha512_update>();

  int crypto_auth_hmacsha512_final(
    ffi.Pointer<crypto_auth_hmacsha512_state> state,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _crypto_auth_hmacsha512_final(
      state,
      out,
    );
  }

  late final _crypto_auth_hmacsha512_final_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512_final>>(
          'crypto_auth_hmacsha512_final');
  late final _dart_crypto_auth_hmacsha512_final _crypto_auth_hmacsha512_final =
      _crypto_auth_hmacsha512_final_ptr
          .asFunction<_dart_crypto_auth_hmacsha512_final>();

  void crypto_auth_hmacsha512_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth_hmacsha512_keygen(
      k,
    );
  }

  late final _crypto_auth_hmacsha512_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512_keygen>>(
          'crypto_auth_hmacsha512_keygen');
  late final _dart_crypto_auth_hmacsha512_keygen
      _crypto_auth_hmacsha512_keygen = _crypto_auth_hmacsha512_keygen_ptr
          .asFunction<_dart_crypto_auth_hmacsha512_keygen>();

  int crypto_auth_hmacsha512256_bytes() {
    return _crypto_auth_hmacsha512256_bytes();
  }

  late final _crypto_auth_hmacsha512256_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512256_bytes>>(
          'crypto_auth_hmacsha512256_bytes');
  late final _dart_crypto_auth_hmacsha512256_bytes
      _crypto_auth_hmacsha512256_bytes = _crypto_auth_hmacsha512256_bytes_ptr
          .asFunction<_dart_crypto_auth_hmacsha512256_bytes>();

  int crypto_auth_hmacsha512256_keybytes() {
    return _crypto_auth_hmacsha512256_keybytes();
  }

  late final _crypto_auth_hmacsha512256_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512256_keybytes>>(
          'crypto_auth_hmacsha512256_keybytes');
  late final _dart_crypto_auth_hmacsha512256_keybytes
      _crypto_auth_hmacsha512256_keybytes =
      _crypto_auth_hmacsha512256_keybytes_ptr
          .asFunction<_dart_crypto_auth_hmacsha512256_keybytes>();

  int crypto_auth_hmacsha512256(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth_hmacsha512256(
      out,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_auth_hmacsha512256_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512256>>(
          'crypto_auth_hmacsha512256');
  late final _dart_crypto_auth_hmacsha512256 _crypto_auth_hmacsha512256 =
      _crypto_auth_hmacsha512256_ptr
          .asFunction<_dart_crypto_auth_hmacsha512256>();

  int crypto_auth_hmacsha512256_verify(
    ffi.Pointer<ffi.Uint8> h,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth_hmacsha512256_verify(
      h,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_auth_hmacsha512256_verify_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512256_verify>>(
          'crypto_auth_hmacsha512256_verify');
  late final _dart_crypto_auth_hmacsha512256_verify
      _crypto_auth_hmacsha512256_verify = _crypto_auth_hmacsha512256_verify_ptr
          .asFunction<_dart_crypto_auth_hmacsha512256_verify>();

  int crypto_auth_hmacsha512256_statebytes() {
    return _crypto_auth_hmacsha512256_statebytes();
  }

  late final _crypto_auth_hmacsha512256_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512256_statebytes>>(
          'crypto_auth_hmacsha512256_statebytes');
  late final _dart_crypto_auth_hmacsha512256_statebytes
      _crypto_auth_hmacsha512256_statebytes =
      _crypto_auth_hmacsha512256_statebytes_ptr
          .asFunction<_dart_crypto_auth_hmacsha512256_statebytes>();

  int crypto_auth_hmacsha512256_init(
    ffi.Pointer<crypto_auth_hmacsha512_state> state,
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
  ) {
    return _crypto_auth_hmacsha512256_init(
      state,
      key,
      keylen,
    );
  }

  late final _crypto_auth_hmacsha512256_init_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512256_init>>(
          'crypto_auth_hmacsha512256_init');
  late final _dart_crypto_auth_hmacsha512256_init
      _crypto_auth_hmacsha512256_init = _crypto_auth_hmacsha512256_init_ptr
          .asFunction<_dart_crypto_auth_hmacsha512256_init>();

  int crypto_auth_hmacsha512256_update(
    ffi.Pointer<crypto_auth_hmacsha512_state> state,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_auth_hmacsha512256_update(
      state,
      in_1,
      inlen,
    );
  }

  late final _crypto_auth_hmacsha512256_update_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512256_update>>(
          'crypto_auth_hmacsha512256_update');
  late final _dart_crypto_auth_hmacsha512256_update
      _crypto_auth_hmacsha512256_update = _crypto_auth_hmacsha512256_update_ptr
          .asFunction<_dart_crypto_auth_hmacsha512256_update>();

  int crypto_auth_hmacsha512256_final(
    ffi.Pointer<crypto_auth_hmacsha512_state> state,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _crypto_auth_hmacsha512256_final(
      state,
      out,
    );
  }

  late final _crypto_auth_hmacsha512256_final_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512256_final>>(
          'crypto_auth_hmacsha512256_final');
  late final _dart_crypto_auth_hmacsha512256_final
      _crypto_auth_hmacsha512256_final = _crypto_auth_hmacsha512256_final_ptr
          .asFunction<_dart_crypto_auth_hmacsha512256_final>();

  void crypto_auth_hmacsha512256_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth_hmacsha512256_keygen(
      k,
    );
  }

  late final _crypto_auth_hmacsha512256_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha512256_keygen>>(
          'crypto_auth_hmacsha512256_keygen');
  late final _dart_crypto_auth_hmacsha512256_keygen
      _crypto_auth_hmacsha512256_keygen = _crypto_auth_hmacsha512256_keygen_ptr
          .asFunction<_dart_crypto_auth_hmacsha512256_keygen>();

  int crypto_auth_bytes() {
    return _crypto_auth_bytes();
  }

  late final _crypto_auth_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_bytes>>('crypto_auth_bytes');
  late final _dart_crypto_auth_bytes _crypto_auth_bytes =
      _crypto_auth_bytes_ptr.asFunction<_dart_crypto_auth_bytes>();

  int crypto_auth_keybytes() {
    return _crypto_auth_keybytes();
  }

  late final _crypto_auth_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_keybytes>>(
          'crypto_auth_keybytes');
  late final _dart_crypto_auth_keybytes _crypto_auth_keybytes =
      _crypto_auth_keybytes_ptr.asFunction<_dart_crypto_auth_keybytes>();

  ffi.Pointer<ffi.Int8> crypto_auth_primitive() {
    return _crypto_auth_primitive();
  }

  late final _crypto_auth_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_primitive>>(
          'crypto_auth_primitive');
  late final _dart_crypto_auth_primitive _crypto_auth_primitive =
      _crypto_auth_primitive_ptr.asFunction<_dart_crypto_auth_primitive>();

  int crypto_auth(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth(
      out,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_auth_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth>>('crypto_auth');
  late final _dart_crypto_auth _crypto_auth =
      _crypto_auth_ptr.asFunction<_dart_crypto_auth>();

  int crypto_auth_verify(
    ffi.Pointer<ffi.Uint8> h,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth_verify(
      h,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_auth_verify_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_verify>>('crypto_auth_verify');
  late final _dart_crypto_auth_verify _crypto_auth_verify =
      _crypto_auth_verify_ptr.asFunction<_dart_crypto_auth_verify>();

  void crypto_auth_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth_keygen(
      k,
    );
  }

  late final _crypto_auth_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_keygen>>('crypto_auth_keygen');
  late final _dart_crypto_auth_keygen _crypto_auth_keygen =
      _crypto_auth_keygen_ptr.asFunction<_dart_crypto_auth_keygen>();

  int crypto_hash_sha256_statebytes() {
    return _crypto_hash_sha256_statebytes();
  }

  late final _crypto_hash_sha256_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha256_statebytes>>(
          'crypto_hash_sha256_statebytes');
  late final _dart_crypto_hash_sha256_statebytes
      _crypto_hash_sha256_statebytes = _crypto_hash_sha256_statebytes_ptr
          .asFunction<_dart_crypto_hash_sha256_statebytes>();

  int crypto_hash_sha256_bytes() {
    return _crypto_hash_sha256_bytes();
  }

  late final _crypto_hash_sha256_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha256_bytes>>(
          'crypto_hash_sha256_bytes');
  late final _dart_crypto_hash_sha256_bytes _crypto_hash_sha256_bytes =
      _crypto_hash_sha256_bytes_ptr
          .asFunction<_dart_crypto_hash_sha256_bytes>();

  int crypto_hash_sha256(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_hash_sha256(
      out,
      in_1,
      inlen,
    );
  }

  late final _crypto_hash_sha256_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha256>>('crypto_hash_sha256');
  late final _dart_crypto_hash_sha256 _crypto_hash_sha256 =
      _crypto_hash_sha256_ptr.asFunction<_dart_crypto_hash_sha256>();

  int crypto_hash_sha256_init(
    ffi.Pointer<crypto_hash_sha256_state> state,
  ) {
    return _crypto_hash_sha256_init(
      state,
    );
  }

  late final _crypto_hash_sha256_init_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha256_init>>(
          'crypto_hash_sha256_init');
  late final _dart_crypto_hash_sha256_init _crypto_hash_sha256_init =
      _crypto_hash_sha256_init_ptr.asFunction<_dart_crypto_hash_sha256_init>();

  int crypto_hash_sha256_update(
    ffi.Pointer<crypto_hash_sha256_state> state,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_hash_sha256_update(
      state,
      in_1,
      inlen,
    );
  }

  late final _crypto_hash_sha256_update_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha256_update>>(
          'crypto_hash_sha256_update');
  late final _dart_crypto_hash_sha256_update _crypto_hash_sha256_update =
      _crypto_hash_sha256_update_ptr
          .asFunction<_dart_crypto_hash_sha256_update>();

  int crypto_hash_sha256_final(
    ffi.Pointer<crypto_hash_sha256_state> state,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _crypto_hash_sha256_final(
      state,
      out,
    );
  }

  late final _crypto_hash_sha256_final_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_sha256_final>>(
          'crypto_hash_sha256_final');
  late final _dart_crypto_hash_sha256_final _crypto_hash_sha256_final =
      _crypto_hash_sha256_final_ptr
          .asFunction<_dart_crypto_hash_sha256_final>();

  int crypto_auth_hmacsha256_bytes() {
    return _crypto_auth_hmacsha256_bytes();
  }

  late final _crypto_auth_hmacsha256_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha256_bytes>>(
          'crypto_auth_hmacsha256_bytes');
  late final _dart_crypto_auth_hmacsha256_bytes _crypto_auth_hmacsha256_bytes =
      _crypto_auth_hmacsha256_bytes_ptr
          .asFunction<_dart_crypto_auth_hmacsha256_bytes>();

  int crypto_auth_hmacsha256_keybytes() {
    return _crypto_auth_hmacsha256_keybytes();
  }

  late final _crypto_auth_hmacsha256_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha256_keybytes>>(
          'crypto_auth_hmacsha256_keybytes');
  late final _dart_crypto_auth_hmacsha256_keybytes
      _crypto_auth_hmacsha256_keybytes = _crypto_auth_hmacsha256_keybytes_ptr
          .asFunction<_dart_crypto_auth_hmacsha256_keybytes>();

  int crypto_auth_hmacsha256(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth_hmacsha256(
      out,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_auth_hmacsha256_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha256>>(
          'crypto_auth_hmacsha256');
  late final _dart_crypto_auth_hmacsha256 _crypto_auth_hmacsha256 =
      _crypto_auth_hmacsha256_ptr.asFunction<_dart_crypto_auth_hmacsha256>();

  int crypto_auth_hmacsha256_verify(
    ffi.Pointer<ffi.Uint8> h,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth_hmacsha256_verify(
      h,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_auth_hmacsha256_verify_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha256_verify>>(
          'crypto_auth_hmacsha256_verify');
  late final _dart_crypto_auth_hmacsha256_verify
      _crypto_auth_hmacsha256_verify = _crypto_auth_hmacsha256_verify_ptr
          .asFunction<_dart_crypto_auth_hmacsha256_verify>();

  int crypto_auth_hmacsha256_statebytes() {
    return _crypto_auth_hmacsha256_statebytes();
  }

  late final _crypto_auth_hmacsha256_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha256_statebytes>>(
          'crypto_auth_hmacsha256_statebytes');
  late final _dart_crypto_auth_hmacsha256_statebytes
      _crypto_auth_hmacsha256_statebytes =
      _crypto_auth_hmacsha256_statebytes_ptr
          .asFunction<_dart_crypto_auth_hmacsha256_statebytes>();

  int crypto_auth_hmacsha256_init(
    ffi.Pointer<crypto_auth_hmacsha256_state> state,
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
  ) {
    return _crypto_auth_hmacsha256_init(
      state,
      key,
      keylen,
    );
  }

  late final _crypto_auth_hmacsha256_init_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha256_init>>(
          'crypto_auth_hmacsha256_init');
  late final _dart_crypto_auth_hmacsha256_init _crypto_auth_hmacsha256_init =
      _crypto_auth_hmacsha256_init_ptr
          .asFunction<_dart_crypto_auth_hmacsha256_init>();

  int crypto_auth_hmacsha256_update(
    ffi.Pointer<crypto_auth_hmacsha256_state> state,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_auth_hmacsha256_update(
      state,
      in_1,
      inlen,
    );
  }

  late final _crypto_auth_hmacsha256_update_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha256_update>>(
          'crypto_auth_hmacsha256_update');
  late final _dart_crypto_auth_hmacsha256_update
      _crypto_auth_hmacsha256_update = _crypto_auth_hmacsha256_update_ptr
          .asFunction<_dart_crypto_auth_hmacsha256_update>();

  int crypto_auth_hmacsha256_final(
    ffi.Pointer<crypto_auth_hmacsha256_state> state,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _crypto_auth_hmacsha256_final(
      state,
      out,
    );
  }

  late final _crypto_auth_hmacsha256_final_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha256_final>>(
          'crypto_auth_hmacsha256_final');
  late final _dart_crypto_auth_hmacsha256_final _crypto_auth_hmacsha256_final =
      _crypto_auth_hmacsha256_final_ptr
          .asFunction<_dart_crypto_auth_hmacsha256_final>();

  void crypto_auth_hmacsha256_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_auth_hmacsha256_keygen(
      k,
    );
  }

  late final _crypto_auth_hmacsha256_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_auth_hmacsha256_keygen>>(
          'crypto_auth_hmacsha256_keygen');
  late final _dart_crypto_auth_hmacsha256_keygen
      _crypto_auth_hmacsha256_keygen = _crypto_auth_hmacsha256_keygen_ptr
          .asFunction<_dart_crypto_auth_hmacsha256_keygen>();

  int crypto_stream_xsalsa20_keybytes() {
    return _crypto_stream_xsalsa20_keybytes();
  }

  late final _crypto_stream_xsalsa20_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xsalsa20_keybytes>>(
          'crypto_stream_xsalsa20_keybytes');
  late final _dart_crypto_stream_xsalsa20_keybytes
      _crypto_stream_xsalsa20_keybytes = _crypto_stream_xsalsa20_keybytes_ptr
          .asFunction<_dart_crypto_stream_xsalsa20_keybytes>();

  int crypto_stream_xsalsa20_noncebytes() {
    return _crypto_stream_xsalsa20_noncebytes();
  }

  late final _crypto_stream_xsalsa20_noncebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xsalsa20_noncebytes>>(
          'crypto_stream_xsalsa20_noncebytes');
  late final _dart_crypto_stream_xsalsa20_noncebytes
      _crypto_stream_xsalsa20_noncebytes =
      _crypto_stream_xsalsa20_noncebytes_ptr
          .asFunction<_dart_crypto_stream_xsalsa20_noncebytes>();

  int crypto_stream_xsalsa20_messagebytes_max() {
    return _crypto_stream_xsalsa20_messagebytes_max();
  }

  late final _crypto_stream_xsalsa20_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xsalsa20_messagebytes_max>>(
          'crypto_stream_xsalsa20_messagebytes_max');
  late final _dart_crypto_stream_xsalsa20_messagebytes_max
      _crypto_stream_xsalsa20_messagebytes_max =
      _crypto_stream_xsalsa20_messagebytes_max_ptr
          .asFunction<_dart_crypto_stream_xsalsa20_messagebytes_max>();

  int crypto_stream_xsalsa20(
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_xsalsa20(
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_stream_xsalsa20_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xsalsa20>>(
          'crypto_stream_xsalsa20');
  late final _dart_crypto_stream_xsalsa20 _crypto_stream_xsalsa20 =
      _crypto_stream_xsalsa20_ptr.asFunction<_dart_crypto_stream_xsalsa20>();

  int crypto_stream_xsalsa20_xor(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_xsalsa20_xor(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_stream_xsalsa20_xor_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xsalsa20_xor>>(
          'crypto_stream_xsalsa20_xor');
  late final _dart_crypto_stream_xsalsa20_xor _crypto_stream_xsalsa20_xor =
      _crypto_stream_xsalsa20_xor_ptr
          .asFunction<_dart_crypto_stream_xsalsa20_xor>();

  int crypto_stream_xsalsa20_xor_ic(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    int ic,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_xsalsa20_xor_ic(
      c,
      m,
      mlen,
      n,
      ic,
      k,
    );
  }

  late final _crypto_stream_xsalsa20_xor_ic_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xsalsa20_xor_ic>>(
          'crypto_stream_xsalsa20_xor_ic');
  late final _dart_crypto_stream_xsalsa20_xor_ic
      _crypto_stream_xsalsa20_xor_ic = _crypto_stream_xsalsa20_xor_ic_ptr
          .asFunction<_dart_crypto_stream_xsalsa20_xor_ic>();

  void crypto_stream_xsalsa20_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_xsalsa20_keygen(
      k,
    );
  }

  late final _crypto_stream_xsalsa20_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xsalsa20_keygen>>(
          'crypto_stream_xsalsa20_keygen');
  late final _dart_crypto_stream_xsalsa20_keygen
      _crypto_stream_xsalsa20_keygen = _crypto_stream_xsalsa20_keygen_ptr
          .asFunction<_dart_crypto_stream_xsalsa20_keygen>();

  int crypto_box_curve25519xsalsa20poly1305_seedbytes() {
    return _crypto_box_curve25519xsalsa20poly1305_seedbytes();
  }

  late final _crypto_box_curve25519xsalsa20poly1305_seedbytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xsalsa20poly1305_seedbytes>>(
      'crypto_box_curve25519xsalsa20poly1305_seedbytes');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_seedbytes
      _crypto_box_curve25519xsalsa20poly1305_seedbytes =
      _crypto_box_curve25519xsalsa20poly1305_seedbytes_ptr
          .asFunction<_dart_crypto_box_curve25519xsalsa20poly1305_seedbytes>();

  int crypto_box_curve25519xsalsa20poly1305_publickeybytes() {
    return _crypto_box_curve25519xsalsa20poly1305_publickeybytes();
  }

  late final _crypto_box_curve25519xsalsa20poly1305_publickeybytes_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_box_curve25519xsalsa20poly1305_publickeybytes>>(
          'crypto_box_curve25519xsalsa20poly1305_publickeybytes');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_publickeybytes
      _crypto_box_curve25519xsalsa20poly1305_publickeybytes =
      _crypto_box_curve25519xsalsa20poly1305_publickeybytes_ptr.asFunction<
          _dart_crypto_box_curve25519xsalsa20poly1305_publickeybytes>();

  int crypto_box_curve25519xsalsa20poly1305_secretkeybytes() {
    return _crypto_box_curve25519xsalsa20poly1305_secretkeybytes();
  }

  late final _crypto_box_curve25519xsalsa20poly1305_secretkeybytes_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_box_curve25519xsalsa20poly1305_secretkeybytes>>(
          'crypto_box_curve25519xsalsa20poly1305_secretkeybytes');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_secretkeybytes
      _crypto_box_curve25519xsalsa20poly1305_secretkeybytes =
      _crypto_box_curve25519xsalsa20poly1305_secretkeybytes_ptr.asFunction<
          _dart_crypto_box_curve25519xsalsa20poly1305_secretkeybytes>();

  int crypto_box_curve25519xsalsa20poly1305_beforenmbytes() {
    return _crypto_box_curve25519xsalsa20poly1305_beforenmbytes();
  }

  late final _crypto_box_curve25519xsalsa20poly1305_beforenmbytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xsalsa20poly1305_beforenmbytes>>(
      'crypto_box_curve25519xsalsa20poly1305_beforenmbytes');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_beforenmbytes
      _crypto_box_curve25519xsalsa20poly1305_beforenmbytes =
      _crypto_box_curve25519xsalsa20poly1305_beforenmbytes_ptr.asFunction<
          _dart_crypto_box_curve25519xsalsa20poly1305_beforenmbytes>();

  int crypto_box_curve25519xsalsa20poly1305_noncebytes() {
    return _crypto_box_curve25519xsalsa20poly1305_noncebytes();
  }

  late final _crypto_box_curve25519xsalsa20poly1305_noncebytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xsalsa20poly1305_noncebytes>>(
      'crypto_box_curve25519xsalsa20poly1305_noncebytes');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_noncebytes
      _crypto_box_curve25519xsalsa20poly1305_noncebytes =
      _crypto_box_curve25519xsalsa20poly1305_noncebytes_ptr
          .asFunction<_dart_crypto_box_curve25519xsalsa20poly1305_noncebytes>();

  int crypto_box_curve25519xsalsa20poly1305_macbytes() {
    return _crypto_box_curve25519xsalsa20poly1305_macbytes();
  }

  late final _crypto_box_curve25519xsalsa20poly1305_macbytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xsalsa20poly1305_macbytes>>(
      'crypto_box_curve25519xsalsa20poly1305_macbytes');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_macbytes
      _crypto_box_curve25519xsalsa20poly1305_macbytes =
      _crypto_box_curve25519xsalsa20poly1305_macbytes_ptr
          .asFunction<_dart_crypto_box_curve25519xsalsa20poly1305_macbytes>();

  int crypto_box_curve25519xsalsa20poly1305_messagebytes_max() {
    return _crypto_box_curve25519xsalsa20poly1305_messagebytes_max();
  }

  late final _crypto_box_curve25519xsalsa20poly1305_messagebytes_max_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_box_curve25519xsalsa20poly1305_messagebytes_max>>(
          'crypto_box_curve25519xsalsa20poly1305_messagebytes_max');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_messagebytes_max
      _crypto_box_curve25519xsalsa20poly1305_messagebytes_max =
      _crypto_box_curve25519xsalsa20poly1305_messagebytes_max_ptr.asFunction<
          _dart_crypto_box_curve25519xsalsa20poly1305_messagebytes_max>();

  int crypto_box_curve25519xsalsa20poly1305_seed_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _crypto_box_curve25519xsalsa20poly1305_seed_keypair(
      pk,
      sk,
      seed,
    );
  }

  late final _crypto_box_curve25519xsalsa20poly1305_seed_keypair_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xsalsa20poly1305_seed_keypair>>(
      'crypto_box_curve25519xsalsa20poly1305_seed_keypair');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_seed_keypair
      _crypto_box_curve25519xsalsa20poly1305_seed_keypair =
      _crypto_box_curve25519xsalsa20poly1305_seed_keypair_ptr.asFunction<
          _dart_crypto_box_curve25519xsalsa20poly1305_seed_keypair>();

  int crypto_box_curve25519xsalsa20poly1305_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_curve25519xsalsa20poly1305_keypair(
      pk,
      sk,
    );
  }

  late final _crypto_box_curve25519xsalsa20poly1305_keypair_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_box_curve25519xsalsa20poly1305_keypair>>(
      'crypto_box_curve25519xsalsa20poly1305_keypair');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_keypair
      _crypto_box_curve25519xsalsa20poly1305_keypair =
      _crypto_box_curve25519xsalsa20poly1305_keypair_ptr
          .asFunction<_dart_crypto_box_curve25519xsalsa20poly1305_keypair>();

  int crypto_box_curve25519xsalsa20poly1305_beforenm(
    ffi.Pointer<ffi.Uint8> k,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_curve25519xsalsa20poly1305_beforenm(
      k,
      pk,
      sk,
    );
  }

  late final _crypto_box_curve25519xsalsa20poly1305_beforenm_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xsalsa20poly1305_beforenm>>(
      'crypto_box_curve25519xsalsa20poly1305_beforenm');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_beforenm
      _crypto_box_curve25519xsalsa20poly1305_beforenm =
      _crypto_box_curve25519xsalsa20poly1305_beforenm_ptr
          .asFunction<_dart_crypto_box_curve25519xsalsa20poly1305_beforenm>();

  int crypto_box_curve25519xsalsa20poly1305_boxzerobytes() {
    return _crypto_box_curve25519xsalsa20poly1305_boxzerobytes();
  }

  late final _crypto_box_curve25519xsalsa20poly1305_boxzerobytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xsalsa20poly1305_boxzerobytes>>(
      'crypto_box_curve25519xsalsa20poly1305_boxzerobytes');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_boxzerobytes
      _crypto_box_curve25519xsalsa20poly1305_boxzerobytes =
      _crypto_box_curve25519xsalsa20poly1305_boxzerobytes_ptr.asFunction<
          _dart_crypto_box_curve25519xsalsa20poly1305_boxzerobytes>();

  int crypto_box_curve25519xsalsa20poly1305_zerobytes() {
    return _crypto_box_curve25519xsalsa20poly1305_zerobytes();
  }

  late final _crypto_box_curve25519xsalsa20poly1305_zerobytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xsalsa20poly1305_zerobytes>>(
      'crypto_box_curve25519xsalsa20poly1305_zerobytes');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_zerobytes
      _crypto_box_curve25519xsalsa20poly1305_zerobytes =
      _crypto_box_curve25519xsalsa20poly1305_zerobytes_ptr
          .asFunction<_dart_crypto_box_curve25519xsalsa20poly1305_zerobytes>();

  int crypto_box_curve25519xsalsa20poly1305(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_curve25519xsalsa20poly1305(
      c,
      m,
      mlen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_curve25519xsalsa20poly1305_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_curve25519xsalsa20poly1305>>(
          'crypto_box_curve25519xsalsa20poly1305');
  late final _dart_crypto_box_curve25519xsalsa20poly1305
      _crypto_box_curve25519xsalsa20poly1305 =
      _crypto_box_curve25519xsalsa20poly1305_ptr
          .asFunction<_dart_crypto_box_curve25519xsalsa20poly1305>();

  int crypto_box_curve25519xsalsa20poly1305_open(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_curve25519xsalsa20poly1305_open(
      m,
      c,
      clen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_curve25519xsalsa20poly1305_open_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_box_curve25519xsalsa20poly1305_open>>(
      'crypto_box_curve25519xsalsa20poly1305_open');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_open
      _crypto_box_curve25519xsalsa20poly1305_open =
      _crypto_box_curve25519xsalsa20poly1305_open_ptr
          .asFunction<_dart_crypto_box_curve25519xsalsa20poly1305_open>();

  int crypto_box_curve25519xsalsa20poly1305_afternm(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_curve25519xsalsa20poly1305_afternm(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_box_curve25519xsalsa20poly1305_afternm_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_box_curve25519xsalsa20poly1305_afternm>>(
      'crypto_box_curve25519xsalsa20poly1305_afternm');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_afternm
      _crypto_box_curve25519xsalsa20poly1305_afternm =
      _crypto_box_curve25519xsalsa20poly1305_afternm_ptr
          .asFunction<_dart_crypto_box_curve25519xsalsa20poly1305_afternm>();

  int crypto_box_curve25519xsalsa20poly1305_open_afternm(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_curve25519xsalsa20poly1305_open_afternm(
      m,
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_box_curve25519xsalsa20poly1305_open_afternm_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xsalsa20poly1305_open_afternm>>(
      'crypto_box_curve25519xsalsa20poly1305_open_afternm');
  late final _dart_crypto_box_curve25519xsalsa20poly1305_open_afternm
      _crypto_box_curve25519xsalsa20poly1305_open_afternm =
      _crypto_box_curve25519xsalsa20poly1305_open_afternm_ptr.asFunction<
          _dart_crypto_box_curve25519xsalsa20poly1305_open_afternm>();

  int crypto_box_seedbytes() {
    return _crypto_box_seedbytes();
  }

  late final _crypto_box_seedbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_seedbytes>>(
          'crypto_box_seedbytes');
  late final _dart_crypto_box_seedbytes _crypto_box_seedbytes =
      _crypto_box_seedbytes_ptr.asFunction<_dart_crypto_box_seedbytes>();

  int crypto_box_publickeybytes() {
    return _crypto_box_publickeybytes();
  }

  late final _crypto_box_publickeybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_publickeybytes>>(
          'crypto_box_publickeybytes');
  late final _dart_crypto_box_publickeybytes _crypto_box_publickeybytes =
      _crypto_box_publickeybytes_ptr
          .asFunction<_dart_crypto_box_publickeybytes>();

  int crypto_box_secretkeybytes() {
    return _crypto_box_secretkeybytes();
  }

  late final _crypto_box_secretkeybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_secretkeybytes>>(
          'crypto_box_secretkeybytes');
  late final _dart_crypto_box_secretkeybytes _crypto_box_secretkeybytes =
      _crypto_box_secretkeybytes_ptr
          .asFunction<_dart_crypto_box_secretkeybytes>();

  int crypto_box_noncebytes() {
    return _crypto_box_noncebytes();
  }

  late final _crypto_box_noncebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_noncebytes>>(
          'crypto_box_noncebytes');
  late final _dart_crypto_box_noncebytes _crypto_box_noncebytes =
      _crypto_box_noncebytes_ptr.asFunction<_dart_crypto_box_noncebytes>();

  int crypto_box_macbytes() {
    return _crypto_box_macbytes();
  }

  late final _crypto_box_macbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_macbytes>>(
          'crypto_box_macbytes');
  late final _dart_crypto_box_macbytes _crypto_box_macbytes =
      _crypto_box_macbytes_ptr.asFunction<_dart_crypto_box_macbytes>();

  int crypto_box_messagebytes_max() {
    return _crypto_box_messagebytes_max();
  }

  late final _crypto_box_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_messagebytes_max>>(
          'crypto_box_messagebytes_max');
  late final _dart_crypto_box_messagebytes_max _crypto_box_messagebytes_max =
      _crypto_box_messagebytes_max_ptr
          .asFunction<_dart_crypto_box_messagebytes_max>();

  ffi.Pointer<ffi.Int8> crypto_box_primitive() {
    return _crypto_box_primitive();
  }

  late final _crypto_box_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_primitive>>(
          'crypto_box_primitive');
  late final _dart_crypto_box_primitive _crypto_box_primitive =
      _crypto_box_primitive_ptr.asFunction<_dart_crypto_box_primitive>();

  int crypto_box_seed_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _crypto_box_seed_keypair(
      pk,
      sk,
      seed,
    );
  }

  late final _crypto_box_seed_keypair_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_seed_keypair>>(
          'crypto_box_seed_keypair');
  late final _dart_crypto_box_seed_keypair _crypto_box_seed_keypair =
      _crypto_box_seed_keypair_ptr.asFunction<_dart_crypto_box_seed_keypair>();

  int crypto_box_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_keypair(
      pk,
      sk,
    );
  }

  late final _crypto_box_keypair_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_keypair>>('crypto_box_keypair');
  late final _dart_crypto_box_keypair _crypto_box_keypair =
      _crypto_box_keypair_ptr.asFunction<_dart_crypto_box_keypair>();

  int crypto_box_easy(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_easy(
      c,
      m,
      mlen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_easy_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_easy>>('crypto_box_easy');
  late final _dart_crypto_box_easy _crypto_box_easy =
      _crypto_box_easy_ptr.asFunction<_dart_crypto_box_easy>();

  int crypto_box_open_easy(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_open_easy(
      m,
      c,
      clen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_open_easy_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_open_easy>>(
          'crypto_box_open_easy');
  late final _dart_crypto_box_open_easy _crypto_box_open_easy =
      _crypto_box_open_easy_ptr.asFunction<_dart_crypto_box_open_easy>();

  int crypto_box_detached(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_detached(
      c,
      mac,
      m,
      mlen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_detached_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_detached>>(
          'crypto_box_detached');
  late final _dart_crypto_box_detached _crypto_box_detached =
      _crypto_box_detached_ptr.asFunction<_dart_crypto_box_detached>();

  int crypto_box_open_detached(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_open_detached(
      m,
      c,
      mac,
      clen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_open_detached_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_open_detached>>(
          'crypto_box_open_detached');
  late final _dart_crypto_box_open_detached _crypto_box_open_detached =
      _crypto_box_open_detached_ptr
          .asFunction<_dart_crypto_box_open_detached>();

  int crypto_box_beforenmbytes() {
    return _crypto_box_beforenmbytes();
  }

  late final _crypto_box_beforenmbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_beforenmbytes>>(
          'crypto_box_beforenmbytes');
  late final _dart_crypto_box_beforenmbytes _crypto_box_beforenmbytes =
      _crypto_box_beforenmbytes_ptr
          .asFunction<_dart_crypto_box_beforenmbytes>();

  int crypto_box_beforenm(
    ffi.Pointer<ffi.Uint8> k,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_beforenm(
      k,
      pk,
      sk,
    );
  }

  late final _crypto_box_beforenm_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_beforenm>>(
          'crypto_box_beforenm');
  late final _dart_crypto_box_beforenm _crypto_box_beforenm =
      _crypto_box_beforenm_ptr.asFunction<_dart_crypto_box_beforenm>();

  int crypto_box_easy_afternm(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_easy_afternm(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_box_easy_afternm_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_easy_afternm>>(
          'crypto_box_easy_afternm');
  late final _dart_crypto_box_easy_afternm _crypto_box_easy_afternm =
      _crypto_box_easy_afternm_ptr.asFunction<_dart_crypto_box_easy_afternm>();

  int crypto_box_open_easy_afternm(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_open_easy_afternm(
      m,
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_box_open_easy_afternm_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_open_easy_afternm>>(
          'crypto_box_open_easy_afternm');
  late final _dart_crypto_box_open_easy_afternm _crypto_box_open_easy_afternm =
      _crypto_box_open_easy_afternm_ptr
          .asFunction<_dart_crypto_box_open_easy_afternm>();

  int crypto_box_detached_afternm(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_detached_afternm(
      c,
      mac,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_box_detached_afternm_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_detached_afternm>>(
          'crypto_box_detached_afternm');
  late final _dart_crypto_box_detached_afternm _crypto_box_detached_afternm =
      _crypto_box_detached_afternm_ptr
          .asFunction<_dart_crypto_box_detached_afternm>();

  int crypto_box_open_detached_afternm(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_open_detached_afternm(
      m,
      c,
      mac,
      clen,
      n,
      k,
    );
  }

  late final _crypto_box_open_detached_afternm_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_open_detached_afternm>>(
          'crypto_box_open_detached_afternm');
  late final _dart_crypto_box_open_detached_afternm
      _crypto_box_open_detached_afternm = _crypto_box_open_detached_afternm_ptr
          .asFunction<_dart_crypto_box_open_detached_afternm>();

  int crypto_box_sealbytes() {
    return _crypto_box_sealbytes();
  }

  late final _crypto_box_sealbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_sealbytes>>(
          'crypto_box_sealbytes');
  late final _dart_crypto_box_sealbytes _crypto_box_sealbytes =
      _crypto_box_sealbytes_ptr.asFunction<_dart_crypto_box_sealbytes>();

  int crypto_box_seal(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> pk,
  ) {
    return _crypto_box_seal(
      c,
      m,
      mlen,
      pk,
    );
  }

  late final _crypto_box_seal_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_seal>>('crypto_box_seal');
  late final _dart_crypto_box_seal _crypto_box_seal =
      _crypto_box_seal_ptr.asFunction<_dart_crypto_box_seal>();

  int crypto_box_seal_open(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_seal_open(
      m,
      c,
      clen,
      pk,
      sk,
    );
  }

  late final _crypto_box_seal_open_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_seal_open>>(
          'crypto_box_seal_open');
  late final _dart_crypto_box_seal_open _crypto_box_seal_open =
      _crypto_box_seal_open_ptr.asFunction<_dart_crypto_box_seal_open>();

  int crypto_box_zerobytes() {
    return _crypto_box_zerobytes();
  }

  late final _crypto_box_zerobytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_zerobytes>>(
          'crypto_box_zerobytes');
  late final _dart_crypto_box_zerobytes _crypto_box_zerobytes =
      _crypto_box_zerobytes_ptr.asFunction<_dart_crypto_box_zerobytes>();

  int crypto_box_boxzerobytes() {
    return _crypto_box_boxzerobytes();
  }

  late final _crypto_box_boxzerobytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_boxzerobytes>>(
          'crypto_box_boxzerobytes');
  late final _dart_crypto_box_boxzerobytes _crypto_box_boxzerobytes =
      _crypto_box_boxzerobytes_ptr.asFunction<_dart_crypto_box_boxzerobytes>();

  int crypto_box(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box(
      c,
      m,
      mlen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box>>('crypto_box');
  late final _dart_crypto_box _crypto_box =
      _crypto_box_ptr.asFunction<_dart_crypto_box>();

  int crypto_box_open(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_open(
      m,
      c,
      clen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_open_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_open>>('crypto_box_open');
  late final _dart_crypto_box_open _crypto_box_open =
      _crypto_box_open_ptr.asFunction<_dart_crypto_box_open>();

  int crypto_box_afternm(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_afternm(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_box_afternm_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_afternm>>('crypto_box_afternm');
  late final _dart_crypto_box_afternm _crypto_box_afternm =
      _crypto_box_afternm_ptr.asFunction<_dart_crypto_box_afternm>();

  int crypto_box_open_afternm(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_open_afternm(
      m,
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_box_open_afternm_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_box_open_afternm>>(
          'crypto_box_open_afternm');
  late final _dart_crypto_box_open_afternm _crypto_box_open_afternm =
      _crypto_box_open_afternm_ptr.asFunction<_dart_crypto_box_open_afternm>();

  int crypto_core_hsalsa20_outputbytes() {
    return _crypto_core_hsalsa20_outputbytes();
  }

  late final _crypto_core_hsalsa20_outputbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_hsalsa20_outputbytes>>(
          'crypto_core_hsalsa20_outputbytes');
  late final _dart_crypto_core_hsalsa20_outputbytes
      _crypto_core_hsalsa20_outputbytes = _crypto_core_hsalsa20_outputbytes_ptr
          .asFunction<_dart_crypto_core_hsalsa20_outputbytes>();

  int crypto_core_hsalsa20_inputbytes() {
    return _crypto_core_hsalsa20_inputbytes();
  }

  late final _crypto_core_hsalsa20_inputbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_hsalsa20_inputbytes>>(
          'crypto_core_hsalsa20_inputbytes');
  late final _dart_crypto_core_hsalsa20_inputbytes
      _crypto_core_hsalsa20_inputbytes = _crypto_core_hsalsa20_inputbytes_ptr
          .asFunction<_dart_crypto_core_hsalsa20_inputbytes>();

  int crypto_core_hsalsa20_keybytes() {
    return _crypto_core_hsalsa20_keybytes();
  }

  late final _crypto_core_hsalsa20_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_hsalsa20_keybytes>>(
          'crypto_core_hsalsa20_keybytes');
  late final _dart_crypto_core_hsalsa20_keybytes
      _crypto_core_hsalsa20_keybytes = _crypto_core_hsalsa20_keybytes_ptr
          .asFunction<_dart_crypto_core_hsalsa20_keybytes>();

  int crypto_core_hsalsa20_constbytes() {
    return _crypto_core_hsalsa20_constbytes();
  }

  late final _crypto_core_hsalsa20_constbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_hsalsa20_constbytes>>(
          'crypto_core_hsalsa20_constbytes');
  late final _dart_crypto_core_hsalsa20_constbytes
      _crypto_core_hsalsa20_constbytes = _crypto_core_hsalsa20_constbytes_ptr
          .asFunction<_dart_crypto_core_hsalsa20_constbytes>();

  int crypto_core_hsalsa20(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    ffi.Pointer<ffi.Uint8> k,
    ffi.Pointer<ffi.Uint8> c,
  ) {
    return _crypto_core_hsalsa20(
      out,
      in_1,
      k,
      c,
    );
  }

  late final _crypto_core_hsalsa20_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_hsalsa20>>(
          'crypto_core_hsalsa20');
  late final _dart_crypto_core_hsalsa20 _crypto_core_hsalsa20 =
      _crypto_core_hsalsa20_ptr.asFunction<_dart_crypto_core_hsalsa20>();

  int crypto_core_hchacha20_outputbytes() {
    return _crypto_core_hchacha20_outputbytes();
  }

  late final _crypto_core_hchacha20_outputbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_hchacha20_outputbytes>>(
          'crypto_core_hchacha20_outputbytes');
  late final _dart_crypto_core_hchacha20_outputbytes
      _crypto_core_hchacha20_outputbytes =
      _crypto_core_hchacha20_outputbytes_ptr
          .asFunction<_dart_crypto_core_hchacha20_outputbytes>();

  int crypto_core_hchacha20_inputbytes() {
    return _crypto_core_hchacha20_inputbytes();
  }

  late final _crypto_core_hchacha20_inputbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_hchacha20_inputbytes>>(
          'crypto_core_hchacha20_inputbytes');
  late final _dart_crypto_core_hchacha20_inputbytes
      _crypto_core_hchacha20_inputbytes = _crypto_core_hchacha20_inputbytes_ptr
          .asFunction<_dart_crypto_core_hchacha20_inputbytes>();

  int crypto_core_hchacha20_keybytes() {
    return _crypto_core_hchacha20_keybytes();
  }

  late final _crypto_core_hchacha20_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_hchacha20_keybytes>>(
          'crypto_core_hchacha20_keybytes');
  late final _dart_crypto_core_hchacha20_keybytes
      _crypto_core_hchacha20_keybytes = _crypto_core_hchacha20_keybytes_ptr
          .asFunction<_dart_crypto_core_hchacha20_keybytes>();

  int crypto_core_hchacha20_constbytes() {
    return _crypto_core_hchacha20_constbytes();
  }

  late final _crypto_core_hchacha20_constbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_hchacha20_constbytes>>(
          'crypto_core_hchacha20_constbytes');
  late final _dart_crypto_core_hchacha20_constbytes
      _crypto_core_hchacha20_constbytes = _crypto_core_hchacha20_constbytes_ptr
          .asFunction<_dart_crypto_core_hchacha20_constbytes>();

  int crypto_core_hchacha20(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    ffi.Pointer<ffi.Uint8> k,
    ffi.Pointer<ffi.Uint8> c,
  ) {
    return _crypto_core_hchacha20(
      out,
      in_1,
      k,
      c,
    );
  }

  late final _crypto_core_hchacha20_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_hchacha20>>(
          'crypto_core_hchacha20');
  late final _dart_crypto_core_hchacha20 _crypto_core_hchacha20 =
      _crypto_core_hchacha20_ptr.asFunction<_dart_crypto_core_hchacha20>();

  int crypto_core_salsa20_outputbytes() {
    return _crypto_core_salsa20_outputbytes();
  }

  late final _crypto_core_salsa20_outputbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa20_outputbytes>>(
          'crypto_core_salsa20_outputbytes');
  late final _dart_crypto_core_salsa20_outputbytes
      _crypto_core_salsa20_outputbytes = _crypto_core_salsa20_outputbytes_ptr
          .asFunction<_dart_crypto_core_salsa20_outputbytes>();

  int crypto_core_salsa20_inputbytes() {
    return _crypto_core_salsa20_inputbytes();
  }

  late final _crypto_core_salsa20_inputbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa20_inputbytes>>(
          'crypto_core_salsa20_inputbytes');
  late final _dart_crypto_core_salsa20_inputbytes
      _crypto_core_salsa20_inputbytes = _crypto_core_salsa20_inputbytes_ptr
          .asFunction<_dart_crypto_core_salsa20_inputbytes>();

  int crypto_core_salsa20_keybytes() {
    return _crypto_core_salsa20_keybytes();
  }

  late final _crypto_core_salsa20_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa20_keybytes>>(
          'crypto_core_salsa20_keybytes');
  late final _dart_crypto_core_salsa20_keybytes _crypto_core_salsa20_keybytes =
      _crypto_core_salsa20_keybytes_ptr
          .asFunction<_dart_crypto_core_salsa20_keybytes>();

  int crypto_core_salsa20_constbytes() {
    return _crypto_core_salsa20_constbytes();
  }

  late final _crypto_core_salsa20_constbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa20_constbytes>>(
          'crypto_core_salsa20_constbytes');
  late final _dart_crypto_core_salsa20_constbytes
      _crypto_core_salsa20_constbytes = _crypto_core_salsa20_constbytes_ptr
          .asFunction<_dart_crypto_core_salsa20_constbytes>();

  int crypto_core_salsa20(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    ffi.Pointer<ffi.Uint8> k,
    ffi.Pointer<ffi.Uint8> c,
  ) {
    return _crypto_core_salsa20(
      out,
      in_1,
      k,
      c,
    );
  }

  late final _crypto_core_salsa20_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa20>>(
          'crypto_core_salsa20');
  late final _dart_crypto_core_salsa20 _crypto_core_salsa20 =
      _crypto_core_salsa20_ptr.asFunction<_dart_crypto_core_salsa20>();

  int crypto_core_salsa2012_outputbytes() {
    return _crypto_core_salsa2012_outputbytes();
  }

  late final _crypto_core_salsa2012_outputbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa2012_outputbytes>>(
          'crypto_core_salsa2012_outputbytes');
  late final _dart_crypto_core_salsa2012_outputbytes
      _crypto_core_salsa2012_outputbytes =
      _crypto_core_salsa2012_outputbytes_ptr
          .asFunction<_dart_crypto_core_salsa2012_outputbytes>();

  int crypto_core_salsa2012_inputbytes() {
    return _crypto_core_salsa2012_inputbytes();
  }

  late final _crypto_core_salsa2012_inputbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa2012_inputbytes>>(
          'crypto_core_salsa2012_inputbytes');
  late final _dart_crypto_core_salsa2012_inputbytes
      _crypto_core_salsa2012_inputbytes = _crypto_core_salsa2012_inputbytes_ptr
          .asFunction<_dart_crypto_core_salsa2012_inputbytes>();

  int crypto_core_salsa2012_keybytes() {
    return _crypto_core_salsa2012_keybytes();
  }

  late final _crypto_core_salsa2012_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa2012_keybytes>>(
          'crypto_core_salsa2012_keybytes');
  late final _dart_crypto_core_salsa2012_keybytes
      _crypto_core_salsa2012_keybytes = _crypto_core_salsa2012_keybytes_ptr
          .asFunction<_dart_crypto_core_salsa2012_keybytes>();

  int crypto_core_salsa2012_constbytes() {
    return _crypto_core_salsa2012_constbytes();
  }

  late final _crypto_core_salsa2012_constbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa2012_constbytes>>(
          'crypto_core_salsa2012_constbytes');
  late final _dart_crypto_core_salsa2012_constbytes
      _crypto_core_salsa2012_constbytes = _crypto_core_salsa2012_constbytes_ptr
          .asFunction<_dart_crypto_core_salsa2012_constbytes>();

  int crypto_core_salsa2012(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    ffi.Pointer<ffi.Uint8> k,
    ffi.Pointer<ffi.Uint8> c,
  ) {
    return _crypto_core_salsa2012(
      out,
      in_1,
      k,
      c,
    );
  }

  late final _crypto_core_salsa2012_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa2012>>(
          'crypto_core_salsa2012');
  late final _dart_crypto_core_salsa2012 _crypto_core_salsa2012 =
      _crypto_core_salsa2012_ptr.asFunction<_dart_crypto_core_salsa2012>();

  int crypto_core_salsa208_outputbytes() {
    return _crypto_core_salsa208_outputbytes();
  }

  late final _crypto_core_salsa208_outputbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa208_outputbytes>>(
          'crypto_core_salsa208_outputbytes');
  late final _dart_crypto_core_salsa208_outputbytes
      _crypto_core_salsa208_outputbytes = _crypto_core_salsa208_outputbytes_ptr
          .asFunction<_dart_crypto_core_salsa208_outputbytes>();

  int crypto_core_salsa208_inputbytes() {
    return _crypto_core_salsa208_inputbytes();
  }

  late final _crypto_core_salsa208_inputbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa208_inputbytes>>(
          'crypto_core_salsa208_inputbytes');
  late final _dart_crypto_core_salsa208_inputbytes
      _crypto_core_salsa208_inputbytes = _crypto_core_salsa208_inputbytes_ptr
          .asFunction<_dart_crypto_core_salsa208_inputbytes>();

  int crypto_core_salsa208_keybytes() {
    return _crypto_core_salsa208_keybytes();
  }

  late final _crypto_core_salsa208_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa208_keybytes>>(
          'crypto_core_salsa208_keybytes');
  late final _dart_crypto_core_salsa208_keybytes
      _crypto_core_salsa208_keybytes = _crypto_core_salsa208_keybytes_ptr
          .asFunction<_dart_crypto_core_salsa208_keybytes>();

  int crypto_core_salsa208_constbytes() {
    return _crypto_core_salsa208_constbytes();
  }

  late final _crypto_core_salsa208_constbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa208_constbytes>>(
          'crypto_core_salsa208_constbytes');
  late final _dart_crypto_core_salsa208_constbytes
      _crypto_core_salsa208_constbytes = _crypto_core_salsa208_constbytes_ptr
          .asFunction<_dart_crypto_core_salsa208_constbytes>();

  int crypto_core_salsa208(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    ffi.Pointer<ffi.Uint8> k,
    ffi.Pointer<ffi.Uint8> c,
  ) {
    return _crypto_core_salsa208(
      out,
      in_1,
      k,
      c,
    );
  }

  late final _crypto_core_salsa208_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_salsa208>>(
          'crypto_core_salsa208');
  late final _dart_crypto_core_salsa208 _crypto_core_salsa208 =
      _crypto_core_salsa208_ptr.asFunction<_dart_crypto_core_salsa208>();

  int crypto_generichash_blake2b_bytes_min() {
    return _crypto_generichash_blake2b_bytes_min();
  }

  late final _crypto_generichash_blake2b_bytes_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_bytes_min>>(
          'crypto_generichash_blake2b_bytes_min');
  late final _dart_crypto_generichash_blake2b_bytes_min
      _crypto_generichash_blake2b_bytes_min =
      _crypto_generichash_blake2b_bytes_min_ptr
          .asFunction<_dart_crypto_generichash_blake2b_bytes_min>();

  int crypto_generichash_blake2b_bytes_max() {
    return _crypto_generichash_blake2b_bytes_max();
  }

  late final _crypto_generichash_blake2b_bytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_bytes_max>>(
          'crypto_generichash_blake2b_bytes_max');
  late final _dart_crypto_generichash_blake2b_bytes_max
      _crypto_generichash_blake2b_bytes_max =
      _crypto_generichash_blake2b_bytes_max_ptr
          .asFunction<_dart_crypto_generichash_blake2b_bytes_max>();

  int crypto_generichash_blake2b_bytes() {
    return _crypto_generichash_blake2b_bytes();
  }

  late final _crypto_generichash_blake2b_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_bytes>>(
          'crypto_generichash_blake2b_bytes');
  late final _dart_crypto_generichash_blake2b_bytes
      _crypto_generichash_blake2b_bytes = _crypto_generichash_blake2b_bytes_ptr
          .asFunction<_dart_crypto_generichash_blake2b_bytes>();

  int crypto_generichash_blake2b_keybytes_min() {
    return _crypto_generichash_blake2b_keybytes_min();
  }

  late final _crypto_generichash_blake2b_keybytes_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_keybytes_min>>(
          'crypto_generichash_blake2b_keybytes_min');
  late final _dart_crypto_generichash_blake2b_keybytes_min
      _crypto_generichash_blake2b_keybytes_min =
      _crypto_generichash_blake2b_keybytes_min_ptr
          .asFunction<_dart_crypto_generichash_blake2b_keybytes_min>();

  int crypto_generichash_blake2b_keybytes_max() {
    return _crypto_generichash_blake2b_keybytes_max();
  }

  late final _crypto_generichash_blake2b_keybytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_keybytes_max>>(
          'crypto_generichash_blake2b_keybytes_max');
  late final _dart_crypto_generichash_blake2b_keybytes_max
      _crypto_generichash_blake2b_keybytes_max =
      _crypto_generichash_blake2b_keybytes_max_ptr
          .asFunction<_dart_crypto_generichash_blake2b_keybytes_max>();

  int crypto_generichash_blake2b_keybytes() {
    return _crypto_generichash_blake2b_keybytes();
  }

  late final _crypto_generichash_blake2b_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_keybytes>>(
          'crypto_generichash_blake2b_keybytes');
  late final _dart_crypto_generichash_blake2b_keybytes
      _crypto_generichash_blake2b_keybytes =
      _crypto_generichash_blake2b_keybytes_ptr
          .asFunction<_dart_crypto_generichash_blake2b_keybytes>();

  int crypto_generichash_blake2b_saltbytes() {
    return _crypto_generichash_blake2b_saltbytes();
  }

  late final _crypto_generichash_blake2b_saltbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_saltbytes>>(
          'crypto_generichash_blake2b_saltbytes');
  late final _dart_crypto_generichash_blake2b_saltbytes
      _crypto_generichash_blake2b_saltbytes =
      _crypto_generichash_blake2b_saltbytes_ptr
          .asFunction<_dart_crypto_generichash_blake2b_saltbytes>();

  int crypto_generichash_blake2b_personalbytes() {
    return _crypto_generichash_blake2b_personalbytes();
  }

  late final _crypto_generichash_blake2b_personalbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_personalbytes>>(
          'crypto_generichash_blake2b_personalbytes');
  late final _dart_crypto_generichash_blake2b_personalbytes
      _crypto_generichash_blake2b_personalbytes =
      _crypto_generichash_blake2b_personalbytes_ptr
          .asFunction<_dart_crypto_generichash_blake2b_personalbytes>();

  int crypto_generichash_blake2b_statebytes() {
    return _crypto_generichash_blake2b_statebytes();
  }

  late final _crypto_generichash_blake2b_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_statebytes>>(
          'crypto_generichash_blake2b_statebytes');
  late final _dart_crypto_generichash_blake2b_statebytes
      _crypto_generichash_blake2b_statebytes =
      _crypto_generichash_blake2b_statebytes_ptr
          .asFunction<_dart_crypto_generichash_blake2b_statebytes>();

  int crypto_generichash_blake2b(
    ffi.Pointer<ffi.Uint8> out,
    int outlen,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
  ) {
    return _crypto_generichash_blake2b(
      out,
      outlen,
      in_1,
      inlen,
      key,
      keylen,
    );
  }

  late final _crypto_generichash_blake2b_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b>>(
          'crypto_generichash_blake2b');
  late final _dart_crypto_generichash_blake2b _crypto_generichash_blake2b =
      _crypto_generichash_blake2b_ptr
          .asFunction<_dart_crypto_generichash_blake2b>();

  int crypto_generichash_blake2b_salt_personal(
    ffi.Pointer<ffi.Uint8> out,
    int outlen,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    ffi.Pointer<ffi.Uint8> salt,
    ffi.Pointer<ffi.Uint8> personal,
  ) {
    return _crypto_generichash_blake2b_salt_personal(
      out,
      outlen,
      in_1,
      inlen,
      key,
      keylen,
      salt,
      personal,
    );
  }

  late final _crypto_generichash_blake2b_salt_personal_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_salt_personal>>(
          'crypto_generichash_blake2b_salt_personal');
  late final _dart_crypto_generichash_blake2b_salt_personal
      _crypto_generichash_blake2b_salt_personal =
      _crypto_generichash_blake2b_salt_personal_ptr
          .asFunction<_dart_crypto_generichash_blake2b_salt_personal>();

  int crypto_generichash_blake2b_init(
    ffi.Pointer<crypto_generichash_blake2b_state> state,
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    int outlen,
  ) {
    return _crypto_generichash_blake2b_init(
      state,
      key,
      keylen,
      outlen,
    );
  }

  late final _crypto_generichash_blake2b_init_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_init>>(
          'crypto_generichash_blake2b_init');
  late final _dart_crypto_generichash_blake2b_init
      _crypto_generichash_blake2b_init = _crypto_generichash_blake2b_init_ptr
          .asFunction<_dart_crypto_generichash_blake2b_init>();

  int crypto_generichash_blake2b_init_salt_personal(
    ffi.Pointer<crypto_generichash_blake2b_state> state,
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    int outlen,
    ffi.Pointer<ffi.Uint8> salt,
    ffi.Pointer<ffi.Uint8> personal,
  ) {
    return _crypto_generichash_blake2b_init_salt_personal(
      state,
      key,
      keylen,
      outlen,
      salt,
      personal,
    );
  }

  late final _crypto_generichash_blake2b_init_salt_personal_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_generichash_blake2b_init_salt_personal>>(
      'crypto_generichash_blake2b_init_salt_personal');
  late final _dart_crypto_generichash_blake2b_init_salt_personal
      _crypto_generichash_blake2b_init_salt_personal =
      _crypto_generichash_blake2b_init_salt_personal_ptr
          .asFunction<_dart_crypto_generichash_blake2b_init_salt_personal>();

  int crypto_generichash_blake2b_update(
    ffi.Pointer<crypto_generichash_blake2b_state> state,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_generichash_blake2b_update(
      state,
      in_1,
      inlen,
    );
  }

  late final _crypto_generichash_blake2b_update_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_update>>(
          'crypto_generichash_blake2b_update');
  late final _dart_crypto_generichash_blake2b_update
      _crypto_generichash_blake2b_update =
      _crypto_generichash_blake2b_update_ptr
          .asFunction<_dart_crypto_generichash_blake2b_update>();

  int crypto_generichash_blake2b_final(
    ffi.Pointer<crypto_generichash_blake2b_state> state,
    ffi.Pointer<ffi.Uint8> out,
    int outlen,
  ) {
    return _crypto_generichash_blake2b_final(
      state,
      out,
      outlen,
    );
  }

  late final _crypto_generichash_blake2b_final_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_final>>(
          'crypto_generichash_blake2b_final');
  late final _dart_crypto_generichash_blake2b_final
      _crypto_generichash_blake2b_final = _crypto_generichash_blake2b_final_ptr
          .asFunction<_dart_crypto_generichash_blake2b_final>();

  void crypto_generichash_blake2b_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_generichash_blake2b_keygen(
      k,
    );
  }

  late final _crypto_generichash_blake2b_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_blake2b_keygen>>(
          'crypto_generichash_blake2b_keygen');
  late final _dart_crypto_generichash_blake2b_keygen
      _crypto_generichash_blake2b_keygen =
      _crypto_generichash_blake2b_keygen_ptr
          .asFunction<_dart_crypto_generichash_blake2b_keygen>();

  int crypto_generichash_bytes_min() {
    return _crypto_generichash_bytes_min();
  }

  late final _crypto_generichash_bytes_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_bytes_min>>(
          'crypto_generichash_bytes_min');
  late final _dart_crypto_generichash_bytes_min _crypto_generichash_bytes_min =
      _crypto_generichash_bytes_min_ptr
          .asFunction<_dart_crypto_generichash_bytes_min>();

  int crypto_generichash_bytes_max() {
    return _crypto_generichash_bytes_max();
  }

  late final _crypto_generichash_bytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_bytes_max>>(
          'crypto_generichash_bytes_max');
  late final _dart_crypto_generichash_bytes_max _crypto_generichash_bytes_max =
      _crypto_generichash_bytes_max_ptr
          .asFunction<_dart_crypto_generichash_bytes_max>();

  int crypto_generichash_bytes() {
    return _crypto_generichash_bytes();
  }

  late final _crypto_generichash_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_bytes>>(
          'crypto_generichash_bytes');
  late final _dart_crypto_generichash_bytes _crypto_generichash_bytes =
      _crypto_generichash_bytes_ptr
          .asFunction<_dart_crypto_generichash_bytes>();

  int crypto_generichash_keybytes_min() {
    return _crypto_generichash_keybytes_min();
  }

  late final _crypto_generichash_keybytes_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_keybytes_min>>(
          'crypto_generichash_keybytes_min');
  late final _dart_crypto_generichash_keybytes_min
      _crypto_generichash_keybytes_min = _crypto_generichash_keybytes_min_ptr
          .asFunction<_dart_crypto_generichash_keybytes_min>();

  int crypto_generichash_keybytes_max() {
    return _crypto_generichash_keybytes_max();
  }

  late final _crypto_generichash_keybytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_keybytes_max>>(
          'crypto_generichash_keybytes_max');
  late final _dart_crypto_generichash_keybytes_max
      _crypto_generichash_keybytes_max = _crypto_generichash_keybytes_max_ptr
          .asFunction<_dart_crypto_generichash_keybytes_max>();

  int crypto_generichash_keybytes() {
    return _crypto_generichash_keybytes();
  }

  late final _crypto_generichash_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_keybytes>>(
          'crypto_generichash_keybytes');
  late final _dart_crypto_generichash_keybytes _crypto_generichash_keybytes =
      _crypto_generichash_keybytes_ptr
          .asFunction<_dart_crypto_generichash_keybytes>();

  ffi.Pointer<ffi.Int8> crypto_generichash_primitive() {
    return _crypto_generichash_primitive();
  }

  late final _crypto_generichash_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_primitive>>(
          'crypto_generichash_primitive');
  late final _dart_crypto_generichash_primitive _crypto_generichash_primitive =
      _crypto_generichash_primitive_ptr
          .asFunction<_dart_crypto_generichash_primitive>();

  int crypto_generichash_statebytes() {
    return _crypto_generichash_statebytes();
  }

  late final _crypto_generichash_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_statebytes>>(
          'crypto_generichash_statebytes');
  late final _dart_crypto_generichash_statebytes
      _crypto_generichash_statebytes = _crypto_generichash_statebytes_ptr
          .asFunction<_dart_crypto_generichash_statebytes>();

  int crypto_generichash(
    ffi.Pointer<ffi.Uint8> out,
    int outlen,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
  ) {
    return _crypto_generichash(
      out,
      outlen,
      in_1,
      inlen,
      key,
      keylen,
    );
  }

  late final _crypto_generichash_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash>>('crypto_generichash');
  late final _dart_crypto_generichash _crypto_generichash =
      _crypto_generichash_ptr.asFunction<_dart_crypto_generichash>();

  int crypto_generichash_init(
    ffi.Pointer<crypto_generichash_blake2b_state> state,
    ffi.Pointer<ffi.Uint8> key,
    int keylen,
    int outlen,
  ) {
    return _crypto_generichash_init(
      state,
      key,
      keylen,
      outlen,
    );
  }

  late final _crypto_generichash_init_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_init>>(
          'crypto_generichash_init');
  late final _dart_crypto_generichash_init _crypto_generichash_init =
      _crypto_generichash_init_ptr.asFunction<_dart_crypto_generichash_init>();

  int crypto_generichash_update(
    ffi.Pointer<crypto_generichash_blake2b_state> state,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_generichash_update(
      state,
      in_1,
      inlen,
    );
  }

  late final _crypto_generichash_update_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_update>>(
          'crypto_generichash_update');
  late final _dart_crypto_generichash_update _crypto_generichash_update =
      _crypto_generichash_update_ptr
          .asFunction<_dart_crypto_generichash_update>();

  int crypto_generichash_final(
    ffi.Pointer<crypto_generichash_blake2b_state> state,
    ffi.Pointer<ffi.Uint8> out,
    int outlen,
  ) {
    return _crypto_generichash_final(
      state,
      out,
      outlen,
    );
  }

  late final _crypto_generichash_final_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_final>>(
          'crypto_generichash_final');
  late final _dart_crypto_generichash_final _crypto_generichash_final =
      _crypto_generichash_final_ptr
          .asFunction<_dart_crypto_generichash_final>();

  void crypto_generichash_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_generichash_keygen(
      k,
    );
  }

  late final _crypto_generichash_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_generichash_keygen>>(
          'crypto_generichash_keygen');
  late final _dart_crypto_generichash_keygen _crypto_generichash_keygen =
      _crypto_generichash_keygen_ptr
          .asFunction<_dart_crypto_generichash_keygen>();

  int crypto_hash_bytes() {
    return _crypto_hash_bytes();
  }

  late final _crypto_hash_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_bytes>>('crypto_hash_bytes');
  late final _dart_crypto_hash_bytes _crypto_hash_bytes =
      _crypto_hash_bytes_ptr.asFunction<_dart_crypto_hash_bytes>();

  int crypto_hash(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_hash(
      out,
      in_1,
      inlen,
    );
  }

  late final _crypto_hash_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash>>('crypto_hash');
  late final _dart_crypto_hash _crypto_hash =
      _crypto_hash_ptr.asFunction<_dart_crypto_hash>();

  ffi.Pointer<ffi.Int8> crypto_hash_primitive() {
    return _crypto_hash_primitive();
  }

  late final _crypto_hash_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_hash_primitive>>(
          'crypto_hash_primitive');
  late final _dart_crypto_hash_primitive _crypto_hash_primitive =
      _crypto_hash_primitive_ptr.asFunction<_dart_crypto_hash_primitive>();

  int crypto_kdf_blake2b_bytes_min() {
    return _crypto_kdf_blake2b_bytes_min();
  }

  late final _crypto_kdf_blake2b_bytes_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_blake2b_bytes_min>>(
          'crypto_kdf_blake2b_bytes_min');
  late final _dart_crypto_kdf_blake2b_bytes_min _crypto_kdf_blake2b_bytes_min =
      _crypto_kdf_blake2b_bytes_min_ptr
          .asFunction<_dart_crypto_kdf_blake2b_bytes_min>();

  int crypto_kdf_blake2b_bytes_max() {
    return _crypto_kdf_blake2b_bytes_max();
  }

  late final _crypto_kdf_blake2b_bytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_blake2b_bytes_max>>(
          'crypto_kdf_blake2b_bytes_max');
  late final _dart_crypto_kdf_blake2b_bytes_max _crypto_kdf_blake2b_bytes_max =
      _crypto_kdf_blake2b_bytes_max_ptr
          .asFunction<_dart_crypto_kdf_blake2b_bytes_max>();

  int crypto_kdf_blake2b_contextbytes() {
    return _crypto_kdf_blake2b_contextbytes();
  }

  late final _crypto_kdf_blake2b_contextbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_blake2b_contextbytes>>(
          'crypto_kdf_blake2b_contextbytes');
  late final _dart_crypto_kdf_blake2b_contextbytes
      _crypto_kdf_blake2b_contextbytes = _crypto_kdf_blake2b_contextbytes_ptr
          .asFunction<_dart_crypto_kdf_blake2b_contextbytes>();

  int crypto_kdf_blake2b_keybytes() {
    return _crypto_kdf_blake2b_keybytes();
  }

  late final _crypto_kdf_blake2b_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_blake2b_keybytes>>(
          'crypto_kdf_blake2b_keybytes');
  late final _dart_crypto_kdf_blake2b_keybytes _crypto_kdf_blake2b_keybytes =
      _crypto_kdf_blake2b_keybytes_ptr
          .asFunction<_dart_crypto_kdf_blake2b_keybytes>();

  int crypto_kdf_blake2b_derive_from_key(
    ffi.Pointer<ffi.Uint8> subkey,
    int subkey_len,
    int subkey_id,
    ffi.Pointer<ffi.Int8> ctx,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _crypto_kdf_blake2b_derive_from_key(
      subkey,
      subkey_len,
      subkey_id,
      ctx,
      key,
    );
  }

  late final _crypto_kdf_blake2b_derive_from_key_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_blake2b_derive_from_key>>(
          'crypto_kdf_blake2b_derive_from_key');
  late final _dart_crypto_kdf_blake2b_derive_from_key
      _crypto_kdf_blake2b_derive_from_key =
      _crypto_kdf_blake2b_derive_from_key_ptr
          .asFunction<_dart_crypto_kdf_blake2b_derive_from_key>();

  int crypto_kdf_bytes_min() {
    return _crypto_kdf_bytes_min();
  }

  late final _crypto_kdf_bytes_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_bytes_min>>(
          'crypto_kdf_bytes_min');
  late final _dart_crypto_kdf_bytes_min _crypto_kdf_bytes_min =
      _crypto_kdf_bytes_min_ptr.asFunction<_dart_crypto_kdf_bytes_min>();

  int crypto_kdf_bytes_max() {
    return _crypto_kdf_bytes_max();
  }

  late final _crypto_kdf_bytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_bytes_max>>(
          'crypto_kdf_bytes_max');
  late final _dart_crypto_kdf_bytes_max _crypto_kdf_bytes_max =
      _crypto_kdf_bytes_max_ptr.asFunction<_dart_crypto_kdf_bytes_max>();

  int crypto_kdf_contextbytes() {
    return _crypto_kdf_contextbytes();
  }

  late final _crypto_kdf_contextbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_contextbytes>>(
          'crypto_kdf_contextbytes');
  late final _dart_crypto_kdf_contextbytes _crypto_kdf_contextbytes =
      _crypto_kdf_contextbytes_ptr.asFunction<_dart_crypto_kdf_contextbytes>();

  int crypto_kdf_keybytes() {
    return _crypto_kdf_keybytes();
  }

  late final _crypto_kdf_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_keybytes>>(
          'crypto_kdf_keybytes');
  late final _dart_crypto_kdf_keybytes _crypto_kdf_keybytes =
      _crypto_kdf_keybytes_ptr.asFunction<_dart_crypto_kdf_keybytes>();

  ffi.Pointer<ffi.Int8> crypto_kdf_primitive() {
    return _crypto_kdf_primitive();
  }

  late final _crypto_kdf_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_primitive>>(
          'crypto_kdf_primitive');
  late final _dart_crypto_kdf_primitive _crypto_kdf_primitive =
      _crypto_kdf_primitive_ptr.asFunction<_dart_crypto_kdf_primitive>();

  int crypto_kdf_derive_from_key(
    ffi.Pointer<ffi.Uint8> subkey,
    int subkey_len,
    int subkey_id,
    ffi.Pointer<ffi.Int8> ctx,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _crypto_kdf_derive_from_key(
      subkey,
      subkey_len,
      subkey_id,
      ctx,
      key,
    );
  }

  late final _crypto_kdf_derive_from_key_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_derive_from_key>>(
          'crypto_kdf_derive_from_key');
  late final _dart_crypto_kdf_derive_from_key _crypto_kdf_derive_from_key =
      _crypto_kdf_derive_from_key_ptr
          .asFunction<_dart_crypto_kdf_derive_from_key>();

  void crypto_kdf_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_kdf_keygen(
      k,
    );
  }

  late final _crypto_kdf_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kdf_keygen>>('crypto_kdf_keygen');
  late final _dart_crypto_kdf_keygen _crypto_kdf_keygen =
      _crypto_kdf_keygen_ptr.asFunction<_dart_crypto_kdf_keygen>();

  int crypto_kx_publickeybytes() {
    return _crypto_kx_publickeybytes();
  }

  late final _crypto_kx_publickeybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kx_publickeybytes>>(
          'crypto_kx_publickeybytes');
  late final _dart_crypto_kx_publickeybytes _crypto_kx_publickeybytes =
      _crypto_kx_publickeybytes_ptr
          .asFunction<_dart_crypto_kx_publickeybytes>();

  int crypto_kx_secretkeybytes() {
    return _crypto_kx_secretkeybytes();
  }

  late final _crypto_kx_secretkeybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kx_secretkeybytes>>(
          'crypto_kx_secretkeybytes');
  late final _dart_crypto_kx_secretkeybytes _crypto_kx_secretkeybytes =
      _crypto_kx_secretkeybytes_ptr
          .asFunction<_dart_crypto_kx_secretkeybytes>();

  int crypto_kx_seedbytes() {
    return _crypto_kx_seedbytes();
  }

  late final _crypto_kx_seedbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kx_seedbytes>>(
          'crypto_kx_seedbytes');
  late final _dart_crypto_kx_seedbytes _crypto_kx_seedbytes =
      _crypto_kx_seedbytes_ptr.asFunction<_dart_crypto_kx_seedbytes>();

  int crypto_kx_sessionkeybytes() {
    return _crypto_kx_sessionkeybytes();
  }

  late final _crypto_kx_sessionkeybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kx_sessionkeybytes>>(
          'crypto_kx_sessionkeybytes');
  late final _dart_crypto_kx_sessionkeybytes _crypto_kx_sessionkeybytes =
      _crypto_kx_sessionkeybytes_ptr
          .asFunction<_dart_crypto_kx_sessionkeybytes>();

  ffi.Pointer<ffi.Int8> crypto_kx_primitive() {
    return _crypto_kx_primitive();
  }

  late final _crypto_kx_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kx_primitive>>(
          'crypto_kx_primitive');
  late final _dart_crypto_kx_primitive _crypto_kx_primitive =
      _crypto_kx_primitive_ptr.asFunction<_dart_crypto_kx_primitive>();

  int crypto_kx_seed_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _crypto_kx_seed_keypair(
      pk,
      sk,
      seed,
    );
  }

  late final _crypto_kx_seed_keypair_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kx_seed_keypair>>(
          'crypto_kx_seed_keypair');
  late final _dart_crypto_kx_seed_keypair _crypto_kx_seed_keypair =
      _crypto_kx_seed_keypair_ptr.asFunction<_dart_crypto_kx_seed_keypair>();

  int crypto_kx_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_kx_keypair(
      pk,
      sk,
    );
  }

  late final _crypto_kx_keypair_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kx_keypair>>('crypto_kx_keypair');
  late final _dart_crypto_kx_keypair _crypto_kx_keypair =
      _crypto_kx_keypair_ptr.asFunction<_dart_crypto_kx_keypair>();

  int crypto_kx_client_session_keys(
    ffi.Pointer<ffi.Uint8> rx,
    ffi.Pointer<ffi.Uint8> tx,
    ffi.Pointer<ffi.Uint8> client_pk,
    ffi.Pointer<ffi.Uint8> client_sk,
    ffi.Pointer<ffi.Uint8> server_pk,
  ) {
    return _crypto_kx_client_session_keys(
      rx,
      tx,
      client_pk,
      client_sk,
      server_pk,
    );
  }

  late final _crypto_kx_client_session_keys_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kx_client_session_keys>>(
          'crypto_kx_client_session_keys');
  late final _dart_crypto_kx_client_session_keys
      _crypto_kx_client_session_keys = _crypto_kx_client_session_keys_ptr
          .asFunction<_dart_crypto_kx_client_session_keys>();

  int crypto_kx_server_session_keys(
    ffi.Pointer<ffi.Uint8> rx,
    ffi.Pointer<ffi.Uint8> tx,
    ffi.Pointer<ffi.Uint8> server_pk,
    ffi.Pointer<ffi.Uint8> server_sk,
    ffi.Pointer<ffi.Uint8> client_pk,
  ) {
    return _crypto_kx_server_session_keys(
      rx,
      tx,
      server_pk,
      server_sk,
      client_pk,
    );
  }

  late final _crypto_kx_server_session_keys_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_kx_server_session_keys>>(
          'crypto_kx_server_session_keys');
  late final _dart_crypto_kx_server_session_keys
      _crypto_kx_server_session_keys = _crypto_kx_server_session_keys_ptr
          .asFunction<_dart_crypto_kx_server_session_keys>();

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stdin =
      _lookup<ffi.Pointer<_IO_FILE>>('stdin');

  ffi.Pointer<_IO_FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<_IO_FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stdout =
      _lookup<ffi.Pointer<_IO_FILE>>('stdout');

  ffi.Pointer<_IO_FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<_IO_FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stderr =
      _lookup<ffi.Pointer<_IO_FILE>>('stderr');

  ffi.Pointer<_IO_FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<_IO_FILE> value) => _stderr.value = value;

  int crypto_onetimeauth_poly1305_statebytes() {
    return _crypto_onetimeauth_poly1305_statebytes();
  }

  late final _crypto_onetimeauth_poly1305_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_poly1305_statebytes>>(
          'crypto_onetimeauth_poly1305_statebytes');
  late final _dart_crypto_onetimeauth_poly1305_statebytes
      _crypto_onetimeauth_poly1305_statebytes =
      _crypto_onetimeauth_poly1305_statebytes_ptr
          .asFunction<_dart_crypto_onetimeauth_poly1305_statebytes>();

  int crypto_onetimeauth_poly1305_bytes() {
    return _crypto_onetimeauth_poly1305_bytes();
  }

  late final _crypto_onetimeauth_poly1305_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_poly1305_bytes>>(
          'crypto_onetimeauth_poly1305_bytes');
  late final _dart_crypto_onetimeauth_poly1305_bytes
      _crypto_onetimeauth_poly1305_bytes =
      _crypto_onetimeauth_poly1305_bytes_ptr
          .asFunction<_dart_crypto_onetimeauth_poly1305_bytes>();

  int crypto_onetimeauth_poly1305_keybytes() {
    return _crypto_onetimeauth_poly1305_keybytes();
  }

  late final _crypto_onetimeauth_poly1305_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_poly1305_keybytes>>(
          'crypto_onetimeauth_poly1305_keybytes');
  late final _dart_crypto_onetimeauth_poly1305_keybytes
      _crypto_onetimeauth_poly1305_keybytes =
      _crypto_onetimeauth_poly1305_keybytes_ptr
          .asFunction<_dart_crypto_onetimeauth_poly1305_keybytes>();

  int crypto_onetimeauth_poly1305(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_onetimeauth_poly1305(
      out,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_onetimeauth_poly1305_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_poly1305>>(
          'crypto_onetimeauth_poly1305');
  late final _dart_crypto_onetimeauth_poly1305 _crypto_onetimeauth_poly1305 =
      _crypto_onetimeauth_poly1305_ptr
          .asFunction<_dart_crypto_onetimeauth_poly1305>();

  int crypto_onetimeauth_poly1305_verify(
    ffi.Pointer<ffi.Uint8> h,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_onetimeauth_poly1305_verify(
      h,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_onetimeauth_poly1305_verify_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_poly1305_verify>>(
          'crypto_onetimeauth_poly1305_verify');
  late final _dart_crypto_onetimeauth_poly1305_verify
      _crypto_onetimeauth_poly1305_verify =
      _crypto_onetimeauth_poly1305_verify_ptr
          .asFunction<_dart_crypto_onetimeauth_poly1305_verify>();

  int crypto_onetimeauth_poly1305_init(
    ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _crypto_onetimeauth_poly1305_init(
      state,
      key,
    );
  }

  late final _crypto_onetimeauth_poly1305_init_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_poly1305_init>>(
          'crypto_onetimeauth_poly1305_init');
  late final _dart_crypto_onetimeauth_poly1305_init
      _crypto_onetimeauth_poly1305_init = _crypto_onetimeauth_poly1305_init_ptr
          .asFunction<_dart_crypto_onetimeauth_poly1305_init>();

  int crypto_onetimeauth_poly1305_update(
    ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_onetimeauth_poly1305_update(
      state,
      in_1,
      inlen,
    );
  }

  late final _crypto_onetimeauth_poly1305_update_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_poly1305_update>>(
          'crypto_onetimeauth_poly1305_update');
  late final _dart_crypto_onetimeauth_poly1305_update
      _crypto_onetimeauth_poly1305_update =
      _crypto_onetimeauth_poly1305_update_ptr
          .asFunction<_dart_crypto_onetimeauth_poly1305_update>();

  int crypto_onetimeauth_poly1305_final(
    ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _crypto_onetimeauth_poly1305_final(
      state,
      out,
    );
  }

  late final _crypto_onetimeauth_poly1305_final_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_poly1305_final>>(
          'crypto_onetimeauth_poly1305_final');
  late final _dart_crypto_onetimeauth_poly1305_final
      _crypto_onetimeauth_poly1305_final =
      _crypto_onetimeauth_poly1305_final_ptr
          .asFunction<_dart_crypto_onetimeauth_poly1305_final>();

  void crypto_onetimeauth_poly1305_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_onetimeauth_poly1305_keygen(
      k,
    );
  }

  late final _crypto_onetimeauth_poly1305_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_poly1305_keygen>>(
          'crypto_onetimeauth_poly1305_keygen');
  late final _dart_crypto_onetimeauth_poly1305_keygen
      _crypto_onetimeauth_poly1305_keygen =
      _crypto_onetimeauth_poly1305_keygen_ptr
          .asFunction<_dart_crypto_onetimeauth_poly1305_keygen>();

  int crypto_onetimeauth_statebytes() {
    return _crypto_onetimeauth_statebytes();
  }

  late final _crypto_onetimeauth_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_statebytes>>(
          'crypto_onetimeauth_statebytes');
  late final _dart_crypto_onetimeauth_statebytes
      _crypto_onetimeauth_statebytes = _crypto_onetimeauth_statebytes_ptr
          .asFunction<_dart_crypto_onetimeauth_statebytes>();

  int crypto_onetimeauth_bytes() {
    return _crypto_onetimeauth_bytes();
  }

  late final _crypto_onetimeauth_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_bytes>>(
          'crypto_onetimeauth_bytes');
  late final _dart_crypto_onetimeauth_bytes _crypto_onetimeauth_bytes =
      _crypto_onetimeauth_bytes_ptr
          .asFunction<_dart_crypto_onetimeauth_bytes>();

  int crypto_onetimeauth_keybytes() {
    return _crypto_onetimeauth_keybytes();
  }

  late final _crypto_onetimeauth_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_keybytes>>(
          'crypto_onetimeauth_keybytes');
  late final _dart_crypto_onetimeauth_keybytes _crypto_onetimeauth_keybytes =
      _crypto_onetimeauth_keybytes_ptr
          .asFunction<_dart_crypto_onetimeauth_keybytes>();

  ffi.Pointer<ffi.Int8> crypto_onetimeauth_primitive() {
    return _crypto_onetimeauth_primitive();
  }

  late final _crypto_onetimeauth_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_primitive>>(
          'crypto_onetimeauth_primitive');
  late final _dart_crypto_onetimeauth_primitive _crypto_onetimeauth_primitive =
      _crypto_onetimeauth_primitive_ptr
          .asFunction<_dart_crypto_onetimeauth_primitive>();

  int crypto_onetimeauth(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_onetimeauth(
      out,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_onetimeauth_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth>>('crypto_onetimeauth');
  late final _dart_crypto_onetimeauth _crypto_onetimeauth =
      _crypto_onetimeauth_ptr.asFunction<_dart_crypto_onetimeauth>();

  int crypto_onetimeauth_verify(
    ffi.Pointer<ffi.Uint8> h,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_onetimeauth_verify(
      h,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_onetimeauth_verify_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_verify>>(
          'crypto_onetimeauth_verify');
  late final _dart_crypto_onetimeauth_verify _crypto_onetimeauth_verify =
      _crypto_onetimeauth_verify_ptr
          .asFunction<_dart_crypto_onetimeauth_verify>();

  int crypto_onetimeauth_init(
    ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _crypto_onetimeauth_init(
      state,
      key,
    );
  }

  late final _crypto_onetimeauth_init_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_init>>(
          'crypto_onetimeauth_init');
  late final _dart_crypto_onetimeauth_init _crypto_onetimeauth_init =
      _crypto_onetimeauth_init_ptr.asFunction<_dart_crypto_onetimeauth_init>();

  int crypto_onetimeauth_update(
    ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
  ) {
    return _crypto_onetimeauth_update(
      state,
      in_1,
      inlen,
    );
  }

  late final _crypto_onetimeauth_update_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_update>>(
          'crypto_onetimeauth_update');
  late final _dart_crypto_onetimeauth_update _crypto_onetimeauth_update =
      _crypto_onetimeauth_update_ptr
          .asFunction<_dart_crypto_onetimeauth_update>();

  int crypto_onetimeauth_final(
    ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _crypto_onetimeauth_final(
      state,
      out,
    );
  }

  late final _crypto_onetimeauth_final_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_final>>(
          'crypto_onetimeauth_final');
  late final _dart_crypto_onetimeauth_final _crypto_onetimeauth_final =
      _crypto_onetimeauth_final_ptr
          .asFunction<_dart_crypto_onetimeauth_final>();

  void crypto_onetimeauth_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_onetimeauth_keygen(
      k,
    );
  }

  late final _crypto_onetimeauth_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_onetimeauth_keygen>>(
          'crypto_onetimeauth_keygen');
  late final _dart_crypto_onetimeauth_keygen _crypto_onetimeauth_keygen =
      _crypto_onetimeauth_keygen_ptr
          .asFunction<_dart_crypto_onetimeauth_keygen>();

  int crypto_pwhash_argon2i_alg_argon2i13() {
    return _crypto_pwhash_argon2i_alg_argon2i13();
  }

  late final _crypto_pwhash_argon2i_alg_argon2i13_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_alg_argon2i13>>(
          'crypto_pwhash_argon2i_alg_argon2i13');
  late final _dart_crypto_pwhash_argon2i_alg_argon2i13
      _crypto_pwhash_argon2i_alg_argon2i13 =
      _crypto_pwhash_argon2i_alg_argon2i13_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_alg_argon2i13>();

  int crypto_pwhash_argon2i_bytes_min() {
    return _crypto_pwhash_argon2i_bytes_min();
  }

  late final _crypto_pwhash_argon2i_bytes_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_bytes_min>>(
          'crypto_pwhash_argon2i_bytes_min');
  late final _dart_crypto_pwhash_argon2i_bytes_min
      _crypto_pwhash_argon2i_bytes_min = _crypto_pwhash_argon2i_bytes_min_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_bytes_min>();

  int crypto_pwhash_argon2i_bytes_max() {
    return _crypto_pwhash_argon2i_bytes_max();
  }

  late final _crypto_pwhash_argon2i_bytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_bytes_max>>(
          'crypto_pwhash_argon2i_bytes_max');
  late final _dart_crypto_pwhash_argon2i_bytes_max
      _crypto_pwhash_argon2i_bytes_max = _crypto_pwhash_argon2i_bytes_max_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_bytes_max>();

  int crypto_pwhash_argon2i_passwd_min() {
    return _crypto_pwhash_argon2i_passwd_min();
  }

  late final _crypto_pwhash_argon2i_passwd_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_passwd_min>>(
          'crypto_pwhash_argon2i_passwd_min');
  late final _dart_crypto_pwhash_argon2i_passwd_min
      _crypto_pwhash_argon2i_passwd_min = _crypto_pwhash_argon2i_passwd_min_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_passwd_min>();

  int crypto_pwhash_argon2i_passwd_max() {
    return _crypto_pwhash_argon2i_passwd_max();
  }

  late final _crypto_pwhash_argon2i_passwd_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_passwd_max>>(
          'crypto_pwhash_argon2i_passwd_max');
  late final _dart_crypto_pwhash_argon2i_passwd_max
      _crypto_pwhash_argon2i_passwd_max = _crypto_pwhash_argon2i_passwd_max_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_passwd_max>();

  int crypto_pwhash_argon2i_saltbytes() {
    return _crypto_pwhash_argon2i_saltbytes();
  }

  late final _crypto_pwhash_argon2i_saltbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_saltbytes>>(
          'crypto_pwhash_argon2i_saltbytes');
  late final _dart_crypto_pwhash_argon2i_saltbytes
      _crypto_pwhash_argon2i_saltbytes = _crypto_pwhash_argon2i_saltbytes_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_saltbytes>();

  int crypto_pwhash_argon2i_strbytes() {
    return _crypto_pwhash_argon2i_strbytes();
  }

  late final _crypto_pwhash_argon2i_strbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_strbytes>>(
          'crypto_pwhash_argon2i_strbytes');
  late final _dart_crypto_pwhash_argon2i_strbytes
      _crypto_pwhash_argon2i_strbytes = _crypto_pwhash_argon2i_strbytes_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_strbytes>();

  ffi.Pointer<ffi.Int8> crypto_pwhash_argon2i_strprefix() {
    return _crypto_pwhash_argon2i_strprefix();
  }

  late final _crypto_pwhash_argon2i_strprefix_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_strprefix>>(
          'crypto_pwhash_argon2i_strprefix');
  late final _dart_crypto_pwhash_argon2i_strprefix
      _crypto_pwhash_argon2i_strprefix = _crypto_pwhash_argon2i_strprefix_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_strprefix>();

  int crypto_pwhash_argon2i_opslimit_min() {
    return _crypto_pwhash_argon2i_opslimit_min();
  }

  late final _crypto_pwhash_argon2i_opslimit_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_opslimit_min>>(
          'crypto_pwhash_argon2i_opslimit_min');
  late final _dart_crypto_pwhash_argon2i_opslimit_min
      _crypto_pwhash_argon2i_opslimit_min =
      _crypto_pwhash_argon2i_opslimit_min_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_opslimit_min>();

  int crypto_pwhash_argon2i_opslimit_max() {
    return _crypto_pwhash_argon2i_opslimit_max();
  }

  late final _crypto_pwhash_argon2i_opslimit_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_opslimit_max>>(
          'crypto_pwhash_argon2i_opslimit_max');
  late final _dart_crypto_pwhash_argon2i_opslimit_max
      _crypto_pwhash_argon2i_opslimit_max =
      _crypto_pwhash_argon2i_opslimit_max_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_opslimit_max>();

  int crypto_pwhash_argon2i_memlimit_min() {
    return _crypto_pwhash_argon2i_memlimit_min();
  }

  late final _crypto_pwhash_argon2i_memlimit_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_memlimit_min>>(
          'crypto_pwhash_argon2i_memlimit_min');
  late final _dart_crypto_pwhash_argon2i_memlimit_min
      _crypto_pwhash_argon2i_memlimit_min =
      _crypto_pwhash_argon2i_memlimit_min_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_memlimit_min>();

  int crypto_pwhash_argon2i_memlimit_max() {
    return _crypto_pwhash_argon2i_memlimit_max();
  }

  late final _crypto_pwhash_argon2i_memlimit_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_memlimit_max>>(
          'crypto_pwhash_argon2i_memlimit_max');
  late final _dart_crypto_pwhash_argon2i_memlimit_max
      _crypto_pwhash_argon2i_memlimit_max =
      _crypto_pwhash_argon2i_memlimit_max_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_memlimit_max>();

  int crypto_pwhash_argon2i_opslimit_interactive() {
    return _crypto_pwhash_argon2i_opslimit_interactive();
  }

  late final _crypto_pwhash_argon2i_opslimit_interactive_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_argon2i_opslimit_interactive>>(
      'crypto_pwhash_argon2i_opslimit_interactive');
  late final _dart_crypto_pwhash_argon2i_opslimit_interactive
      _crypto_pwhash_argon2i_opslimit_interactive =
      _crypto_pwhash_argon2i_opslimit_interactive_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_opslimit_interactive>();

  int crypto_pwhash_argon2i_memlimit_interactive() {
    return _crypto_pwhash_argon2i_memlimit_interactive();
  }

  late final _crypto_pwhash_argon2i_memlimit_interactive_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_argon2i_memlimit_interactive>>(
      'crypto_pwhash_argon2i_memlimit_interactive');
  late final _dart_crypto_pwhash_argon2i_memlimit_interactive
      _crypto_pwhash_argon2i_memlimit_interactive =
      _crypto_pwhash_argon2i_memlimit_interactive_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_memlimit_interactive>();

  int crypto_pwhash_argon2i_opslimit_moderate() {
    return _crypto_pwhash_argon2i_opslimit_moderate();
  }

  late final _crypto_pwhash_argon2i_opslimit_moderate_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_opslimit_moderate>>(
          'crypto_pwhash_argon2i_opslimit_moderate');
  late final _dart_crypto_pwhash_argon2i_opslimit_moderate
      _crypto_pwhash_argon2i_opslimit_moderate =
      _crypto_pwhash_argon2i_opslimit_moderate_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_opslimit_moderate>();

  int crypto_pwhash_argon2i_memlimit_moderate() {
    return _crypto_pwhash_argon2i_memlimit_moderate();
  }

  late final _crypto_pwhash_argon2i_memlimit_moderate_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_memlimit_moderate>>(
          'crypto_pwhash_argon2i_memlimit_moderate');
  late final _dart_crypto_pwhash_argon2i_memlimit_moderate
      _crypto_pwhash_argon2i_memlimit_moderate =
      _crypto_pwhash_argon2i_memlimit_moderate_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_memlimit_moderate>();

  int crypto_pwhash_argon2i_opslimit_sensitive() {
    return _crypto_pwhash_argon2i_opslimit_sensitive();
  }

  late final _crypto_pwhash_argon2i_opslimit_sensitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_opslimit_sensitive>>(
          'crypto_pwhash_argon2i_opslimit_sensitive');
  late final _dart_crypto_pwhash_argon2i_opslimit_sensitive
      _crypto_pwhash_argon2i_opslimit_sensitive =
      _crypto_pwhash_argon2i_opslimit_sensitive_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_opslimit_sensitive>();

  int crypto_pwhash_argon2i_memlimit_sensitive() {
    return _crypto_pwhash_argon2i_memlimit_sensitive();
  }

  late final _crypto_pwhash_argon2i_memlimit_sensitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_memlimit_sensitive>>(
          'crypto_pwhash_argon2i_memlimit_sensitive');
  late final _dart_crypto_pwhash_argon2i_memlimit_sensitive
      _crypto_pwhash_argon2i_memlimit_sensitive =
      _crypto_pwhash_argon2i_memlimit_sensitive_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_memlimit_sensitive>();

  int crypto_pwhash_argon2i(
    ffi.Pointer<ffi.Uint8> out,
    int outlen,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
    ffi.Pointer<ffi.Uint8> salt,
    int opslimit,
    int memlimit,
    int alg,
  ) {
    return _crypto_pwhash_argon2i(
      out,
      outlen,
      passwd,
      passwdlen,
      salt,
      opslimit,
      memlimit,
      alg,
    );
  }

  late final _crypto_pwhash_argon2i_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i>>(
          'crypto_pwhash_argon2i');
  late final _dart_crypto_pwhash_argon2i _crypto_pwhash_argon2i =
      _crypto_pwhash_argon2i_ptr.asFunction<_dart_crypto_pwhash_argon2i>();

  int crypto_pwhash_argon2i_str(
    ffi.Pointer<ffi.Int8> out,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
    int opslimit,
    int memlimit,
  ) {
    return _crypto_pwhash_argon2i_str(
      out,
      passwd,
      passwdlen,
      opslimit,
      memlimit,
    );
  }

  late final _crypto_pwhash_argon2i_str_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_str>>(
          'crypto_pwhash_argon2i_str');
  late final _dart_crypto_pwhash_argon2i_str _crypto_pwhash_argon2i_str =
      _crypto_pwhash_argon2i_str_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_str>();

  int crypto_pwhash_argon2i_str_verify(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
  ) {
    return _crypto_pwhash_argon2i_str_verify(
      str,
      passwd,
      passwdlen,
    );
  }

  late final _crypto_pwhash_argon2i_str_verify_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_str_verify>>(
          'crypto_pwhash_argon2i_str_verify');
  late final _dart_crypto_pwhash_argon2i_str_verify
      _crypto_pwhash_argon2i_str_verify = _crypto_pwhash_argon2i_str_verify_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_str_verify>();

  int crypto_pwhash_argon2i_str_needs_rehash(
    ffi.Pointer<ffi.Int8> str,
    int opslimit,
    int memlimit,
  ) {
    return _crypto_pwhash_argon2i_str_needs_rehash(
      str,
      opslimit,
      memlimit,
    );
  }

  late final _crypto_pwhash_argon2i_str_needs_rehash_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2i_str_needs_rehash>>(
          'crypto_pwhash_argon2i_str_needs_rehash');
  late final _dart_crypto_pwhash_argon2i_str_needs_rehash
      _crypto_pwhash_argon2i_str_needs_rehash =
      _crypto_pwhash_argon2i_str_needs_rehash_ptr
          .asFunction<_dart_crypto_pwhash_argon2i_str_needs_rehash>();

  int crypto_pwhash_argon2id_alg_argon2id13() {
    return _crypto_pwhash_argon2id_alg_argon2id13();
  }

  late final _crypto_pwhash_argon2id_alg_argon2id13_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_alg_argon2id13>>(
          'crypto_pwhash_argon2id_alg_argon2id13');
  late final _dart_crypto_pwhash_argon2id_alg_argon2id13
      _crypto_pwhash_argon2id_alg_argon2id13 =
      _crypto_pwhash_argon2id_alg_argon2id13_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_alg_argon2id13>();

  int crypto_pwhash_argon2id_bytes_min() {
    return _crypto_pwhash_argon2id_bytes_min();
  }

  late final _crypto_pwhash_argon2id_bytes_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_bytes_min>>(
          'crypto_pwhash_argon2id_bytes_min');
  late final _dart_crypto_pwhash_argon2id_bytes_min
      _crypto_pwhash_argon2id_bytes_min = _crypto_pwhash_argon2id_bytes_min_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_bytes_min>();

  int crypto_pwhash_argon2id_bytes_max() {
    return _crypto_pwhash_argon2id_bytes_max();
  }

  late final _crypto_pwhash_argon2id_bytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_bytes_max>>(
          'crypto_pwhash_argon2id_bytes_max');
  late final _dart_crypto_pwhash_argon2id_bytes_max
      _crypto_pwhash_argon2id_bytes_max = _crypto_pwhash_argon2id_bytes_max_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_bytes_max>();

  int crypto_pwhash_argon2id_passwd_min() {
    return _crypto_pwhash_argon2id_passwd_min();
  }

  late final _crypto_pwhash_argon2id_passwd_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_passwd_min>>(
          'crypto_pwhash_argon2id_passwd_min');
  late final _dart_crypto_pwhash_argon2id_passwd_min
      _crypto_pwhash_argon2id_passwd_min =
      _crypto_pwhash_argon2id_passwd_min_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_passwd_min>();

  int crypto_pwhash_argon2id_passwd_max() {
    return _crypto_pwhash_argon2id_passwd_max();
  }

  late final _crypto_pwhash_argon2id_passwd_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_passwd_max>>(
          'crypto_pwhash_argon2id_passwd_max');
  late final _dart_crypto_pwhash_argon2id_passwd_max
      _crypto_pwhash_argon2id_passwd_max =
      _crypto_pwhash_argon2id_passwd_max_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_passwd_max>();

  int crypto_pwhash_argon2id_saltbytes() {
    return _crypto_pwhash_argon2id_saltbytes();
  }

  late final _crypto_pwhash_argon2id_saltbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_saltbytes>>(
          'crypto_pwhash_argon2id_saltbytes');
  late final _dart_crypto_pwhash_argon2id_saltbytes
      _crypto_pwhash_argon2id_saltbytes = _crypto_pwhash_argon2id_saltbytes_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_saltbytes>();

  int crypto_pwhash_argon2id_strbytes() {
    return _crypto_pwhash_argon2id_strbytes();
  }

  late final _crypto_pwhash_argon2id_strbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_strbytes>>(
          'crypto_pwhash_argon2id_strbytes');
  late final _dart_crypto_pwhash_argon2id_strbytes
      _crypto_pwhash_argon2id_strbytes = _crypto_pwhash_argon2id_strbytes_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_strbytes>();

  ffi.Pointer<ffi.Int8> crypto_pwhash_argon2id_strprefix() {
    return _crypto_pwhash_argon2id_strprefix();
  }

  late final _crypto_pwhash_argon2id_strprefix_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_strprefix>>(
          'crypto_pwhash_argon2id_strprefix');
  late final _dart_crypto_pwhash_argon2id_strprefix
      _crypto_pwhash_argon2id_strprefix = _crypto_pwhash_argon2id_strprefix_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_strprefix>();

  int crypto_pwhash_argon2id_opslimit_min() {
    return _crypto_pwhash_argon2id_opslimit_min();
  }

  late final _crypto_pwhash_argon2id_opslimit_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_opslimit_min>>(
          'crypto_pwhash_argon2id_opslimit_min');
  late final _dart_crypto_pwhash_argon2id_opslimit_min
      _crypto_pwhash_argon2id_opslimit_min =
      _crypto_pwhash_argon2id_opslimit_min_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_opslimit_min>();

  int crypto_pwhash_argon2id_opslimit_max() {
    return _crypto_pwhash_argon2id_opslimit_max();
  }

  late final _crypto_pwhash_argon2id_opslimit_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_opslimit_max>>(
          'crypto_pwhash_argon2id_opslimit_max');
  late final _dart_crypto_pwhash_argon2id_opslimit_max
      _crypto_pwhash_argon2id_opslimit_max =
      _crypto_pwhash_argon2id_opslimit_max_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_opslimit_max>();

  int crypto_pwhash_argon2id_memlimit_min() {
    return _crypto_pwhash_argon2id_memlimit_min();
  }

  late final _crypto_pwhash_argon2id_memlimit_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_memlimit_min>>(
          'crypto_pwhash_argon2id_memlimit_min');
  late final _dart_crypto_pwhash_argon2id_memlimit_min
      _crypto_pwhash_argon2id_memlimit_min =
      _crypto_pwhash_argon2id_memlimit_min_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_memlimit_min>();

  int crypto_pwhash_argon2id_memlimit_max() {
    return _crypto_pwhash_argon2id_memlimit_max();
  }

  late final _crypto_pwhash_argon2id_memlimit_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_memlimit_max>>(
          'crypto_pwhash_argon2id_memlimit_max');
  late final _dart_crypto_pwhash_argon2id_memlimit_max
      _crypto_pwhash_argon2id_memlimit_max =
      _crypto_pwhash_argon2id_memlimit_max_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_memlimit_max>();

  int crypto_pwhash_argon2id_opslimit_interactive() {
    return _crypto_pwhash_argon2id_opslimit_interactive();
  }

  late final _crypto_pwhash_argon2id_opslimit_interactive_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_argon2id_opslimit_interactive>>(
      'crypto_pwhash_argon2id_opslimit_interactive');
  late final _dart_crypto_pwhash_argon2id_opslimit_interactive
      _crypto_pwhash_argon2id_opslimit_interactive =
      _crypto_pwhash_argon2id_opslimit_interactive_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_opslimit_interactive>();

  int crypto_pwhash_argon2id_memlimit_interactive() {
    return _crypto_pwhash_argon2id_memlimit_interactive();
  }

  late final _crypto_pwhash_argon2id_memlimit_interactive_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_argon2id_memlimit_interactive>>(
      'crypto_pwhash_argon2id_memlimit_interactive');
  late final _dart_crypto_pwhash_argon2id_memlimit_interactive
      _crypto_pwhash_argon2id_memlimit_interactive =
      _crypto_pwhash_argon2id_memlimit_interactive_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_memlimit_interactive>();

  int crypto_pwhash_argon2id_opslimit_moderate() {
    return _crypto_pwhash_argon2id_opslimit_moderate();
  }

  late final _crypto_pwhash_argon2id_opslimit_moderate_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_opslimit_moderate>>(
          'crypto_pwhash_argon2id_opslimit_moderate');
  late final _dart_crypto_pwhash_argon2id_opslimit_moderate
      _crypto_pwhash_argon2id_opslimit_moderate =
      _crypto_pwhash_argon2id_opslimit_moderate_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_opslimit_moderate>();

  int crypto_pwhash_argon2id_memlimit_moderate() {
    return _crypto_pwhash_argon2id_memlimit_moderate();
  }

  late final _crypto_pwhash_argon2id_memlimit_moderate_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_memlimit_moderate>>(
          'crypto_pwhash_argon2id_memlimit_moderate');
  late final _dart_crypto_pwhash_argon2id_memlimit_moderate
      _crypto_pwhash_argon2id_memlimit_moderate =
      _crypto_pwhash_argon2id_memlimit_moderate_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_memlimit_moderate>();

  int crypto_pwhash_argon2id_opslimit_sensitive() {
    return _crypto_pwhash_argon2id_opslimit_sensitive();
  }

  late final _crypto_pwhash_argon2id_opslimit_sensitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_opslimit_sensitive>>(
          'crypto_pwhash_argon2id_opslimit_sensitive');
  late final _dart_crypto_pwhash_argon2id_opslimit_sensitive
      _crypto_pwhash_argon2id_opslimit_sensitive =
      _crypto_pwhash_argon2id_opslimit_sensitive_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_opslimit_sensitive>();

  int crypto_pwhash_argon2id_memlimit_sensitive() {
    return _crypto_pwhash_argon2id_memlimit_sensitive();
  }

  late final _crypto_pwhash_argon2id_memlimit_sensitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_memlimit_sensitive>>(
          'crypto_pwhash_argon2id_memlimit_sensitive');
  late final _dart_crypto_pwhash_argon2id_memlimit_sensitive
      _crypto_pwhash_argon2id_memlimit_sensitive =
      _crypto_pwhash_argon2id_memlimit_sensitive_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_memlimit_sensitive>();

  int crypto_pwhash_argon2id(
    ffi.Pointer<ffi.Uint8> out,
    int outlen,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
    ffi.Pointer<ffi.Uint8> salt,
    int opslimit,
    int memlimit,
    int alg,
  ) {
    return _crypto_pwhash_argon2id(
      out,
      outlen,
      passwd,
      passwdlen,
      salt,
      opslimit,
      memlimit,
      alg,
    );
  }

  late final _crypto_pwhash_argon2id_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id>>(
          'crypto_pwhash_argon2id');
  late final _dart_crypto_pwhash_argon2id _crypto_pwhash_argon2id =
      _crypto_pwhash_argon2id_ptr.asFunction<_dart_crypto_pwhash_argon2id>();

  int crypto_pwhash_argon2id_str(
    ffi.Pointer<ffi.Int8> out,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
    int opslimit,
    int memlimit,
  ) {
    return _crypto_pwhash_argon2id_str(
      out,
      passwd,
      passwdlen,
      opslimit,
      memlimit,
    );
  }

  late final _crypto_pwhash_argon2id_str_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_str>>(
          'crypto_pwhash_argon2id_str');
  late final _dart_crypto_pwhash_argon2id_str _crypto_pwhash_argon2id_str =
      _crypto_pwhash_argon2id_str_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_str>();

  int crypto_pwhash_argon2id_str_verify(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
  ) {
    return _crypto_pwhash_argon2id_str_verify(
      str,
      passwd,
      passwdlen,
    );
  }

  late final _crypto_pwhash_argon2id_str_verify_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_str_verify>>(
          'crypto_pwhash_argon2id_str_verify');
  late final _dart_crypto_pwhash_argon2id_str_verify
      _crypto_pwhash_argon2id_str_verify =
      _crypto_pwhash_argon2id_str_verify_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_str_verify>();

  int crypto_pwhash_argon2id_str_needs_rehash(
    ffi.Pointer<ffi.Int8> str,
    int opslimit,
    int memlimit,
  ) {
    return _crypto_pwhash_argon2id_str_needs_rehash(
      str,
      opslimit,
      memlimit,
    );
  }

  late final _crypto_pwhash_argon2id_str_needs_rehash_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_argon2id_str_needs_rehash>>(
          'crypto_pwhash_argon2id_str_needs_rehash');
  late final _dart_crypto_pwhash_argon2id_str_needs_rehash
      _crypto_pwhash_argon2id_str_needs_rehash =
      _crypto_pwhash_argon2id_str_needs_rehash_ptr
          .asFunction<_dart_crypto_pwhash_argon2id_str_needs_rehash>();

  int crypto_pwhash_alg_argon2i13() {
    return _crypto_pwhash_alg_argon2i13();
  }

  late final _crypto_pwhash_alg_argon2i13_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_alg_argon2i13>>(
          'crypto_pwhash_alg_argon2i13');
  late final _dart_crypto_pwhash_alg_argon2i13 _crypto_pwhash_alg_argon2i13 =
      _crypto_pwhash_alg_argon2i13_ptr
          .asFunction<_dart_crypto_pwhash_alg_argon2i13>();

  int crypto_pwhash_alg_argon2id13() {
    return _crypto_pwhash_alg_argon2id13();
  }

  late final _crypto_pwhash_alg_argon2id13_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_alg_argon2id13>>(
          'crypto_pwhash_alg_argon2id13');
  late final _dart_crypto_pwhash_alg_argon2id13 _crypto_pwhash_alg_argon2id13 =
      _crypto_pwhash_alg_argon2id13_ptr
          .asFunction<_dart_crypto_pwhash_alg_argon2id13>();

  int crypto_pwhash_alg_default() {
    return _crypto_pwhash_alg_default();
  }

  late final _crypto_pwhash_alg_default_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_alg_default>>(
          'crypto_pwhash_alg_default');
  late final _dart_crypto_pwhash_alg_default _crypto_pwhash_alg_default =
      _crypto_pwhash_alg_default_ptr
          .asFunction<_dart_crypto_pwhash_alg_default>();

  int crypto_pwhash_bytes_min() {
    return _crypto_pwhash_bytes_min();
  }

  late final _crypto_pwhash_bytes_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_bytes_min>>(
          'crypto_pwhash_bytes_min');
  late final _dart_crypto_pwhash_bytes_min _crypto_pwhash_bytes_min =
      _crypto_pwhash_bytes_min_ptr.asFunction<_dart_crypto_pwhash_bytes_min>();

  int crypto_pwhash_bytes_max() {
    return _crypto_pwhash_bytes_max();
  }

  late final _crypto_pwhash_bytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_bytes_max>>(
          'crypto_pwhash_bytes_max');
  late final _dart_crypto_pwhash_bytes_max _crypto_pwhash_bytes_max =
      _crypto_pwhash_bytes_max_ptr.asFunction<_dart_crypto_pwhash_bytes_max>();

  int crypto_pwhash_passwd_min() {
    return _crypto_pwhash_passwd_min();
  }

  late final _crypto_pwhash_passwd_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_passwd_min>>(
          'crypto_pwhash_passwd_min');
  late final _dart_crypto_pwhash_passwd_min _crypto_pwhash_passwd_min =
      _crypto_pwhash_passwd_min_ptr
          .asFunction<_dart_crypto_pwhash_passwd_min>();

  int crypto_pwhash_passwd_max() {
    return _crypto_pwhash_passwd_max();
  }

  late final _crypto_pwhash_passwd_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_passwd_max>>(
          'crypto_pwhash_passwd_max');
  late final _dart_crypto_pwhash_passwd_max _crypto_pwhash_passwd_max =
      _crypto_pwhash_passwd_max_ptr
          .asFunction<_dart_crypto_pwhash_passwd_max>();

  int crypto_pwhash_saltbytes() {
    return _crypto_pwhash_saltbytes();
  }

  late final _crypto_pwhash_saltbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_saltbytes>>(
          'crypto_pwhash_saltbytes');
  late final _dart_crypto_pwhash_saltbytes _crypto_pwhash_saltbytes =
      _crypto_pwhash_saltbytes_ptr.asFunction<_dart_crypto_pwhash_saltbytes>();

  int crypto_pwhash_strbytes() {
    return _crypto_pwhash_strbytes();
  }

  late final _crypto_pwhash_strbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_strbytes>>(
          'crypto_pwhash_strbytes');
  late final _dart_crypto_pwhash_strbytes _crypto_pwhash_strbytes =
      _crypto_pwhash_strbytes_ptr.asFunction<_dart_crypto_pwhash_strbytes>();

  ffi.Pointer<ffi.Int8> crypto_pwhash_strprefix() {
    return _crypto_pwhash_strprefix();
  }

  late final _crypto_pwhash_strprefix_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_strprefix>>(
          'crypto_pwhash_strprefix');
  late final _dart_crypto_pwhash_strprefix _crypto_pwhash_strprefix =
      _crypto_pwhash_strprefix_ptr.asFunction<_dart_crypto_pwhash_strprefix>();

  int crypto_pwhash_opslimit_min() {
    return _crypto_pwhash_opslimit_min();
  }

  late final _crypto_pwhash_opslimit_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_opslimit_min>>(
          'crypto_pwhash_opslimit_min');
  late final _dart_crypto_pwhash_opslimit_min _crypto_pwhash_opslimit_min =
      _crypto_pwhash_opslimit_min_ptr
          .asFunction<_dart_crypto_pwhash_opslimit_min>();

  int crypto_pwhash_opslimit_max() {
    return _crypto_pwhash_opslimit_max();
  }

  late final _crypto_pwhash_opslimit_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_opslimit_max>>(
          'crypto_pwhash_opslimit_max');
  late final _dart_crypto_pwhash_opslimit_max _crypto_pwhash_opslimit_max =
      _crypto_pwhash_opslimit_max_ptr
          .asFunction<_dart_crypto_pwhash_opslimit_max>();

  int crypto_pwhash_memlimit_min() {
    return _crypto_pwhash_memlimit_min();
  }

  late final _crypto_pwhash_memlimit_min_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_memlimit_min>>(
          'crypto_pwhash_memlimit_min');
  late final _dart_crypto_pwhash_memlimit_min _crypto_pwhash_memlimit_min =
      _crypto_pwhash_memlimit_min_ptr
          .asFunction<_dart_crypto_pwhash_memlimit_min>();

  int crypto_pwhash_memlimit_max() {
    return _crypto_pwhash_memlimit_max();
  }

  late final _crypto_pwhash_memlimit_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_memlimit_max>>(
          'crypto_pwhash_memlimit_max');
  late final _dart_crypto_pwhash_memlimit_max _crypto_pwhash_memlimit_max =
      _crypto_pwhash_memlimit_max_ptr
          .asFunction<_dart_crypto_pwhash_memlimit_max>();

  int crypto_pwhash_opslimit_interactive() {
    return _crypto_pwhash_opslimit_interactive();
  }

  late final _crypto_pwhash_opslimit_interactive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_opslimit_interactive>>(
          'crypto_pwhash_opslimit_interactive');
  late final _dart_crypto_pwhash_opslimit_interactive
      _crypto_pwhash_opslimit_interactive =
      _crypto_pwhash_opslimit_interactive_ptr
          .asFunction<_dart_crypto_pwhash_opslimit_interactive>();

  int crypto_pwhash_memlimit_interactive() {
    return _crypto_pwhash_memlimit_interactive();
  }

  late final _crypto_pwhash_memlimit_interactive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_memlimit_interactive>>(
          'crypto_pwhash_memlimit_interactive');
  late final _dart_crypto_pwhash_memlimit_interactive
      _crypto_pwhash_memlimit_interactive =
      _crypto_pwhash_memlimit_interactive_ptr
          .asFunction<_dart_crypto_pwhash_memlimit_interactive>();

  int crypto_pwhash_opslimit_moderate() {
    return _crypto_pwhash_opslimit_moderate();
  }

  late final _crypto_pwhash_opslimit_moderate_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_opslimit_moderate>>(
          'crypto_pwhash_opslimit_moderate');
  late final _dart_crypto_pwhash_opslimit_moderate
      _crypto_pwhash_opslimit_moderate = _crypto_pwhash_opslimit_moderate_ptr
          .asFunction<_dart_crypto_pwhash_opslimit_moderate>();

  int crypto_pwhash_memlimit_moderate() {
    return _crypto_pwhash_memlimit_moderate();
  }

  late final _crypto_pwhash_memlimit_moderate_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_memlimit_moderate>>(
          'crypto_pwhash_memlimit_moderate');
  late final _dart_crypto_pwhash_memlimit_moderate
      _crypto_pwhash_memlimit_moderate = _crypto_pwhash_memlimit_moderate_ptr
          .asFunction<_dart_crypto_pwhash_memlimit_moderate>();

  int crypto_pwhash_opslimit_sensitive() {
    return _crypto_pwhash_opslimit_sensitive();
  }

  late final _crypto_pwhash_opslimit_sensitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_opslimit_sensitive>>(
          'crypto_pwhash_opslimit_sensitive');
  late final _dart_crypto_pwhash_opslimit_sensitive
      _crypto_pwhash_opslimit_sensitive = _crypto_pwhash_opslimit_sensitive_ptr
          .asFunction<_dart_crypto_pwhash_opslimit_sensitive>();

  int crypto_pwhash_memlimit_sensitive() {
    return _crypto_pwhash_memlimit_sensitive();
  }

  late final _crypto_pwhash_memlimit_sensitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_memlimit_sensitive>>(
          'crypto_pwhash_memlimit_sensitive');
  late final _dart_crypto_pwhash_memlimit_sensitive
      _crypto_pwhash_memlimit_sensitive = _crypto_pwhash_memlimit_sensitive_ptr
          .asFunction<_dart_crypto_pwhash_memlimit_sensitive>();

  int crypto_pwhash(
    ffi.Pointer<ffi.Uint8> out,
    int outlen,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
    ffi.Pointer<ffi.Uint8> salt,
    int opslimit,
    int memlimit,
    int alg,
  ) {
    return _crypto_pwhash(
      out,
      outlen,
      passwd,
      passwdlen,
      salt,
      opslimit,
      memlimit,
      alg,
    );
  }

  late final _crypto_pwhash_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash>>('crypto_pwhash');
  late final _dart_crypto_pwhash _crypto_pwhash =
      _crypto_pwhash_ptr.asFunction<_dart_crypto_pwhash>();

  int crypto_pwhash_str(
    ffi.Pointer<ffi.Int8> out,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
    int opslimit,
    int memlimit,
  ) {
    return _crypto_pwhash_str(
      out,
      passwd,
      passwdlen,
      opslimit,
      memlimit,
    );
  }

  late final _crypto_pwhash_str_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_str>>('crypto_pwhash_str');
  late final _dart_crypto_pwhash_str _crypto_pwhash_str =
      _crypto_pwhash_str_ptr.asFunction<_dart_crypto_pwhash_str>();

  int crypto_pwhash_str_alg(
    ffi.Pointer<ffi.Int8> out,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
    int opslimit,
    int memlimit,
    int alg,
  ) {
    return _crypto_pwhash_str_alg(
      out,
      passwd,
      passwdlen,
      opslimit,
      memlimit,
      alg,
    );
  }

  late final _crypto_pwhash_str_alg_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_str_alg>>(
          'crypto_pwhash_str_alg');
  late final _dart_crypto_pwhash_str_alg _crypto_pwhash_str_alg =
      _crypto_pwhash_str_alg_ptr.asFunction<_dart_crypto_pwhash_str_alg>();

  int crypto_pwhash_str_verify(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
  ) {
    return _crypto_pwhash_str_verify(
      str,
      passwd,
      passwdlen,
    );
  }

  late final _crypto_pwhash_str_verify_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_str_verify>>(
          'crypto_pwhash_str_verify');
  late final _dart_crypto_pwhash_str_verify _crypto_pwhash_str_verify =
      _crypto_pwhash_str_verify_ptr
          .asFunction<_dart_crypto_pwhash_str_verify>();

  int crypto_pwhash_str_needs_rehash(
    ffi.Pointer<ffi.Int8> str,
    int opslimit,
    int memlimit,
  ) {
    return _crypto_pwhash_str_needs_rehash(
      str,
      opslimit,
      memlimit,
    );
  }

  late final _crypto_pwhash_str_needs_rehash_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_str_needs_rehash>>(
          'crypto_pwhash_str_needs_rehash');
  late final _dart_crypto_pwhash_str_needs_rehash
      _crypto_pwhash_str_needs_rehash = _crypto_pwhash_str_needs_rehash_ptr
          .asFunction<_dart_crypto_pwhash_str_needs_rehash>();

  ffi.Pointer<ffi.Int8> crypto_pwhash_primitive() {
    return _crypto_pwhash_primitive();
  }

  late final _crypto_pwhash_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_primitive>>(
          'crypto_pwhash_primitive');
  late final _dart_crypto_pwhash_primitive _crypto_pwhash_primitive =
      _crypto_pwhash_primitive_ptr.asFunction<_dart_crypto_pwhash_primitive>();

  int crypto_scalarmult_curve25519_bytes() {
    return _crypto_scalarmult_curve25519_bytes();
  }

  late final _crypto_scalarmult_curve25519_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_curve25519_bytes>>(
          'crypto_scalarmult_curve25519_bytes');
  late final _dart_crypto_scalarmult_curve25519_bytes
      _crypto_scalarmult_curve25519_bytes =
      _crypto_scalarmult_curve25519_bytes_ptr
          .asFunction<_dart_crypto_scalarmult_curve25519_bytes>();

  int crypto_scalarmult_curve25519_scalarbytes() {
    return _crypto_scalarmult_curve25519_scalarbytes();
  }

  late final _crypto_scalarmult_curve25519_scalarbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_curve25519_scalarbytes>>(
          'crypto_scalarmult_curve25519_scalarbytes');
  late final _dart_crypto_scalarmult_curve25519_scalarbytes
      _crypto_scalarmult_curve25519_scalarbytes =
      _crypto_scalarmult_curve25519_scalarbytes_ptr
          .asFunction<_dart_crypto_scalarmult_curve25519_scalarbytes>();

  int crypto_scalarmult_curve25519(
    ffi.Pointer<ffi.Uint8> q,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _crypto_scalarmult_curve25519(
      q,
      n,
      p,
    );
  }

  late final _crypto_scalarmult_curve25519_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_curve25519>>(
          'crypto_scalarmult_curve25519');
  late final _dart_crypto_scalarmult_curve25519 _crypto_scalarmult_curve25519 =
      _crypto_scalarmult_curve25519_ptr
          .asFunction<_dart_crypto_scalarmult_curve25519>();

  int crypto_scalarmult_curve25519_base(
    ffi.Pointer<ffi.Uint8> q,
    ffi.Pointer<ffi.Uint8> n,
  ) {
    return _crypto_scalarmult_curve25519_base(
      q,
      n,
    );
  }

  late final _crypto_scalarmult_curve25519_base_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_curve25519_base>>(
          'crypto_scalarmult_curve25519_base');
  late final _dart_crypto_scalarmult_curve25519_base
      _crypto_scalarmult_curve25519_base =
      _crypto_scalarmult_curve25519_base_ptr
          .asFunction<_dart_crypto_scalarmult_curve25519_base>();

  int crypto_scalarmult_bytes() {
    return _crypto_scalarmult_bytes();
  }

  late final _crypto_scalarmult_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_bytes>>(
          'crypto_scalarmult_bytes');
  late final _dart_crypto_scalarmult_bytes _crypto_scalarmult_bytes =
      _crypto_scalarmult_bytes_ptr.asFunction<_dart_crypto_scalarmult_bytes>();

  int crypto_scalarmult_scalarbytes() {
    return _crypto_scalarmult_scalarbytes();
  }

  late final _crypto_scalarmult_scalarbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_scalarbytes>>(
          'crypto_scalarmult_scalarbytes');
  late final _dart_crypto_scalarmult_scalarbytes
      _crypto_scalarmult_scalarbytes = _crypto_scalarmult_scalarbytes_ptr
          .asFunction<_dart_crypto_scalarmult_scalarbytes>();

  ffi.Pointer<ffi.Int8> crypto_scalarmult_primitive() {
    return _crypto_scalarmult_primitive();
  }

  late final _crypto_scalarmult_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_primitive>>(
          'crypto_scalarmult_primitive');
  late final _dart_crypto_scalarmult_primitive _crypto_scalarmult_primitive =
      _crypto_scalarmult_primitive_ptr
          .asFunction<_dart_crypto_scalarmult_primitive>();

  int crypto_scalarmult_base(
    ffi.Pointer<ffi.Uint8> q,
    ffi.Pointer<ffi.Uint8> n,
  ) {
    return _crypto_scalarmult_base(
      q,
      n,
    );
  }

  late final _crypto_scalarmult_base_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_base>>(
          'crypto_scalarmult_base');
  late final _dart_crypto_scalarmult_base _crypto_scalarmult_base =
      _crypto_scalarmult_base_ptr.asFunction<_dart_crypto_scalarmult_base>();

  int crypto_scalarmult(
    ffi.Pointer<ffi.Uint8> q,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _crypto_scalarmult(
      q,
      n,
      p,
    );
  }

  late final _crypto_scalarmult_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult>>('crypto_scalarmult');
  late final _dart_crypto_scalarmult _crypto_scalarmult =
      _crypto_scalarmult_ptr.asFunction<_dart_crypto_scalarmult>();

  int crypto_secretbox_xsalsa20poly1305_keybytes() {
    return _crypto_secretbox_xsalsa20poly1305_keybytes();
  }

  late final _crypto_secretbox_xsalsa20poly1305_keybytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretbox_xsalsa20poly1305_keybytes>>(
      'crypto_secretbox_xsalsa20poly1305_keybytes');
  late final _dart_crypto_secretbox_xsalsa20poly1305_keybytes
      _crypto_secretbox_xsalsa20poly1305_keybytes =
      _crypto_secretbox_xsalsa20poly1305_keybytes_ptr
          .asFunction<_dart_crypto_secretbox_xsalsa20poly1305_keybytes>();

  int crypto_secretbox_xsalsa20poly1305_noncebytes() {
    return _crypto_secretbox_xsalsa20poly1305_noncebytes();
  }

  late final _crypto_secretbox_xsalsa20poly1305_noncebytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretbox_xsalsa20poly1305_noncebytes>>(
      'crypto_secretbox_xsalsa20poly1305_noncebytes');
  late final _dart_crypto_secretbox_xsalsa20poly1305_noncebytes
      _crypto_secretbox_xsalsa20poly1305_noncebytes =
      _crypto_secretbox_xsalsa20poly1305_noncebytes_ptr
          .asFunction<_dart_crypto_secretbox_xsalsa20poly1305_noncebytes>();

  int crypto_secretbox_xsalsa20poly1305_macbytes() {
    return _crypto_secretbox_xsalsa20poly1305_macbytes();
  }

  late final _crypto_secretbox_xsalsa20poly1305_macbytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretbox_xsalsa20poly1305_macbytes>>(
      'crypto_secretbox_xsalsa20poly1305_macbytes');
  late final _dart_crypto_secretbox_xsalsa20poly1305_macbytes
      _crypto_secretbox_xsalsa20poly1305_macbytes =
      _crypto_secretbox_xsalsa20poly1305_macbytes_ptr
          .asFunction<_dart_crypto_secretbox_xsalsa20poly1305_macbytes>();

  int crypto_secretbox_xsalsa20poly1305_messagebytes_max() {
    return _crypto_secretbox_xsalsa20poly1305_messagebytes_max();
  }

  late final _crypto_secretbox_xsalsa20poly1305_messagebytes_max_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretbox_xsalsa20poly1305_messagebytes_max>>(
      'crypto_secretbox_xsalsa20poly1305_messagebytes_max');
  late final _dart_crypto_secretbox_xsalsa20poly1305_messagebytes_max
      _crypto_secretbox_xsalsa20poly1305_messagebytes_max =
      _crypto_secretbox_xsalsa20poly1305_messagebytes_max_ptr.asFunction<
          _dart_crypto_secretbox_xsalsa20poly1305_messagebytes_max>();

  int crypto_secretbox_xsalsa20poly1305(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_xsalsa20poly1305(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_xsalsa20poly1305_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_xsalsa20poly1305>>(
          'crypto_secretbox_xsalsa20poly1305');
  late final _dart_crypto_secretbox_xsalsa20poly1305
      _crypto_secretbox_xsalsa20poly1305 =
      _crypto_secretbox_xsalsa20poly1305_ptr
          .asFunction<_dart_crypto_secretbox_xsalsa20poly1305>();

  int crypto_secretbox_xsalsa20poly1305_open(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_xsalsa20poly1305_open(
      m,
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_xsalsa20poly1305_open_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_xsalsa20poly1305_open>>(
          'crypto_secretbox_xsalsa20poly1305_open');
  late final _dart_crypto_secretbox_xsalsa20poly1305_open
      _crypto_secretbox_xsalsa20poly1305_open =
      _crypto_secretbox_xsalsa20poly1305_open_ptr
          .asFunction<_dart_crypto_secretbox_xsalsa20poly1305_open>();

  void crypto_secretbox_xsalsa20poly1305_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_xsalsa20poly1305_keygen(
      k,
    );
  }

  late final _crypto_secretbox_xsalsa20poly1305_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_xsalsa20poly1305_keygen>>(
          'crypto_secretbox_xsalsa20poly1305_keygen');
  late final _dart_crypto_secretbox_xsalsa20poly1305_keygen
      _crypto_secretbox_xsalsa20poly1305_keygen =
      _crypto_secretbox_xsalsa20poly1305_keygen_ptr
          .asFunction<_dart_crypto_secretbox_xsalsa20poly1305_keygen>();

  int crypto_secretbox_xsalsa20poly1305_boxzerobytes() {
    return _crypto_secretbox_xsalsa20poly1305_boxzerobytes();
  }

  late final _crypto_secretbox_xsalsa20poly1305_boxzerobytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretbox_xsalsa20poly1305_boxzerobytes>>(
      'crypto_secretbox_xsalsa20poly1305_boxzerobytes');
  late final _dart_crypto_secretbox_xsalsa20poly1305_boxzerobytes
      _crypto_secretbox_xsalsa20poly1305_boxzerobytes =
      _crypto_secretbox_xsalsa20poly1305_boxzerobytes_ptr
          .asFunction<_dart_crypto_secretbox_xsalsa20poly1305_boxzerobytes>();

  int crypto_secretbox_xsalsa20poly1305_zerobytes() {
    return _crypto_secretbox_xsalsa20poly1305_zerobytes();
  }

  late final _crypto_secretbox_xsalsa20poly1305_zerobytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretbox_xsalsa20poly1305_zerobytes>>(
      'crypto_secretbox_xsalsa20poly1305_zerobytes');
  late final _dart_crypto_secretbox_xsalsa20poly1305_zerobytes
      _crypto_secretbox_xsalsa20poly1305_zerobytes =
      _crypto_secretbox_xsalsa20poly1305_zerobytes_ptr
          .asFunction<_dart_crypto_secretbox_xsalsa20poly1305_zerobytes>();

  int crypto_secretbox_keybytes() {
    return _crypto_secretbox_keybytes();
  }

  late final _crypto_secretbox_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_keybytes>>(
          'crypto_secretbox_keybytes');
  late final _dart_crypto_secretbox_keybytes _crypto_secretbox_keybytes =
      _crypto_secretbox_keybytes_ptr
          .asFunction<_dart_crypto_secretbox_keybytes>();

  int crypto_secretbox_noncebytes() {
    return _crypto_secretbox_noncebytes();
  }

  late final _crypto_secretbox_noncebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_noncebytes>>(
          'crypto_secretbox_noncebytes');
  late final _dart_crypto_secretbox_noncebytes _crypto_secretbox_noncebytes =
      _crypto_secretbox_noncebytes_ptr
          .asFunction<_dart_crypto_secretbox_noncebytes>();

  int crypto_secretbox_macbytes() {
    return _crypto_secretbox_macbytes();
  }

  late final _crypto_secretbox_macbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_macbytes>>(
          'crypto_secretbox_macbytes');
  late final _dart_crypto_secretbox_macbytes _crypto_secretbox_macbytes =
      _crypto_secretbox_macbytes_ptr
          .asFunction<_dart_crypto_secretbox_macbytes>();

  ffi.Pointer<ffi.Int8> crypto_secretbox_primitive() {
    return _crypto_secretbox_primitive();
  }

  late final _crypto_secretbox_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_primitive>>(
          'crypto_secretbox_primitive');
  late final _dart_crypto_secretbox_primitive _crypto_secretbox_primitive =
      _crypto_secretbox_primitive_ptr
          .asFunction<_dart_crypto_secretbox_primitive>();

  int crypto_secretbox_messagebytes_max() {
    return _crypto_secretbox_messagebytes_max();
  }

  late final _crypto_secretbox_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_messagebytes_max>>(
          'crypto_secretbox_messagebytes_max');
  late final _dart_crypto_secretbox_messagebytes_max
      _crypto_secretbox_messagebytes_max =
      _crypto_secretbox_messagebytes_max_ptr
          .asFunction<_dart_crypto_secretbox_messagebytes_max>();

  int crypto_secretbox_easy(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_easy(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_easy_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_easy>>(
          'crypto_secretbox_easy');
  late final _dart_crypto_secretbox_easy _crypto_secretbox_easy =
      _crypto_secretbox_easy_ptr.asFunction<_dart_crypto_secretbox_easy>();

  int crypto_secretbox_open_easy(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_open_easy(
      m,
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_open_easy_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_open_easy>>(
          'crypto_secretbox_open_easy');
  late final _dart_crypto_secretbox_open_easy _crypto_secretbox_open_easy =
      _crypto_secretbox_open_easy_ptr
          .asFunction<_dart_crypto_secretbox_open_easy>();

  int crypto_secretbox_detached(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_detached(
      c,
      mac,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_detached_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_detached>>(
          'crypto_secretbox_detached');
  late final _dart_crypto_secretbox_detached _crypto_secretbox_detached =
      _crypto_secretbox_detached_ptr
          .asFunction<_dart_crypto_secretbox_detached>();

  int crypto_secretbox_open_detached(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_open_detached(
      m,
      c,
      mac,
      clen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_open_detached_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_open_detached>>(
          'crypto_secretbox_open_detached');
  late final _dart_crypto_secretbox_open_detached
      _crypto_secretbox_open_detached = _crypto_secretbox_open_detached_ptr
          .asFunction<_dart_crypto_secretbox_open_detached>();

  void crypto_secretbox_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_keygen(
      k,
    );
  }

  late final _crypto_secretbox_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_keygen>>(
          'crypto_secretbox_keygen');
  late final _dart_crypto_secretbox_keygen _crypto_secretbox_keygen =
      _crypto_secretbox_keygen_ptr.asFunction<_dart_crypto_secretbox_keygen>();

  int crypto_secretbox_zerobytes() {
    return _crypto_secretbox_zerobytes();
  }

  late final _crypto_secretbox_zerobytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_zerobytes>>(
          'crypto_secretbox_zerobytes');
  late final _dart_crypto_secretbox_zerobytes _crypto_secretbox_zerobytes =
      _crypto_secretbox_zerobytes_ptr
          .asFunction<_dart_crypto_secretbox_zerobytes>();

  int crypto_secretbox_boxzerobytes() {
    return _crypto_secretbox_boxzerobytes();
  }

  late final _crypto_secretbox_boxzerobytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_boxzerobytes>>(
          'crypto_secretbox_boxzerobytes');
  late final _dart_crypto_secretbox_boxzerobytes
      _crypto_secretbox_boxzerobytes = _crypto_secretbox_boxzerobytes_ptr
          .asFunction<_dart_crypto_secretbox_boxzerobytes>();

  int crypto_secretbox(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox>>('crypto_secretbox');
  late final _dart_crypto_secretbox _crypto_secretbox =
      _crypto_secretbox_ptr.asFunction<_dart_crypto_secretbox>();

  int crypto_secretbox_open(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_open(
      m,
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_open_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_open>>(
          'crypto_secretbox_open');
  late final _dart_crypto_secretbox_open _crypto_secretbox_open =
      _crypto_secretbox_open_ptr.asFunction<_dart_crypto_secretbox_open>();

  int crypto_stream_chacha20_keybytes() {
    return _crypto_stream_chacha20_keybytes();
  }

  late final _crypto_stream_chacha20_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_keybytes>>(
          'crypto_stream_chacha20_keybytes');
  late final _dart_crypto_stream_chacha20_keybytes
      _crypto_stream_chacha20_keybytes = _crypto_stream_chacha20_keybytes_ptr
          .asFunction<_dart_crypto_stream_chacha20_keybytes>();

  int crypto_stream_chacha20_noncebytes() {
    return _crypto_stream_chacha20_noncebytes();
  }

  late final _crypto_stream_chacha20_noncebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_noncebytes>>(
          'crypto_stream_chacha20_noncebytes');
  late final _dart_crypto_stream_chacha20_noncebytes
      _crypto_stream_chacha20_noncebytes =
      _crypto_stream_chacha20_noncebytes_ptr
          .asFunction<_dart_crypto_stream_chacha20_noncebytes>();

  int crypto_stream_chacha20_messagebytes_max() {
    return _crypto_stream_chacha20_messagebytes_max();
  }

  late final _crypto_stream_chacha20_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_messagebytes_max>>(
          'crypto_stream_chacha20_messagebytes_max');
  late final _dart_crypto_stream_chacha20_messagebytes_max
      _crypto_stream_chacha20_messagebytes_max =
      _crypto_stream_chacha20_messagebytes_max_ptr
          .asFunction<_dart_crypto_stream_chacha20_messagebytes_max>();

  int crypto_stream_chacha20(
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_chacha20(
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_stream_chacha20_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20>>(
          'crypto_stream_chacha20');
  late final _dart_crypto_stream_chacha20 _crypto_stream_chacha20 =
      _crypto_stream_chacha20_ptr.asFunction<_dart_crypto_stream_chacha20>();

  int crypto_stream_chacha20_xor(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_chacha20_xor(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_stream_chacha20_xor_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_xor>>(
          'crypto_stream_chacha20_xor');
  late final _dart_crypto_stream_chacha20_xor _crypto_stream_chacha20_xor =
      _crypto_stream_chacha20_xor_ptr
          .asFunction<_dart_crypto_stream_chacha20_xor>();

  int crypto_stream_chacha20_xor_ic(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    int ic,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_chacha20_xor_ic(
      c,
      m,
      mlen,
      n,
      ic,
      k,
    );
  }

  late final _crypto_stream_chacha20_xor_ic_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_xor_ic>>(
          'crypto_stream_chacha20_xor_ic');
  late final _dart_crypto_stream_chacha20_xor_ic
      _crypto_stream_chacha20_xor_ic = _crypto_stream_chacha20_xor_ic_ptr
          .asFunction<_dart_crypto_stream_chacha20_xor_ic>();

  void crypto_stream_chacha20_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_chacha20_keygen(
      k,
    );
  }

  late final _crypto_stream_chacha20_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_keygen>>(
          'crypto_stream_chacha20_keygen');
  late final _dart_crypto_stream_chacha20_keygen
      _crypto_stream_chacha20_keygen = _crypto_stream_chacha20_keygen_ptr
          .asFunction<_dart_crypto_stream_chacha20_keygen>();

  int crypto_stream_chacha20_ietf_keybytes() {
    return _crypto_stream_chacha20_ietf_keybytes();
  }

  late final _crypto_stream_chacha20_ietf_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_ietf_keybytes>>(
          'crypto_stream_chacha20_ietf_keybytes');
  late final _dart_crypto_stream_chacha20_ietf_keybytes
      _crypto_stream_chacha20_ietf_keybytes =
      _crypto_stream_chacha20_ietf_keybytes_ptr
          .asFunction<_dart_crypto_stream_chacha20_ietf_keybytes>();

  int crypto_stream_chacha20_ietf_noncebytes() {
    return _crypto_stream_chacha20_ietf_noncebytes();
  }

  late final _crypto_stream_chacha20_ietf_noncebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_ietf_noncebytes>>(
          'crypto_stream_chacha20_ietf_noncebytes');
  late final _dart_crypto_stream_chacha20_ietf_noncebytes
      _crypto_stream_chacha20_ietf_noncebytes =
      _crypto_stream_chacha20_ietf_noncebytes_ptr
          .asFunction<_dart_crypto_stream_chacha20_ietf_noncebytes>();

  int crypto_stream_chacha20_ietf_messagebytes_max() {
    return _crypto_stream_chacha20_ietf_messagebytes_max();
  }

  late final _crypto_stream_chacha20_ietf_messagebytes_max_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_stream_chacha20_ietf_messagebytes_max>>(
      'crypto_stream_chacha20_ietf_messagebytes_max');
  late final _dart_crypto_stream_chacha20_ietf_messagebytes_max
      _crypto_stream_chacha20_ietf_messagebytes_max =
      _crypto_stream_chacha20_ietf_messagebytes_max_ptr
          .asFunction<_dart_crypto_stream_chacha20_ietf_messagebytes_max>();

  int crypto_stream_chacha20_ietf(
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_chacha20_ietf(
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_stream_chacha20_ietf_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_ietf>>(
          'crypto_stream_chacha20_ietf');
  late final _dart_crypto_stream_chacha20_ietf _crypto_stream_chacha20_ietf =
      _crypto_stream_chacha20_ietf_ptr
          .asFunction<_dart_crypto_stream_chacha20_ietf>();

  int crypto_stream_chacha20_ietf_xor(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_chacha20_ietf_xor(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_stream_chacha20_ietf_xor_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_ietf_xor>>(
          'crypto_stream_chacha20_ietf_xor');
  late final _dart_crypto_stream_chacha20_ietf_xor
      _crypto_stream_chacha20_ietf_xor = _crypto_stream_chacha20_ietf_xor_ptr
          .asFunction<_dart_crypto_stream_chacha20_ietf_xor>();

  int crypto_stream_chacha20_ietf_xor_ic(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    int ic,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_chacha20_ietf_xor_ic(
      c,
      m,
      mlen,
      n,
      ic,
      k,
    );
  }

  late final _crypto_stream_chacha20_ietf_xor_ic_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_ietf_xor_ic>>(
          'crypto_stream_chacha20_ietf_xor_ic');
  late final _dart_crypto_stream_chacha20_ietf_xor_ic
      _crypto_stream_chacha20_ietf_xor_ic =
      _crypto_stream_chacha20_ietf_xor_ic_ptr
          .asFunction<_dart_crypto_stream_chacha20_ietf_xor_ic>();

  void crypto_stream_chacha20_ietf_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_chacha20_ietf_keygen(
      k,
    );
  }

  late final _crypto_stream_chacha20_ietf_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_chacha20_ietf_keygen>>(
          'crypto_stream_chacha20_ietf_keygen');
  late final _dart_crypto_stream_chacha20_ietf_keygen
      _crypto_stream_chacha20_ietf_keygen =
      _crypto_stream_chacha20_ietf_keygen_ptr
          .asFunction<_dart_crypto_stream_chacha20_ietf_keygen>();

  int crypto_secretstream_xchacha20poly1305_abytes() {
    return _crypto_secretstream_xchacha20poly1305_abytes();
  }

  late final _crypto_secretstream_xchacha20poly1305_abytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretstream_xchacha20poly1305_abytes>>(
      'crypto_secretstream_xchacha20poly1305_abytes');
  late final _dart_crypto_secretstream_xchacha20poly1305_abytes
      _crypto_secretstream_xchacha20poly1305_abytes =
      _crypto_secretstream_xchacha20poly1305_abytes_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_abytes>();

  int crypto_secretstream_xchacha20poly1305_headerbytes() {
    return _crypto_secretstream_xchacha20poly1305_headerbytes();
  }

  late final _crypto_secretstream_xchacha20poly1305_headerbytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretstream_xchacha20poly1305_headerbytes>>(
      'crypto_secretstream_xchacha20poly1305_headerbytes');
  late final _dart_crypto_secretstream_xchacha20poly1305_headerbytes
      _crypto_secretstream_xchacha20poly1305_headerbytes =
      _crypto_secretstream_xchacha20poly1305_headerbytes_ptr.asFunction<
          _dart_crypto_secretstream_xchacha20poly1305_headerbytes>();

  int crypto_secretstream_xchacha20poly1305_keybytes() {
    return _crypto_secretstream_xchacha20poly1305_keybytes();
  }

  late final _crypto_secretstream_xchacha20poly1305_keybytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretstream_xchacha20poly1305_keybytes>>(
      'crypto_secretstream_xchacha20poly1305_keybytes');
  late final _dart_crypto_secretstream_xchacha20poly1305_keybytes
      _crypto_secretstream_xchacha20poly1305_keybytes =
      _crypto_secretstream_xchacha20poly1305_keybytes_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_keybytes>();

  int crypto_secretstream_xchacha20poly1305_messagebytes_max() {
    return _crypto_secretstream_xchacha20poly1305_messagebytes_max();
  }

  late final _crypto_secretstream_xchacha20poly1305_messagebytes_max_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_secretstream_xchacha20poly1305_messagebytes_max>>(
          'crypto_secretstream_xchacha20poly1305_messagebytes_max');
  late final _dart_crypto_secretstream_xchacha20poly1305_messagebytes_max
      _crypto_secretstream_xchacha20poly1305_messagebytes_max =
      _crypto_secretstream_xchacha20poly1305_messagebytes_max_ptr.asFunction<
          _dart_crypto_secretstream_xchacha20poly1305_messagebytes_max>();

  int crypto_secretstream_xchacha20poly1305_tag_message() {
    return _crypto_secretstream_xchacha20poly1305_tag_message();
  }

  late final _crypto_secretstream_xchacha20poly1305_tag_message_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretstream_xchacha20poly1305_tag_message>>(
      'crypto_secretstream_xchacha20poly1305_tag_message');
  late final _dart_crypto_secretstream_xchacha20poly1305_tag_message
      _crypto_secretstream_xchacha20poly1305_tag_message =
      _crypto_secretstream_xchacha20poly1305_tag_message_ptr.asFunction<
          _dart_crypto_secretstream_xchacha20poly1305_tag_message>();

  int crypto_secretstream_xchacha20poly1305_tag_push() {
    return _crypto_secretstream_xchacha20poly1305_tag_push();
  }

  late final _crypto_secretstream_xchacha20poly1305_tag_push_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretstream_xchacha20poly1305_tag_push>>(
      'crypto_secretstream_xchacha20poly1305_tag_push');
  late final _dart_crypto_secretstream_xchacha20poly1305_tag_push
      _crypto_secretstream_xchacha20poly1305_tag_push =
      _crypto_secretstream_xchacha20poly1305_tag_push_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_tag_push>();

  int crypto_secretstream_xchacha20poly1305_tag_rekey() {
    return _crypto_secretstream_xchacha20poly1305_tag_rekey();
  }

  late final _crypto_secretstream_xchacha20poly1305_tag_rekey_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretstream_xchacha20poly1305_tag_rekey>>(
      'crypto_secretstream_xchacha20poly1305_tag_rekey');
  late final _dart_crypto_secretstream_xchacha20poly1305_tag_rekey
      _crypto_secretstream_xchacha20poly1305_tag_rekey =
      _crypto_secretstream_xchacha20poly1305_tag_rekey_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_tag_rekey>();

  int crypto_secretstream_xchacha20poly1305_tag_final() {
    return _crypto_secretstream_xchacha20poly1305_tag_final();
  }

  late final _crypto_secretstream_xchacha20poly1305_tag_final_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretstream_xchacha20poly1305_tag_final>>(
      'crypto_secretstream_xchacha20poly1305_tag_final');
  late final _dart_crypto_secretstream_xchacha20poly1305_tag_final
      _crypto_secretstream_xchacha20poly1305_tag_final =
      _crypto_secretstream_xchacha20poly1305_tag_final_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_tag_final>();

  int crypto_secretstream_xchacha20poly1305_statebytes() {
    return _crypto_secretstream_xchacha20poly1305_statebytes();
  }

  late final _crypto_secretstream_xchacha20poly1305_statebytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretstream_xchacha20poly1305_statebytes>>(
      'crypto_secretstream_xchacha20poly1305_statebytes');
  late final _dart_crypto_secretstream_xchacha20poly1305_statebytes
      _crypto_secretstream_xchacha20poly1305_statebytes =
      _crypto_secretstream_xchacha20poly1305_statebytes_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_statebytes>();

  void crypto_secretstream_xchacha20poly1305_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretstream_xchacha20poly1305_keygen(
      k,
    );
  }

  late final _crypto_secretstream_xchacha20poly1305_keygen_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretstream_xchacha20poly1305_keygen>>(
      'crypto_secretstream_xchacha20poly1305_keygen');
  late final _dart_crypto_secretstream_xchacha20poly1305_keygen
      _crypto_secretstream_xchacha20poly1305_keygen =
      _crypto_secretstream_xchacha20poly1305_keygen_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_keygen>();

  int crypto_secretstream_xchacha20poly1305_init_push(
    ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
    ffi.Pointer<ffi.Uint8> header,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretstream_xchacha20poly1305_init_push(
      state,
      header,
      k,
    );
  }

  late final _crypto_secretstream_xchacha20poly1305_init_push_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretstream_xchacha20poly1305_init_push>>(
      'crypto_secretstream_xchacha20poly1305_init_push');
  late final _dart_crypto_secretstream_xchacha20poly1305_init_push
      _crypto_secretstream_xchacha20poly1305_init_push =
      _crypto_secretstream_xchacha20poly1305_init_push_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_init_push>();

  int crypto_secretstream_xchacha20poly1305_push(
    ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint64> clen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
    int tag,
  ) {
    return _crypto_secretstream_xchacha20poly1305_push(
      state,
      c,
      clen_p,
      m,
      mlen,
      ad,
      adlen,
      tag,
    );
  }

  late final _crypto_secretstream_xchacha20poly1305_push_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretstream_xchacha20poly1305_push>>(
      'crypto_secretstream_xchacha20poly1305_push');
  late final _dart_crypto_secretstream_xchacha20poly1305_push
      _crypto_secretstream_xchacha20poly1305_push =
      _crypto_secretstream_xchacha20poly1305_push_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_push>();

  int crypto_secretstream_xchacha20poly1305_init_pull(
    ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
    ffi.Pointer<ffi.Uint8> header,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretstream_xchacha20poly1305_init_pull(
      state,
      header,
      k,
    );
  }

  late final _crypto_secretstream_xchacha20poly1305_init_pull_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretstream_xchacha20poly1305_init_pull>>(
      'crypto_secretstream_xchacha20poly1305_init_pull');
  late final _dart_crypto_secretstream_xchacha20poly1305_init_pull
      _crypto_secretstream_xchacha20poly1305_init_pull =
      _crypto_secretstream_xchacha20poly1305_init_pull_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_init_pull>();

  int crypto_secretstream_xchacha20poly1305_pull(
    ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint64> mlen_p,
    ffi.Pointer<ffi.Uint8> tag_p,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> ad,
    int adlen,
  ) {
    return _crypto_secretstream_xchacha20poly1305_pull(
      state,
      m,
      mlen_p,
      tag_p,
      c,
      clen,
      ad,
      adlen,
    );
  }

  late final _crypto_secretstream_xchacha20poly1305_pull_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretstream_xchacha20poly1305_pull>>(
      'crypto_secretstream_xchacha20poly1305_pull');
  late final _dart_crypto_secretstream_xchacha20poly1305_pull
      _crypto_secretstream_xchacha20poly1305_pull =
      _crypto_secretstream_xchacha20poly1305_pull_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_pull>();

  void crypto_secretstream_xchacha20poly1305_rekey(
    ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
  ) {
    return _crypto_secretstream_xchacha20poly1305_rekey(
      state,
    );
  }

  late final _crypto_secretstream_xchacha20poly1305_rekey_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretstream_xchacha20poly1305_rekey>>(
      'crypto_secretstream_xchacha20poly1305_rekey');
  late final _dart_crypto_secretstream_xchacha20poly1305_rekey
      _crypto_secretstream_xchacha20poly1305_rekey =
      _crypto_secretstream_xchacha20poly1305_rekey_ptr
          .asFunction<_dart_crypto_secretstream_xchacha20poly1305_rekey>();

  int crypto_shorthash_siphash24_bytes() {
    return _crypto_shorthash_siphash24_bytes();
  }

  late final _crypto_shorthash_siphash24_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_shorthash_siphash24_bytes>>(
          'crypto_shorthash_siphash24_bytes');
  late final _dart_crypto_shorthash_siphash24_bytes
      _crypto_shorthash_siphash24_bytes = _crypto_shorthash_siphash24_bytes_ptr
          .asFunction<_dart_crypto_shorthash_siphash24_bytes>();

  int crypto_shorthash_siphash24_keybytes() {
    return _crypto_shorthash_siphash24_keybytes();
  }

  late final _crypto_shorthash_siphash24_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_shorthash_siphash24_keybytes>>(
          'crypto_shorthash_siphash24_keybytes');
  late final _dart_crypto_shorthash_siphash24_keybytes
      _crypto_shorthash_siphash24_keybytes =
      _crypto_shorthash_siphash24_keybytes_ptr
          .asFunction<_dart_crypto_shorthash_siphash24_keybytes>();

  int crypto_shorthash_siphash24(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_shorthash_siphash24(
      out,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_shorthash_siphash24_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_shorthash_siphash24>>(
          'crypto_shorthash_siphash24');
  late final _dart_crypto_shorthash_siphash24 _crypto_shorthash_siphash24 =
      _crypto_shorthash_siphash24_ptr
          .asFunction<_dart_crypto_shorthash_siphash24>();

  int crypto_shorthash_siphashx24_bytes() {
    return _crypto_shorthash_siphashx24_bytes();
  }

  late final _crypto_shorthash_siphashx24_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_shorthash_siphashx24_bytes>>(
          'crypto_shorthash_siphashx24_bytes');
  late final _dart_crypto_shorthash_siphashx24_bytes
      _crypto_shorthash_siphashx24_bytes =
      _crypto_shorthash_siphashx24_bytes_ptr
          .asFunction<_dart_crypto_shorthash_siphashx24_bytes>();

  int crypto_shorthash_siphashx24_keybytes() {
    return _crypto_shorthash_siphashx24_keybytes();
  }

  late final _crypto_shorthash_siphashx24_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_shorthash_siphashx24_keybytes>>(
          'crypto_shorthash_siphashx24_keybytes');
  late final _dart_crypto_shorthash_siphashx24_keybytes
      _crypto_shorthash_siphashx24_keybytes =
      _crypto_shorthash_siphashx24_keybytes_ptr
          .asFunction<_dart_crypto_shorthash_siphashx24_keybytes>();

  int crypto_shorthash_siphashx24(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_shorthash_siphashx24(
      out,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_shorthash_siphashx24_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_shorthash_siphashx24>>(
          'crypto_shorthash_siphashx24');
  late final _dart_crypto_shorthash_siphashx24 _crypto_shorthash_siphashx24 =
      _crypto_shorthash_siphashx24_ptr
          .asFunction<_dart_crypto_shorthash_siphashx24>();

  int crypto_shorthash_bytes() {
    return _crypto_shorthash_bytes();
  }

  late final _crypto_shorthash_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_shorthash_bytes>>(
          'crypto_shorthash_bytes');
  late final _dart_crypto_shorthash_bytes _crypto_shorthash_bytes =
      _crypto_shorthash_bytes_ptr.asFunction<_dart_crypto_shorthash_bytes>();

  int crypto_shorthash_keybytes() {
    return _crypto_shorthash_keybytes();
  }

  late final _crypto_shorthash_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_shorthash_keybytes>>(
          'crypto_shorthash_keybytes');
  late final _dart_crypto_shorthash_keybytes _crypto_shorthash_keybytes =
      _crypto_shorthash_keybytes_ptr
          .asFunction<_dart_crypto_shorthash_keybytes>();

  ffi.Pointer<ffi.Int8> crypto_shorthash_primitive() {
    return _crypto_shorthash_primitive();
  }

  late final _crypto_shorthash_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_shorthash_primitive>>(
          'crypto_shorthash_primitive');
  late final _dart_crypto_shorthash_primitive _crypto_shorthash_primitive =
      _crypto_shorthash_primitive_ptr
          .asFunction<_dart_crypto_shorthash_primitive>();

  int crypto_shorthash(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in_1,
    int inlen,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_shorthash(
      out,
      in_1,
      inlen,
      k,
    );
  }

  late final _crypto_shorthash_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_shorthash>>('crypto_shorthash');
  late final _dart_crypto_shorthash _crypto_shorthash =
      _crypto_shorthash_ptr.asFunction<_dart_crypto_shorthash>();

  void crypto_shorthash_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_shorthash_keygen(
      k,
    );
  }

  late final _crypto_shorthash_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_shorthash_keygen>>(
          'crypto_shorthash_keygen');
  late final _dart_crypto_shorthash_keygen _crypto_shorthash_keygen =
      _crypto_shorthash_keygen_ptr.asFunction<_dart_crypto_shorthash_keygen>();

  int crypto_sign_ed25519ph_statebytes() {
    return _crypto_sign_ed25519ph_statebytes();
  }

  late final _crypto_sign_ed25519ph_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519ph_statebytes>>(
          'crypto_sign_ed25519ph_statebytes');
  late final _dart_crypto_sign_ed25519ph_statebytes
      _crypto_sign_ed25519ph_statebytes = _crypto_sign_ed25519ph_statebytes_ptr
          .asFunction<_dart_crypto_sign_ed25519ph_statebytes>();

  int crypto_sign_ed25519_bytes() {
    return _crypto_sign_ed25519_bytes();
  }

  late final _crypto_sign_ed25519_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_bytes>>(
          'crypto_sign_ed25519_bytes');
  late final _dart_crypto_sign_ed25519_bytes _crypto_sign_ed25519_bytes =
      _crypto_sign_ed25519_bytes_ptr
          .asFunction<_dart_crypto_sign_ed25519_bytes>();

  int crypto_sign_ed25519_seedbytes() {
    return _crypto_sign_ed25519_seedbytes();
  }

  late final _crypto_sign_ed25519_seedbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_seedbytes>>(
          'crypto_sign_ed25519_seedbytes');
  late final _dart_crypto_sign_ed25519_seedbytes
      _crypto_sign_ed25519_seedbytes = _crypto_sign_ed25519_seedbytes_ptr
          .asFunction<_dart_crypto_sign_ed25519_seedbytes>();

  int crypto_sign_ed25519_publickeybytes() {
    return _crypto_sign_ed25519_publickeybytes();
  }

  late final _crypto_sign_ed25519_publickeybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_publickeybytes>>(
          'crypto_sign_ed25519_publickeybytes');
  late final _dart_crypto_sign_ed25519_publickeybytes
      _crypto_sign_ed25519_publickeybytes =
      _crypto_sign_ed25519_publickeybytes_ptr
          .asFunction<_dart_crypto_sign_ed25519_publickeybytes>();

  int crypto_sign_ed25519_secretkeybytes() {
    return _crypto_sign_ed25519_secretkeybytes();
  }

  late final _crypto_sign_ed25519_secretkeybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_secretkeybytes>>(
          'crypto_sign_ed25519_secretkeybytes');
  late final _dart_crypto_sign_ed25519_secretkeybytes
      _crypto_sign_ed25519_secretkeybytes =
      _crypto_sign_ed25519_secretkeybytes_ptr
          .asFunction<_dart_crypto_sign_ed25519_secretkeybytes>();

  int crypto_sign_ed25519_messagebytes_max() {
    return _crypto_sign_ed25519_messagebytes_max();
  }

  late final _crypto_sign_ed25519_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_messagebytes_max>>(
          'crypto_sign_ed25519_messagebytes_max');
  late final _dart_crypto_sign_ed25519_messagebytes_max
      _crypto_sign_ed25519_messagebytes_max =
      _crypto_sign_ed25519_messagebytes_max_ptr
          .asFunction<_dart_crypto_sign_ed25519_messagebytes_max>();

  int crypto_sign_ed25519(
    ffi.Pointer<ffi.Uint8> sm,
    ffi.Pointer<ffi.Uint64> smlen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_sign_ed25519(
      sm,
      smlen_p,
      m,
      mlen,
      sk,
    );
  }

  late final _crypto_sign_ed25519_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519>>(
          'crypto_sign_ed25519');
  late final _dart_crypto_sign_ed25519 _crypto_sign_ed25519 =
      _crypto_sign_ed25519_ptr.asFunction<_dart_crypto_sign_ed25519>();

  int crypto_sign_ed25519_open(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint64> mlen_p,
    ffi.Pointer<ffi.Uint8> sm,
    int smlen,
    ffi.Pointer<ffi.Uint8> pk,
  ) {
    return _crypto_sign_ed25519_open(
      m,
      mlen_p,
      sm,
      smlen,
      pk,
    );
  }

  late final _crypto_sign_ed25519_open_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_open>>(
          'crypto_sign_ed25519_open');
  late final _dart_crypto_sign_ed25519_open _crypto_sign_ed25519_open =
      _crypto_sign_ed25519_open_ptr
          .asFunction<_dart_crypto_sign_ed25519_open>();

  int crypto_sign_ed25519_detached(
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.Uint64> siglen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_sign_ed25519_detached(
      sig,
      siglen_p,
      m,
      mlen,
      sk,
    );
  }

  late final _crypto_sign_ed25519_detached_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_detached>>(
          'crypto_sign_ed25519_detached');
  late final _dart_crypto_sign_ed25519_detached _crypto_sign_ed25519_detached =
      _crypto_sign_ed25519_detached_ptr
          .asFunction<_dart_crypto_sign_ed25519_detached>();

  int crypto_sign_ed25519_verify_detached(
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> pk,
  ) {
    return _crypto_sign_ed25519_verify_detached(
      sig,
      m,
      mlen,
      pk,
    );
  }

  late final _crypto_sign_ed25519_verify_detached_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_verify_detached>>(
          'crypto_sign_ed25519_verify_detached');
  late final _dart_crypto_sign_ed25519_verify_detached
      _crypto_sign_ed25519_verify_detached =
      _crypto_sign_ed25519_verify_detached_ptr
          .asFunction<_dart_crypto_sign_ed25519_verify_detached>();

  int crypto_sign_ed25519_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_sign_ed25519_keypair(
      pk,
      sk,
    );
  }

  late final _crypto_sign_ed25519_keypair_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_keypair>>(
          'crypto_sign_ed25519_keypair');
  late final _dart_crypto_sign_ed25519_keypair _crypto_sign_ed25519_keypair =
      _crypto_sign_ed25519_keypair_ptr
          .asFunction<_dart_crypto_sign_ed25519_keypair>();

  int crypto_sign_ed25519_seed_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _crypto_sign_ed25519_seed_keypair(
      pk,
      sk,
      seed,
    );
  }

  late final _crypto_sign_ed25519_seed_keypair_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_seed_keypair>>(
          'crypto_sign_ed25519_seed_keypair');
  late final _dart_crypto_sign_ed25519_seed_keypair
      _crypto_sign_ed25519_seed_keypair = _crypto_sign_ed25519_seed_keypair_ptr
          .asFunction<_dart_crypto_sign_ed25519_seed_keypair>();

  int crypto_sign_ed25519_pk_to_curve25519(
    ffi.Pointer<ffi.Uint8> curve25519_pk,
    ffi.Pointer<ffi.Uint8> ed25519_pk,
  ) {
    return _crypto_sign_ed25519_pk_to_curve25519(
      curve25519_pk,
      ed25519_pk,
    );
  }

  late final _crypto_sign_ed25519_pk_to_curve25519_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_pk_to_curve25519>>(
          'crypto_sign_ed25519_pk_to_curve25519');
  late final _dart_crypto_sign_ed25519_pk_to_curve25519
      _crypto_sign_ed25519_pk_to_curve25519 =
      _crypto_sign_ed25519_pk_to_curve25519_ptr
          .asFunction<_dart_crypto_sign_ed25519_pk_to_curve25519>();

  int crypto_sign_ed25519_sk_to_curve25519(
    ffi.Pointer<ffi.Uint8> curve25519_sk,
    ffi.Pointer<ffi.Uint8> ed25519_sk,
  ) {
    return _crypto_sign_ed25519_sk_to_curve25519(
      curve25519_sk,
      ed25519_sk,
    );
  }

  late final _crypto_sign_ed25519_sk_to_curve25519_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_sk_to_curve25519>>(
          'crypto_sign_ed25519_sk_to_curve25519');
  late final _dart_crypto_sign_ed25519_sk_to_curve25519
      _crypto_sign_ed25519_sk_to_curve25519 =
      _crypto_sign_ed25519_sk_to_curve25519_ptr
          .asFunction<_dart_crypto_sign_ed25519_sk_to_curve25519>();

  int crypto_sign_ed25519_sk_to_seed(
    ffi.Pointer<ffi.Uint8> seed,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_sign_ed25519_sk_to_seed(
      seed,
      sk,
    );
  }

  late final _crypto_sign_ed25519_sk_to_seed_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_sk_to_seed>>(
          'crypto_sign_ed25519_sk_to_seed');
  late final _dart_crypto_sign_ed25519_sk_to_seed
      _crypto_sign_ed25519_sk_to_seed = _crypto_sign_ed25519_sk_to_seed_ptr
          .asFunction<_dart_crypto_sign_ed25519_sk_to_seed>();

  int crypto_sign_ed25519_sk_to_pk(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_sign_ed25519_sk_to_pk(
      pk,
      sk,
    );
  }

  late final _crypto_sign_ed25519_sk_to_pk_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519_sk_to_pk>>(
          'crypto_sign_ed25519_sk_to_pk');
  late final _dart_crypto_sign_ed25519_sk_to_pk _crypto_sign_ed25519_sk_to_pk =
      _crypto_sign_ed25519_sk_to_pk_ptr
          .asFunction<_dart_crypto_sign_ed25519_sk_to_pk>();

  int crypto_sign_ed25519ph_init(
    ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ) {
    return _crypto_sign_ed25519ph_init(
      state,
    );
  }

  late final _crypto_sign_ed25519ph_init_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519ph_init>>(
          'crypto_sign_ed25519ph_init');
  late final _dart_crypto_sign_ed25519ph_init _crypto_sign_ed25519ph_init =
      _crypto_sign_ed25519ph_init_ptr
          .asFunction<_dart_crypto_sign_ed25519ph_init>();

  int crypto_sign_ed25519ph_update(
    ffi.Pointer<crypto_sign_ed25519ph_state> state,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
  ) {
    return _crypto_sign_ed25519ph_update(
      state,
      m,
      mlen,
    );
  }

  late final _crypto_sign_ed25519ph_update_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519ph_update>>(
          'crypto_sign_ed25519ph_update');
  late final _dart_crypto_sign_ed25519ph_update _crypto_sign_ed25519ph_update =
      _crypto_sign_ed25519ph_update_ptr
          .asFunction<_dart_crypto_sign_ed25519ph_update>();

  int crypto_sign_ed25519ph_final_create(
    ffi.Pointer<crypto_sign_ed25519ph_state> state,
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.Uint64> siglen_p,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_sign_ed25519ph_final_create(
      state,
      sig,
      siglen_p,
      sk,
    );
  }

  late final _crypto_sign_ed25519ph_final_create_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519ph_final_create>>(
          'crypto_sign_ed25519ph_final_create');
  late final _dart_crypto_sign_ed25519ph_final_create
      _crypto_sign_ed25519ph_final_create =
      _crypto_sign_ed25519ph_final_create_ptr
          .asFunction<_dart_crypto_sign_ed25519ph_final_create>();

  int crypto_sign_ed25519ph_final_verify(
    ffi.Pointer<crypto_sign_ed25519ph_state> state,
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.Uint8> pk,
  ) {
    return _crypto_sign_ed25519ph_final_verify(
      state,
      sig,
      pk,
    );
  }

  late final _crypto_sign_ed25519ph_final_verify_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_ed25519ph_final_verify>>(
          'crypto_sign_ed25519ph_final_verify');
  late final _dart_crypto_sign_ed25519ph_final_verify
      _crypto_sign_ed25519ph_final_verify =
      _crypto_sign_ed25519ph_final_verify_ptr
          .asFunction<_dart_crypto_sign_ed25519ph_final_verify>();

  int crypto_sign_statebytes() {
    return _crypto_sign_statebytes();
  }

  late final _crypto_sign_statebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_statebytes>>(
          'crypto_sign_statebytes');
  late final _dart_crypto_sign_statebytes _crypto_sign_statebytes =
      _crypto_sign_statebytes_ptr.asFunction<_dart_crypto_sign_statebytes>();

  int crypto_sign_bytes() {
    return _crypto_sign_bytes();
  }

  late final _crypto_sign_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_bytes>>('crypto_sign_bytes');
  late final _dart_crypto_sign_bytes _crypto_sign_bytes =
      _crypto_sign_bytes_ptr.asFunction<_dart_crypto_sign_bytes>();

  int crypto_sign_seedbytes() {
    return _crypto_sign_seedbytes();
  }

  late final _crypto_sign_seedbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_seedbytes>>(
          'crypto_sign_seedbytes');
  late final _dart_crypto_sign_seedbytes _crypto_sign_seedbytes =
      _crypto_sign_seedbytes_ptr.asFunction<_dart_crypto_sign_seedbytes>();

  int crypto_sign_publickeybytes() {
    return _crypto_sign_publickeybytes();
  }

  late final _crypto_sign_publickeybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_publickeybytes>>(
          'crypto_sign_publickeybytes');
  late final _dart_crypto_sign_publickeybytes _crypto_sign_publickeybytes =
      _crypto_sign_publickeybytes_ptr
          .asFunction<_dart_crypto_sign_publickeybytes>();

  int crypto_sign_secretkeybytes() {
    return _crypto_sign_secretkeybytes();
  }

  late final _crypto_sign_secretkeybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_secretkeybytes>>(
          'crypto_sign_secretkeybytes');
  late final _dart_crypto_sign_secretkeybytes _crypto_sign_secretkeybytes =
      _crypto_sign_secretkeybytes_ptr
          .asFunction<_dart_crypto_sign_secretkeybytes>();

  int crypto_sign_messagebytes_max() {
    return _crypto_sign_messagebytes_max();
  }

  late final _crypto_sign_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_messagebytes_max>>(
          'crypto_sign_messagebytes_max');
  late final _dart_crypto_sign_messagebytes_max _crypto_sign_messagebytes_max =
      _crypto_sign_messagebytes_max_ptr
          .asFunction<_dart_crypto_sign_messagebytes_max>();

  ffi.Pointer<ffi.Int8> crypto_sign_primitive() {
    return _crypto_sign_primitive();
  }

  late final _crypto_sign_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_primitive>>(
          'crypto_sign_primitive');
  late final _dart_crypto_sign_primitive _crypto_sign_primitive =
      _crypto_sign_primitive_ptr.asFunction<_dart_crypto_sign_primitive>();

  int crypto_sign_seed_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _crypto_sign_seed_keypair(
      pk,
      sk,
      seed,
    );
  }

  late final _crypto_sign_seed_keypair_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_seed_keypair>>(
          'crypto_sign_seed_keypair');
  late final _dart_crypto_sign_seed_keypair _crypto_sign_seed_keypair =
      _crypto_sign_seed_keypair_ptr
          .asFunction<_dart_crypto_sign_seed_keypair>();

  int crypto_sign_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_sign_keypair(
      pk,
      sk,
    );
  }

  late final _crypto_sign_keypair_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_keypair>>(
          'crypto_sign_keypair');
  late final _dart_crypto_sign_keypair _crypto_sign_keypair =
      _crypto_sign_keypair_ptr.asFunction<_dart_crypto_sign_keypair>();

  int crypto_sign(
    ffi.Pointer<ffi.Uint8> sm,
    ffi.Pointer<ffi.Uint64> smlen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_sign(
      sm,
      smlen_p,
      m,
      mlen,
      sk,
    );
  }

  late final _crypto_sign_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign>>('crypto_sign');
  late final _dart_crypto_sign _crypto_sign =
      _crypto_sign_ptr.asFunction<_dart_crypto_sign>();

  int crypto_sign_open(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint64> mlen_p,
    ffi.Pointer<ffi.Uint8> sm,
    int smlen,
    ffi.Pointer<ffi.Uint8> pk,
  ) {
    return _crypto_sign_open(
      m,
      mlen_p,
      sm,
      smlen,
      pk,
    );
  }

  late final _crypto_sign_open_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_open>>('crypto_sign_open');
  late final _dart_crypto_sign_open _crypto_sign_open =
      _crypto_sign_open_ptr.asFunction<_dart_crypto_sign_open>();

  int crypto_sign_detached(
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.Uint64> siglen_p,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_sign_detached(
      sig,
      siglen_p,
      m,
      mlen,
      sk,
    );
  }

  late final _crypto_sign_detached_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_detached>>(
          'crypto_sign_detached');
  late final _dart_crypto_sign_detached _crypto_sign_detached =
      _crypto_sign_detached_ptr.asFunction<_dart_crypto_sign_detached>();

  int crypto_sign_verify_detached(
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> pk,
  ) {
    return _crypto_sign_verify_detached(
      sig,
      m,
      mlen,
      pk,
    );
  }

  late final _crypto_sign_verify_detached_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_verify_detached>>(
          'crypto_sign_verify_detached');
  late final _dart_crypto_sign_verify_detached _crypto_sign_verify_detached =
      _crypto_sign_verify_detached_ptr
          .asFunction<_dart_crypto_sign_verify_detached>();

  int crypto_sign_init(
    ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ) {
    return _crypto_sign_init(
      state,
    );
  }

  late final _crypto_sign_init_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_init>>('crypto_sign_init');
  late final _dart_crypto_sign_init _crypto_sign_init =
      _crypto_sign_init_ptr.asFunction<_dart_crypto_sign_init>();

  int crypto_sign_update(
    ffi.Pointer<crypto_sign_ed25519ph_state> state,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
  ) {
    return _crypto_sign_update(
      state,
      m,
      mlen,
    );
  }

  late final _crypto_sign_update_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_update>>('crypto_sign_update');
  late final _dart_crypto_sign_update _crypto_sign_update =
      _crypto_sign_update_ptr.asFunction<_dart_crypto_sign_update>();

  int crypto_sign_final_create(
    ffi.Pointer<crypto_sign_ed25519ph_state> state,
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.Uint64> siglen_p,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_sign_final_create(
      state,
      sig,
      siglen_p,
      sk,
    );
  }

  late final _crypto_sign_final_create_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_final_create>>(
          'crypto_sign_final_create');
  late final _dart_crypto_sign_final_create _crypto_sign_final_create =
      _crypto_sign_final_create_ptr
          .asFunction<_dart_crypto_sign_final_create>();

  int crypto_sign_final_verify(
    ffi.Pointer<crypto_sign_ed25519ph_state> state,
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.Uint8> pk,
  ) {
    return _crypto_sign_final_verify(
      state,
      sig,
      pk,
    );
  }

  late final _crypto_sign_final_verify_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_sign_final_verify>>(
          'crypto_sign_final_verify');
  late final _dart_crypto_sign_final_verify _crypto_sign_final_verify =
      _crypto_sign_final_verify_ptr
          .asFunction<_dart_crypto_sign_final_verify>();

  int crypto_stream_keybytes() {
    return _crypto_stream_keybytes();
  }

  late final _crypto_stream_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_keybytes>>(
          'crypto_stream_keybytes');
  late final _dart_crypto_stream_keybytes _crypto_stream_keybytes =
      _crypto_stream_keybytes_ptr.asFunction<_dart_crypto_stream_keybytes>();

  int crypto_stream_noncebytes() {
    return _crypto_stream_noncebytes();
  }

  late final _crypto_stream_noncebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_noncebytes>>(
          'crypto_stream_noncebytes');
  late final _dart_crypto_stream_noncebytes _crypto_stream_noncebytes =
      _crypto_stream_noncebytes_ptr
          .asFunction<_dart_crypto_stream_noncebytes>();

  int crypto_stream_messagebytes_max() {
    return _crypto_stream_messagebytes_max();
  }

  late final _crypto_stream_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_messagebytes_max>>(
          'crypto_stream_messagebytes_max');
  late final _dart_crypto_stream_messagebytes_max
      _crypto_stream_messagebytes_max = _crypto_stream_messagebytes_max_ptr
          .asFunction<_dart_crypto_stream_messagebytes_max>();

  ffi.Pointer<ffi.Int8> crypto_stream_primitive() {
    return _crypto_stream_primitive();
  }

  late final _crypto_stream_primitive_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_primitive>>(
          'crypto_stream_primitive');
  late final _dart_crypto_stream_primitive _crypto_stream_primitive =
      _crypto_stream_primitive_ptr.asFunction<_dart_crypto_stream_primitive>();

  int crypto_stream(
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream(
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_stream_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream>>('crypto_stream');
  late final _dart_crypto_stream _crypto_stream =
      _crypto_stream_ptr.asFunction<_dart_crypto_stream>();

  int crypto_stream_xor(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_xor(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_stream_xor_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xor>>('crypto_stream_xor');
  late final _dart_crypto_stream_xor _crypto_stream_xor =
      _crypto_stream_xor_ptr.asFunction<_dart_crypto_stream_xor>();

  void crypto_stream_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_keygen(
      k,
    );
  }

  late final _crypto_stream_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_keygen>>(
          'crypto_stream_keygen');
  late final _dart_crypto_stream_keygen _crypto_stream_keygen =
      _crypto_stream_keygen_ptr.asFunction<_dart_crypto_stream_keygen>();

  int crypto_stream_salsa20_keybytes() {
    return _crypto_stream_salsa20_keybytes();
  }

  late final _crypto_stream_salsa20_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa20_keybytes>>(
          'crypto_stream_salsa20_keybytes');
  late final _dart_crypto_stream_salsa20_keybytes
      _crypto_stream_salsa20_keybytes = _crypto_stream_salsa20_keybytes_ptr
          .asFunction<_dart_crypto_stream_salsa20_keybytes>();

  int crypto_stream_salsa20_noncebytes() {
    return _crypto_stream_salsa20_noncebytes();
  }

  late final _crypto_stream_salsa20_noncebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa20_noncebytes>>(
          'crypto_stream_salsa20_noncebytes');
  late final _dart_crypto_stream_salsa20_noncebytes
      _crypto_stream_salsa20_noncebytes = _crypto_stream_salsa20_noncebytes_ptr
          .asFunction<_dart_crypto_stream_salsa20_noncebytes>();

  int crypto_stream_salsa20_messagebytes_max() {
    return _crypto_stream_salsa20_messagebytes_max();
  }

  late final _crypto_stream_salsa20_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa20_messagebytes_max>>(
          'crypto_stream_salsa20_messagebytes_max');
  late final _dart_crypto_stream_salsa20_messagebytes_max
      _crypto_stream_salsa20_messagebytes_max =
      _crypto_stream_salsa20_messagebytes_max_ptr
          .asFunction<_dart_crypto_stream_salsa20_messagebytes_max>();

  int crypto_stream_salsa20(
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_salsa20(
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_stream_salsa20_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa20>>(
          'crypto_stream_salsa20');
  late final _dart_crypto_stream_salsa20 _crypto_stream_salsa20 =
      _crypto_stream_salsa20_ptr.asFunction<_dart_crypto_stream_salsa20>();

  int crypto_stream_salsa20_xor(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_salsa20_xor(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_stream_salsa20_xor_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa20_xor>>(
          'crypto_stream_salsa20_xor');
  late final _dart_crypto_stream_salsa20_xor _crypto_stream_salsa20_xor =
      _crypto_stream_salsa20_xor_ptr
          .asFunction<_dart_crypto_stream_salsa20_xor>();

  int crypto_stream_salsa20_xor_ic(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    int ic,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_salsa20_xor_ic(
      c,
      m,
      mlen,
      n,
      ic,
      k,
    );
  }

  late final _crypto_stream_salsa20_xor_ic_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa20_xor_ic>>(
          'crypto_stream_salsa20_xor_ic');
  late final _dart_crypto_stream_salsa20_xor_ic _crypto_stream_salsa20_xor_ic =
      _crypto_stream_salsa20_xor_ic_ptr
          .asFunction<_dart_crypto_stream_salsa20_xor_ic>();

  void crypto_stream_salsa20_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_salsa20_keygen(
      k,
    );
  }

  late final _crypto_stream_salsa20_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa20_keygen>>(
          'crypto_stream_salsa20_keygen');
  late final _dart_crypto_stream_salsa20_keygen _crypto_stream_salsa20_keygen =
      _crypto_stream_salsa20_keygen_ptr
          .asFunction<_dart_crypto_stream_salsa20_keygen>();

  int crypto_verify_16_bytes() {
    return _crypto_verify_16_bytes();
  }

  late final _crypto_verify_16_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_verify_16_bytes>>(
          'crypto_verify_16_bytes');
  late final _dart_crypto_verify_16_bytes _crypto_verify_16_bytes =
      _crypto_verify_16_bytes_ptr.asFunction<_dart_crypto_verify_16_bytes>();

  int crypto_verify_16(
    ffi.Pointer<ffi.Uint8> x,
    ffi.Pointer<ffi.Uint8> y,
  ) {
    return _crypto_verify_16(
      x,
      y,
    );
  }

  late final _crypto_verify_16_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_verify_16>>('crypto_verify_16');
  late final _dart_crypto_verify_16 _crypto_verify_16 =
      _crypto_verify_16_ptr.asFunction<_dart_crypto_verify_16>();

  int crypto_verify_32_bytes() {
    return _crypto_verify_32_bytes();
  }

  late final _crypto_verify_32_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_verify_32_bytes>>(
          'crypto_verify_32_bytes');
  late final _dart_crypto_verify_32_bytes _crypto_verify_32_bytes =
      _crypto_verify_32_bytes_ptr.asFunction<_dart_crypto_verify_32_bytes>();

  int crypto_verify_32(
    ffi.Pointer<ffi.Uint8> x,
    ffi.Pointer<ffi.Uint8> y,
  ) {
    return _crypto_verify_32(
      x,
      y,
    );
  }

  late final _crypto_verify_32_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_verify_32>>('crypto_verify_32');
  late final _dart_crypto_verify_32 _crypto_verify_32 =
      _crypto_verify_32_ptr.asFunction<_dart_crypto_verify_32>();

  int crypto_verify_64_bytes() {
    return _crypto_verify_64_bytes();
  }

  late final _crypto_verify_64_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_verify_64_bytes>>(
          'crypto_verify_64_bytes');
  late final _dart_crypto_verify_64_bytes _crypto_verify_64_bytes =
      _crypto_verify_64_bytes_ptr.asFunction<_dart_crypto_verify_64_bytes>();

  int crypto_verify_64(
    ffi.Pointer<ffi.Uint8> x,
    ffi.Pointer<ffi.Uint8> y,
  ) {
    return _crypto_verify_64(
      x,
      y,
    );
  }

  late final _crypto_verify_64_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_verify_64>>('crypto_verify_64');
  late final _dart_crypto_verify_64 _crypto_verify_64 =
      _crypto_verify_64_ptr.asFunction<_dart_crypto_verify_64>();

  int randombytes_seedbytes() {
    return _randombytes_seedbytes();
  }

  late final _randombytes_seedbytes_ptr =
      _lookup<ffi.NativeFunction<_c_randombytes_seedbytes>>(
          'randombytes_seedbytes');
  late final _dart_randombytes_seedbytes _randombytes_seedbytes =
      _randombytes_seedbytes_ptr.asFunction<_dart_randombytes_seedbytes>();

  void randombytes_buf(
    ffi.Pointer<ffi.Void> buf,
    int size,
  ) {
    return _randombytes_buf(
      buf,
      size,
    );
  }

  late final _randombytes_buf_ptr =
      _lookup<ffi.NativeFunction<_c_randombytes_buf>>('randombytes_buf');
  late final _dart_randombytes_buf _randombytes_buf =
      _randombytes_buf_ptr.asFunction<_dart_randombytes_buf>();

  void randombytes_buf_deterministic(
    ffi.Pointer<ffi.Void> buf,
    int size,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _randombytes_buf_deterministic(
      buf,
      size,
      seed,
    );
  }

  late final _randombytes_buf_deterministic_ptr =
      _lookup<ffi.NativeFunction<_c_randombytes_buf_deterministic>>(
          'randombytes_buf_deterministic');
  late final _dart_randombytes_buf_deterministic
      _randombytes_buf_deterministic = _randombytes_buf_deterministic_ptr
          .asFunction<_dart_randombytes_buf_deterministic>();

  int randombytes_random() {
    return _randombytes_random();
  }

  late final _randombytes_random_ptr =
      _lookup<ffi.NativeFunction<_c_randombytes_random>>('randombytes_random');
  late final _dart_randombytes_random _randombytes_random =
      _randombytes_random_ptr.asFunction<_dart_randombytes_random>();

  int randombytes_uniform(
    int upper_bound,
  ) {
    return _randombytes_uniform(
      upper_bound,
    );
  }

  late final _randombytes_uniform_ptr =
      _lookup<ffi.NativeFunction<_c_randombytes_uniform>>(
          'randombytes_uniform');
  late final _dart_randombytes_uniform _randombytes_uniform =
      _randombytes_uniform_ptr.asFunction<_dart_randombytes_uniform>();

  void randombytes_stir() {
    return _randombytes_stir();
  }

  late final _randombytes_stir_ptr =
      _lookup<ffi.NativeFunction<_c_randombytes_stir>>('randombytes_stir');
  late final _dart_randombytes_stir _randombytes_stir =
      _randombytes_stir_ptr.asFunction<_dart_randombytes_stir>();

  int randombytes_close() {
    return _randombytes_close();
  }

  late final _randombytes_close_ptr =
      _lookup<ffi.NativeFunction<_c_randombytes_close>>('randombytes_close');
  late final _dart_randombytes_close _randombytes_close =
      _randombytes_close_ptr.asFunction<_dart_randombytes_close>();

  int randombytes_set_implementation(
    ffi.Pointer<randombytes_implementation> impl,
  ) {
    return _randombytes_set_implementation(
      impl,
    );
  }

  late final _randombytes_set_implementation_ptr =
      _lookup<ffi.NativeFunction<_c_randombytes_set_implementation>>(
          'randombytes_set_implementation');
  late final _dart_randombytes_set_implementation
      _randombytes_set_implementation = _randombytes_set_implementation_ptr
          .asFunction<_dart_randombytes_set_implementation>();

  ffi.Pointer<ffi.Int8> randombytes_implementation_name() {
    return _randombytes_implementation_name();
  }

  late final _randombytes_implementation_name_ptr =
      _lookup<ffi.NativeFunction<_c_randombytes_implementation_name>>(
          'randombytes_implementation_name');
  late final _dart_randombytes_implementation_name
      _randombytes_implementation_name = _randombytes_implementation_name_ptr
          .asFunction<_dart_randombytes_implementation_name>();

  void randombytes(
    ffi.Pointer<ffi.Uint8> buf,
    int buf_len,
  ) {
    return _randombytes(
      buf,
      buf_len,
    );
  }

  late final _randombytes_ptr =
      _lookup<ffi.NativeFunction<_c_randombytes>>('randombytes');
  late final _dart_randombytes _randombytes =
      _randombytes_ptr.asFunction<_dart_randombytes>();

  late final ffi.Pointer<randombytes_implementation>
      _randombytes_internal_implementation =
      _lookup<randombytes_implementation>(
          'randombytes_internal_implementation');

  randombytes_implementation get randombytes_internal_implementation =>
      _randombytes_internal_implementation.ref;

  late final ffi.Pointer<randombytes_implementation>
      _randombytes_sysrandom_implementation =
      _lookup<randombytes_implementation>(
          'randombytes_sysrandom_implementation');

  randombytes_implementation get randombytes_sysrandom_implementation =>
      _randombytes_sysrandom_implementation.ref;

  int sodium_runtime_has_neon() {
    return _sodium_runtime_has_neon();
  }

  late final _sodium_runtime_has_neon_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_runtime_has_neon>>(
          'sodium_runtime_has_neon');
  late final _dart_sodium_runtime_has_neon _sodium_runtime_has_neon =
      _sodium_runtime_has_neon_ptr.asFunction<_dart_sodium_runtime_has_neon>();

  int sodium_runtime_has_sse2() {
    return _sodium_runtime_has_sse2();
  }

  late final _sodium_runtime_has_sse2_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_runtime_has_sse2>>(
          'sodium_runtime_has_sse2');
  late final _dart_sodium_runtime_has_sse2 _sodium_runtime_has_sse2 =
      _sodium_runtime_has_sse2_ptr.asFunction<_dart_sodium_runtime_has_sse2>();

  int sodium_runtime_has_sse3() {
    return _sodium_runtime_has_sse3();
  }

  late final _sodium_runtime_has_sse3_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_runtime_has_sse3>>(
          'sodium_runtime_has_sse3');
  late final _dart_sodium_runtime_has_sse3 _sodium_runtime_has_sse3 =
      _sodium_runtime_has_sse3_ptr.asFunction<_dart_sodium_runtime_has_sse3>();

  int sodium_runtime_has_ssse3() {
    return _sodium_runtime_has_ssse3();
  }

  late final _sodium_runtime_has_ssse3_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_runtime_has_ssse3>>(
          'sodium_runtime_has_ssse3');
  late final _dart_sodium_runtime_has_ssse3 _sodium_runtime_has_ssse3 =
      _sodium_runtime_has_ssse3_ptr
          .asFunction<_dart_sodium_runtime_has_ssse3>();

  int sodium_runtime_has_sse41() {
    return _sodium_runtime_has_sse41();
  }

  late final _sodium_runtime_has_sse41_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_runtime_has_sse41>>(
          'sodium_runtime_has_sse41');
  late final _dart_sodium_runtime_has_sse41 _sodium_runtime_has_sse41 =
      _sodium_runtime_has_sse41_ptr
          .asFunction<_dart_sodium_runtime_has_sse41>();

  int sodium_runtime_has_avx() {
    return _sodium_runtime_has_avx();
  }

  late final _sodium_runtime_has_avx_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_runtime_has_avx>>(
          'sodium_runtime_has_avx');
  late final _dart_sodium_runtime_has_avx _sodium_runtime_has_avx =
      _sodium_runtime_has_avx_ptr.asFunction<_dart_sodium_runtime_has_avx>();

  int sodium_runtime_has_avx2() {
    return _sodium_runtime_has_avx2();
  }

  late final _sodium_runtime_has_avx2_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_runtime_has_avx2>>(
          'sodium_runtime_has_avx2');
  late final _dart_sodium_runtime_has_avx2 _sodium_runtime_has_avx2 =
      _sodium_runtime_has_avx2_ptr.asFunction<_dart_sodium_runtime_has_avx2>();

  int sodium_runtime_has_avx512f() {
    return _sodium_runtime_has_avx512f();
  }

  late final _sodium_runtime_has_avx512f_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_runtime_has_avx512f>>(
          'sodium_runtime_has_avx512f');
  late final _dart_sodium_runtime_has_avx512f _sodium_runtime_has_avx512f =
      _sodium_runtime_has_avx512f_ptr
          .asFunction<_dart_sodium_runtime_has_avx512f>();

  int sodium_runtime_has_pclmul() {
    return _sodium_runtime_has_pclmul();
  }

  late final _sodium_runtime_has_pclmul_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_runtime_has_pclmul>>(
          'sodium_runtime_has_pclmul');
  late final _dart_sodium_runtime_has_pclmul _sodium_runtime_has_pclmul =
      _sodium_runtime_has_pclmul_ptr
          .asFunction<_dart_sodium_runtime_has_pclmul>();

  int sodium_runtime_has_aesni() {
    return _sodium_runtime_has_aesni();
  }

  late final _sodium_runtime_has_aesni_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_runtime_has_aesni>>(
          'sodium_runtime_has_aesni');
  late final _dart_sodium_runtime_has_aesni _sodium_runtime_has_aesni =
      _sodium_runtime_has_aesni_ptr
          .asFunction<_dart_sodium_runtime_has_aesni>();

  int sodium_runtime_has_rdrand() {
    return _sodium_runtime_has_rdrand();
  }

  late final _sodium_runtime_has_rdrand_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_runtime_has_rdrand>>(
          'sodium_runtime_has_rdrand');
  late final _dart_sodium_runtime_has_rdrand _sodium_runtime_has_rdrand =
      _sodium_runtime_has_rdrand_ptr
          .asFunction<_dart_sodium_runtime_has_rdrand>();

  void sodium_memzero(
    ffi.Pointer<ffi.Void> pnt,
    int len,
  ) {
    return _sodium_memzero(
      pnt,
      len,
    );
  }

  late final _sodium_memzero_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_memzero>>('sodium_memzero');
  late final _dart_sodium_memzero _sodium_memzero =
      _sodium_memzero_ptr.asFunction<_dart_sodium_memzero>();

  void sodium_stackzero(
    int len,
  ) {
    return _sodium_stackzero(
      len,
    );
  }

  late final _sodium_stackzero_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_stackzero>>('sodium_stackzero');
  late final _dart_sodium_stackzero _sodium_stackzero =
      _sodium_stackzero_ptr.asFunction<_dart_sodium_stackzero>();

  int sodium_memcmp(
    ffi.Pointer<ffi.Void> b1_,
    ffi.Pointer<ffi.Void> b2_,
    int len,
  ) {
    return _sodium_memcmp(
      b1_,
      b2_,
      len,
    );
  }

  late final _sodium_memcmp_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_memcmp>>('sodium_memcmp');
  late final _dart_sodium_memcmp _sodium_memcmp =
      _sodium_memcmp_ptr.asFunction<_dart_sodium_memcmp>();

  int sodium_compare(
    ffi.Pointer<ffi.Uint8> b1_,
    ffi.Pointer<ffi.Uint8> b2_,
    int len,
  ) {
    return _sodium_compare(
      b1_,
      b2_,
      len,
    );
  }

  late final _sodium_compare_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_compare>>('sodium_compare');
  late final _dart_sodium_compare _sodium_compare =
      _sodium_compare_ptr.asFunction<_dart_sodium_compare>();

  int sodium_is_zero(
    ffi.Pointer<ffi.Uint8> n,
    int nlen,
  ) {
    return _sodium_is_zero(
      n,
      nlen,
    );
  }

  late final _sodium_is_zero_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_is_zero>>('sodium_is_zero');
  late final _dart_sodium_is_zero _sodium_is_zero =
      _sodium_is_zero_ptr.asFunction<_dart_sodium_is_zero>();

  void sodium_increment(
    ffi.Pointer<ffi.Uint8> n,
    int nlen,
  ) {
    return _sodium_increment(
      n,
      nlen,
    );
  }

  late final _sodium_increment_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_increment>>('sodium_increment');
  late final _dart_sodium_increment _sodium_increment =
      _sodium_increment_ptr.asFunction<_dart_sodium_increment>();

  void sodium_add(
    ffi.Pointer<ffi.Uint8> a,
    ffi.Pointer<ffi.Uint8> b,
    int len,
  ) {
    return _sodium_add(
      a,
      b,
      len,
    );
  }

  late final _sodium_add_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_add>>('sodium_add');
  late final _dart_sodium_add _sodium_add =
      _sodium_add_ptr.asFunction<_dart_sodium_add>();

  void sodium_sub(
    ffi.Pointer<ffi.Uint8> a,
    ffi.Pointer<ffi.Uint8> b,
    int len,
  ) {
    return _sodium_sub(
      a,
      b,
      len,
    );
  }

  late final _sodium_sub_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_sub>>('sodium_sub');
  late final _dart_sodium_sub _sodium_sub =
      _sodium_sub_ptr.asFunction<_dart_sodium_sub>();

  ffi.Pointer<ffi.Int8> sodium_bin2hex(
    ffi.Pointer<ffi.Int8> hex,
    int hex_maxlen,
    ffi.Pointer<ffi.Uint8> bin,
    int bin_len,
  ) {
    return _sodium_bin2hex(
      hex,
      hex_maxlen,
      bin,
      bin_len,
    );
  }

  late final _sodium_bin2hex_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_bin2hex>>('sodium_bin2hex');
  late final _dart_sodium_bin2hex _sodium_bin2hex =
      _sodium_bin2hex_ptr.asFunction<_dart_sodium_bin2hex>();

  int sodium_hex2bin(
    ffi.Pointer<ffi.Uint8> bin,
    int bin_maxlen,
    ffi.Pointer<ffi.Int8> hex,
    int hex_len,
    ffi.Pointer<ffi.Int8> ignore,
    ffi.Pointer<ffi.Uint64> bin_len,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> hex_end,
  ) {
    return _sodium_hex2bin(
      bin,
      bin_maxlen,
      hex,
      hex_len,
      ignore,
      bin_len,
      hex_end,
    );
  }

  late final _sodium_hex2bin_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_hex2bin>>('sodium_hex2bin');
  late final _dart_sodium_hex2bin _sodium_hex2bin =
      _sodium_hex2bin_ptr.asFunction<_dart_sodium_hex2bin>();

  int sodium_base64_encoded_len(
    int bin_len,
    int variant,
  ) {
    return _sodium_base64_encoded_len(
      bin_len,
      variant,
    );
  }

  late final _sodium_base64_encoded_len_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_base64_encoded_len>>(
          'sodium_base64_encoded_len');
  late final _dart_sodium_base64_encoded_len _sodium_base64_encoded_len =
      _sodium_base64_encoded_len_ptr
          .asFunction<_dart_sodium_base64_encoded_len>();

  ffi.Pointer<ffi.Int8> sodium_bin2base64(
    ffi.Pointer<ffi.Int8> b64,
    int b64_maxlen,
    ffi.Pointer<ffi.Uint8> bin,
    int bin_len,
    int variant,
  ) {
    return _sodium_bin2base64(
      b64,
      b64_maxlen,
      bin,
      bin_len,
      variant,
    );
  }

  late final _sodium_bin2base64_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_bin2base64>>('sodium_bin2base64');
  late final _dart_sodium_bin2base64 _sodium_bin2base64 =
      _sodium_bin2base64_ptr.asFunction<_dart_sodium_bin2base64>();

  int sodium_base642bin(
    ffi.Pointer<ffi.Uint8> bin,
    int bin_maxlen,
    ffi.Pointer<ffi.Int8> b64,
    int b64_len,
    ffi.Pointer<ffi.Int8> ignore,
    ffi.Pointer<ffi.Uint64> bin_len,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> b64_end,
    int variant,
  ) {
    return _sodium_base642bin(
      bin,
      bin_maxlen,
      b64,
      b64_len,
      ignore,
      bin_len,
      b64_end,
      variant,
    );
  }

  late final _sodium_base642bin_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_base642bin>>('sodium_base642bin');
  late final _dart_sodium_base642bin _sodium_base642bin =
      _sodium_base642bin_ptr.asFunction<_dart_sodium_base642bin>();

  int sodium_mlock(
    ffi.Pointer<ffi.Void> addr,
    int len,
  ) {
    return _sodium_mlock(
      addr,
      len,
    );
  }

  late final _sodium_mlock_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_mlock>>('sodium_mlock');
  late final _dart_sodium_mlock _sodium_mlock =
      _sodium_mlock_ptr.asFunction<_dart_sodium_mlock>();

  int sodium_munlock(
    ffi.Pointer<ffi.Void> addr,
    int len,
  ) {
    return _sodium_munlock(
      addr,
      len,
    );
  }

  late final _sodium_munlock_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_munlock>>('sodium_munlock');
  late final _dart_sodium_munlock _sodium_munlock =
      _sodium_munlock_ptr.asFunction<_dart_sodium_munlock>();

  ffi.Pointer<ffi.Void> sodium_malloc(
    int size,
  ) {
    return _sodium_malloc(
      size,
    );
  }

  late final _sodium_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_malloc>>('sodium_malloc');
  late final _dart_sodium_malloc _sodium_malloc =
      _sodium_malloc_ptr.asFunction<_dart_sodium_malloc>();

  ffi.Pointer<ffi.Void> sodium_allocarray(
    int count,
    int size,
  ) {
    return _sodium_allocarray(
      count,
      size,
    );
  }

  late final _sodium_allocarray_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_allocarray>>('sodium_allocarray');
  late final _dart_sodium_allocarray _sodium_allocarray =
      _sodium_allocarray_ptr.asFunction<_dart_sodium_allocarray>();

  void sodium_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _sodium_free(
      ptr,
    );
  }

  late final _sodium_free_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_free>>('sodium_free');
  late final _dart_sodium_free _sodium_free =
      _sodium_free_ptr.asFunction<_dart_sodium_free>();

  int sodium_mprotect_noaccess(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _sodium_mprotect_noaccess(
      ptr,
    );
  }

  late final _sodium_mprotect_noaccess_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_mprotect_noaccess>>(
          'sodium_mprotect_noaccess');
  late final _dart_sodium_mprotect_noaccess _sodium_mprotect_noaccess =
      _sodium_mprotect_noaccess_ptr
          .asFunction<_dart_sodium_mprotect_noaccess>();

  int sodium_mprotect_readonly(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _sodium_mprotect_readonly(
      ptr,
    );
  }

  late final _sodium_mprotect_readonly_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_mprotect_readonly>>(
          'sodium_mprotect_readonly');
  late final _dart_sodium_mprotect_readonly _sodium_mprotect_readonly =
      _sodium_mprotect_readonly_ptr
          .asFunction<_dart_sodium_mprotect_readonly>();

  int sodium_mprotect_readwrite(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _sodium_mprotect_readwrite(
      ptr,
    );
  }

  late final _sodium_mprotect_readwrite_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_mprotect_readwrite>>(
          'sodium_mprotect_readwrite');
  late final _dart_sodium_mprotect_readwrite _sodium_mprotect_readwrite =
      _sodium_mprotect_readwrite_ptr
          .asFunction<_dart_sodium_mprotect_readwrite>();

  int sodium_pad(
    ffi.Pointer<ffi.Uint64> padded_buflen_p,
    ffi.Pointer<ffi.Uint8> buf,
    int unpadded_buflen,
    int blocksize,
    int max_buflen,
  ) {
    return _sodium_pad(
      padded_buflen_p,
      buf,
      unpadded_buflen,
      blocksize,
      max_buflen,
    );
  }

  late final _sodium_pad_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_pad>>('sodium_pad');
  late final _dart_sodium_pad _sodium_pad =
      _sodium_pad_ptr.asFunction<_dart_sodium_pad>();

  int sodium_unpad(
    ffi.Pointer<ffi.Uint64> unpadded_buflen_p,
    ffi.Pointer<ffi.Uint8> buf,
    int padded_buflen,
    int blocksize,
  ) {
    return _sodium_unpad(
      unpadded_buflen_p,
      buf,
      padded_buflen,
      blocksize,
    );
  }

  late final _sodium_unpad_ptr =
      _lookup<ffi.NativeFunction<_c_sodium_unpad>>('sodium_unpad');
  late final _dart_sodium_unpad _sodium_unpad =
      _sodium_unpad_ptr.asFunction<_dart_sodium_unpad>();

  int crypto_stream_xchacha20_keybytes() {
    return _crypto_stream_xchacha20_keybytes();
  }

  late final _crypto_stream_xchacha20_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xchacha20_keybytes>>(
          'crypto_stream_xchacha20_keybytes');
  late final _dart_crypto_stream_xchacha20_keybytes
      _crypto_stream_xchacha20_keybytes = _crypto_stream_xchacha20_keybytes_ptr
          .asFunction<_dart_crypto_stream_xchacha20_keybytes>();

  int crypto_stream_xchacha20_noncebytes() {
    return _crypto_stream_xchacha20_noncebytes();
  }

  late final _crypto_stream_xchacha20_noncebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xchacha20_noncebytes>>(
          'crypto_stream_xchacha20_noncebytes');
  late final _dart_crypto_stream_xchacha20_noncebytes
      _crypto_stream_xchacha20_noncebytes =
      _crypto_stream_xchacha20_noncebytes_ptr
          .asFunction<_dart_crypto_stream_xchacha20_noncebytes>();

  int crypto_stream_xchacha20_messagebytes_max() {
    return _crypto_stream_xchacha20_messagebytes_max();
  }

  late final _crypto_stream_xchacha20_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xchacha20_messagebytes_max>>(
          'crypto_stream_xchacha20_messagebytes_max');
  late final _dart_crypto_stream_xchacha20_messagebytes_max
      _crypto_stream_xchacha20_messagebytes_max =
      _crypto_stream_xchacha20_messagebytes_max_ptr
          .asFunction<_dart_crypto_stream_xchacha20_messagebytes_max>();

  int crypto_stream_xchacha20(
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_xchacha20(
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_stream_xchacha20_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xchacha20>>(
          'crypto_stream_xchacha20');
  late final _dart_crypto_stream_xchacha20 _crypto_stream_xchacha20 =
      _crypto_stream_xchacha20_ptr.asFunction<_dart_crypto_stream_xchacha20>();

  int crypto_stream_xchacha20_xor(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_xchacha20_xor(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_stream_xchacha20_xor_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xchacha20_xor>>(
          'crypto_stream_xchacha20_xor');
  late final _dart_crypto_stream_xchacha20_xor _crypto_stream_xchacha20_xor =
      _crypto_stream_xchacha20_xor_ptr
          .asFunction<_dart_crypto_stream_xchacha20_xor>();

  int crypto_stream_xchacha20_xor_ic(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    int ic,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_xchacha20_xor_ic(
      c,
      m,
      mlen,
      n,
      ic,
      k,
    );
  }

  late final _crypto_stream_xchacha20_xor_ic_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xchacha20_xor_ic>>(
          'crypto_stream_xchacha20_xor_ic');
  late final _dart_crypto_stream_xchacha20_xor_ic
      _crypto_stream_xchacha20_xor_ic = _crypto_stream_xchacha20_xor_ic_ptr
          .asFunction<_dart_crypto_stream_xchacha20_xor_ic>();

  void crypto_stream_xchacha20_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_xchacha20_keygen(
      k,
    );
  }

  late final _crypto_stream_xchacha20_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_xchacha20_keygen>>(
          'crypto_stream_xchacha20_keygen');
  late final _dart_crypto_stream_xchacha20_keygen
      _crypto_stream_xchacha20_keygen = _crypto_stream_xchacha20_keygen_ptr
          .asFunction<_dart_crypto_stream_xchacha20_keygen>();

  int crypto_box_curve25519xchacha20poly1305_seedbytes() {
    return _crypto_box_curve25519xchacha20poly1305_seedbytes();
  }

  late final _crypto_box_curve25519xchacha20poly1305_seedbytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xchacha20poly1305_seedbytes>>(
      'crypto_box_curve25519xchacha20poly1305_seedbytes');
  late final _dart_crypto_box_curve25519xchacha20poly1305_seedbytes
      _crypto_box_curve25519xchacha20poly1305_seedbytes =
      _crypto_box_curve25519xchacha20poly1305_seedbytes_ptr
          .asFunction<_dart_crypto_box_curve25519xchacha20poly1305_seedbytes>();

  int crypto_box_curve25519xchacha20poly1305_publickeybytes() {
    return _crypto_box_curve25519xchacha20poly1305_publickeybytes();
  }

  late final _crypto_box_curve25519xchacha20poly1305_publickeybytes_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_box_curve25519xchacha20poly1305_publickeybytes>>(
          'crypto_box_curve25519xchacha20poly1305_publickeybytes');
  late final _dart_crypto_box_curve25519xchacha20poly1305_publickeybytes
      _crypto_box_curve25519xchacha20poly1305_publickeybytes =
      _crypto_box_curve25519xchacha20poly1305_publickeybytes_ptr.asFunction<
          _dart_crypto_box_curve25519xchacha20poly1305_publickeybytes>();

  int crypto_box_curve25519xchacha20poly1305_secretkeybytes() {
    return _crypto_box_curve25519xchacha20poly1305_secretkeybytes();
  }

  late final _crypto_box_curve25519xchacha20poly1305_secretkeybytes_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_box_curve25519xchacha20poly1305_secretkeybytes>>(
          'crypto_box_curve25519xchacha20poly1305_secretkeybytes');
  late final _dart_crypto_box_curve25519xchacha20poly1305_secretkeybytes
      _crypto_box_curve25519xchacha20poly1305_secretkeybytes =
      _crypto_box_curve25519xchacha20poly1305_secretkeybytes_ptr.asFunction<
          _dart_crypto_box_curve25519xchacha20poly1305_secretkeybytes>();

  int crypto_box_curve25519xchacha20poly1305_beforenmbytes() {
    return _crypto_box_curve25519xchacha20poly1305_beforenmbytes();
  }

  late final _crypto_box_curve25519xchacha20poly1305_beforenmbytes_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_box_curve25519xchacha20poly1305_beforenmbytes>>(
          'crypto_box_curve25519xchacha20poly1305_beforenmbytes');
  late final _dart_crypto_box_curve25519xchacha20poly1305_beforenmbytes
      _crypto_box_curve25519xchacha20poly1305_beforenmbytes =
      _crypto_box_curve25519xchacha20poly1305_beforenmbytes_ptr.asFunction<
          _dart_crypto_box_curve25519xchacha20poly1305_beforenmbytes>();

  int crypto_box_curve25519xchacha20poly1305_noncebytes() {
    return _crypto_box_curve25519xchacha20poly1305_noncebytes();
  }

  late final _crypto_box_curve25519xchacha20poly1305_noncebytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xchacha20poly1305_noncebytes>>(
      'crypto_box_curve25519xchacha20poly1305_noncebytes');
  late final _dart_crypto_box_curve25519xchacha20poly1305_noncebytes
      _crypto_box_curve25519xchacha20poly1305_noncebytes =
      _crypto_box_curve25519xchacha20poly1305_noncebytes_ptr.asFunction<
          _dart_crypto_box_curve25519xchacha20poly1305_noncebytes>();

  int crypto_box_curve25519xchacha20poly1305_macbytes() {
    return _crypto_box_curve25519xchacha20poly1305_macbytes();
  }

  late final _crypto_box_curve25519xchacha20poly1305_macbytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xchacha20poly1305_macbytes>>(
      'crypto_box_curve25519xchacha20poly1305_macbytes');
  late final _dart_crypto_box_curve25519xchacha20poly1305_macbytes
      _crypto_box_curve25519xchacha20poly1305_macbytes =
      _crypto_box_curve25519xchacha20poly1305_macbytes_ptr
          .asFunction<_dart_crypto_box_curve25519xchacha20poly1305_macbytes>();

  int crypto_box_curve25519xchacha20poly1305_messagebytes_max() {
    return _crypto_box_curve25519xchacha20poly1305_messagebytes_max();
  }

  late final _crypto_box_curve25519xchacha20poly1305_messagebytes_max_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_box_curve25519xchacha20poly1305_messagebytes_max>>(
          'crypto_box_curve25519xchacha20poly1305_messagebytes_max');
  late final _dart_crypto_box_curve25519xchacha20poly1305_messagebytes_max
      _crypto_box_curve25519xchacha20poly1305_messagebytes_max =
      _crypto_box_curve25519xchacha20poly1305_messagebytes_max_ptr.asFunction<
          _dart_crypto_box_curve25519xchacha20poly1305_messagebytes_max>();

  int crypto_box_curve25519xchacha20poly1305_seed_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_seed_keypair(
      pk,
      sk,
      seed,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_seed_keypair_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xchacha20poly1305_seed_keypair>>(
      'crypto_box_curve25519xchacha20poly1305_seed_keypair');
  late final _dart_crypto_box_curve25519xchacha20poly1305_seed_keypair
      _crypto_box_curve25519xchacha20poly1305_seed_keypair =
      _crypto_box_curve25519xchacha20poly1305_seed_keypair_ptr.asFunction<
          _dart_crypto_box_curve25519xchacha20poly1305_seed_keypair>();

  int crypto_box_curve25519xchacha20poly1305_keypair(
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_keypair(
      pk,
      sk,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_keypair_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xchacha20poly1305_keypair>>(
      'crypto_box_curve25519xchacha20poly1305_keypair');
  late final _dart_crypto_box_curve25519xchacha20poly1305_keypair
      _crypto_box_curve25519xchacha20poly1305_keypair =
      _crypto_box_curve25519xchacha20poly1305_keypair_ptr
          .asFunction<_dart_crypto_box_curve25519xchacha20poly1305_keypair>();

  int crypto_box_curve25519xchacha20poly1305_easy(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_easy(
      c,
      m,
      mlen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_easy_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_box_curve25519xchacha20poly1305_easy>>(
      'crypto_box_curve25519xchacha20poly1305_easy');
  late final _dart_crypto_box_curve25519xchacha20poly1305_easy
      _crypto_box_curve25519xchacha20poly1305_easy =
      _crypto_box_curve25519xchacha20poly1305_easy_ptr
          .asFunction<_dart_crypto_box_curve25519xchacha20poly1305_easy>();

  int crypto_box_curve25519xchacha20poly1305_open_easy(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_open_easy(
      m,
      c,
      clen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_open_easy_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xchacha20poly1305_open_easy>>(
      'crypto_box_curve25519xchacha20poly1305_open_easy');
  late final _dart_crypto_box_curve25519xchacha20poly1305_open_easy
      _crypto_box_curve25519xchacha20poly1305_open_easy =
      _crypto_box_curve25519xchacha20poly1305_open_easy_ptr
          .asFunction<_dart_crypto_box_curve25519xchacha20poly1305_open_easy>();

  int crypto_box_curve25519xchacha20poly1305_detached(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_detached(
      c,
      mac,
      m,
      mlen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_detached_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xchacha20poly1305_detached>>(
      'crypto_box_curve25519xchacha20poly1305_detached');
  late final _dart_crypto_box_curve25519xchacha20poly1305_detached
      _crypto_box_curve25519xchacha20poly1305_detached =
      _crypto_box_curve25519xchacha20poly1305_detached_ptr
          .asFunction<_dart_crypto_box_curve25519xchacha20poly1305_detached>();

  int crypto_box_curve25519xchacha20poly1305_open_detached(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_open_detached(
      m,
      c,
      mac,
      clen,
      n,
      pk,
      sk,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_open_detached_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_box_curve25519xchacha20poly1305_open_detached>>(
          'crypto_box_curve25519xchacha20poly1305_open_detached');
  late final _dart_crypto_box_curve25519xchacha20poly1305_open_detached
      _crypto_box_curve25519xchacha20poly1305_open_detached =
      _crypto_box_curve25519xchacha20poly1305_open_detached_ptr.asFunction<
          _dart_crypto_box_curve25519xchacha20poly1305_open_detached>();

  int crypto_box_curve25519xchacha20poly1305_beforenm(
    ffi.Pointer<ffi.Uint8> k,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_beforenm(
      k,
      pk,
      sk,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_beforenm_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xchacha20poly1305_beforenm>>(
      'crypto_box_curve25519xchacha20poly1305_beforenm');
  late final _dart_crypto_box_curve25519xchacha20poly1305_beforenm
      _crypto_box_curve25519xchacha20poly1305_beforenm =
      _crypto_box_curve25519xchacha20poly1305_beforenm_ptr
          .asFunction<_dart_crypto_box_curve25519xchacha20poly1305_beforenm>();

  int crypto_box_curve25519xchacha20poly1305_easy_afternm(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_easy_afternm(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_easy_afternm_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xchacha20poly1305_easy_afternm>>(
      'crypto_box_curve25519xchacha20poly1305_easy_afternm');
  late final _dart_crypto_box_curve25519xchacha20poly1305_easy_afternm
      _crypto_box_curve25519xchacha20poly1305_easy_afternm =
      _crypto_box_curve25519xchacha20poly1305_easy_afternm_ptr.asFunction<
          _dart_crypto_box_curve25519xchacha20poly1305_easy_afternm>();

  int crypto_box_curve25519xchacha20poly1305_open_easy_afternm(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_open_easy_afternm(
      m,
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_open_easy_afternm_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_box_curve25519xchacha20poly1305_open_easy_afternm>>(
          'crypto_box_curve25519xchacha20poly1305_open_easy_afternm');
  late final _dart_crypto_box_curve25519xchacha20poly1305_open_easy_afternm
      _crypto_box_curve25519xchacha20poly1305_open_easy_afternm =
      _crypto_box_curve25519xchacha20poly1305_open_easy_afternm_ptr.asFunction<
          _dart_crypto_box_curve25519xchacha20poly1305_open_easy_afternm>();

  int crypto_box_curve25519xchacha20poly1305_detached_afternm(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_detached_afternm(
      c,
      mac,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_detached_afternm_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_box_curve25519xchacha20poly1305_detached_afternm>>(
          'crypto_box_curve25519xchacha20poly1305_detached_afternm');
  late final _dart_crypto_box_curve25519xchacha20poly1305_detached_afternm
      _crypto_box_curve25519xchacha20poly1305_detached_afternm =
      _crypto_box_curve25519xchacha20poly1305_detached_afternm_ptr.asFunction<
          _dart_crypto_box_curve25519xchacha20poly1305_detached_afternm>();

  int crypto_box_curve25519xchacha20poly1305_open_detached_afternm(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_open_detached_afternm(
      m,
      c,
      mac,
      clen,
      n,
      k,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_open_detached_afternm_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_box_curve25519xchacha20poly1305_open_detached_afternm>>(
          'crypto_box_curve25519xchacha20poly1305_open_detached_afternm');
  late final _dart_crypto_box_curve25519xchacha20poly1305_open_detached_afternm
      _crypto_box_curve25519xchacha20poly1305_open_detached_afternm =
      _crypto_box_curve25519xchacha20poly1305_open_detached_afternm_ptr.asFunction<
          _dart_crypto_box_curve25519xchacha20poly1305_open_detached_afternm>();

  int crypto_box_curve25519xchacha20poly1305_sealbytes() {
    return _crypto_box_curve25519xchacha20poly1305_sealbytes();
  }

  late final _crypto_box_curve25519xchacha20poly1305_sealbytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xchacha20poly1305_sealbytes>>(
      'crypto_box_curve25519xchacha20poly1305_sealbytes');
  late final _dart_crypto_box_curve25519xchacha20poly1305_sealbytes
      _crypto_box_curve25519xchacha20poly1305_sealbytes =
      _crypto_box_curve25519xchacha20poly1305_sealbytes_ptr
          .asFunction<_dart_crypto_box_curve25519xchacha20poly1305_sealbytes>();

  int crypto_box_curve25519xchacha20poly1305_seal(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> pk,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_seal(
      c,
      m,
      mlen,
      pk,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_seal_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_box_curve25519xchacha20poly1305_seal>>(
      'crypto_box_curve25519xchacha20poly1305_seal');
  late final _dart_crypto_box_curve25519xchacha20poly1305_seal
      _crypto_box_curve25519xchacha20poly1305_seal =
      _crypto_box_curve25519xchacha20poly1305_seal_ptr
          .asFunction<_dart_crypto_box_curve25519xchacha20poly1305_seal>();

  int crypto_box_curve25519xchacha20poly1305_seal_open(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> pk,
    ffi.Pointer<ffi.Uint8> sk,
  ) {
    return _crypto_box_curve25519xchacha20poly1305_seal_open(
      m,
      c,
      clen,
      pk,
      sk,
    );
  }

  late final _crypto_box_curve25519xchacha20poly1305_seal_open_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_box_curve25519xchacha20poly1305_seal_open>>(
      'crypto_box_curve25519xchacha20poly1305_seal_open');
  late final _dart_crypto_box_curve25519xchacha20poly1305_seal_open
      _crypto_box_curve25519xchacha20poly1305_seal_open =
      _crypto_box_curve25519xchacha20poly1305_seal_open_ptr
          .asFunction<_dart_crypto_box_curve25519xchacha20poly1305_seal_open>();

  int crypto_core_ed25519_bytes() {
    return _crypto_core_ed25519_bytes();
  }

  late final _crypto_core_ed25519_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_bytes>>(
          'crypto_core_ed25519_bytes');
  late final _dart_crypto_core_ed25519_bytes _crypto_core_ed25519_bytes =
      _crypto_core_ed25519_bytes_ptr
          .asFunction<_dart_crypto_core_ed25519_bytes>();

  int crypto_core_ed25519_uniformbytes() {
    return _crypto_core_ed25519_uniformbytes();
  }

  late final _crypto_core_ed25519_uniformbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_uniformbytes>>(
          'crypto_core_ed25519_uniformbytes');
  late final _dart_crypto_core_ed25519_uniformbytes
      _crypto_core_ed25519_uniformbytes = _crypto_core_ed25519_uniformbytes_ptr
          .asFunction<_dart_crypto_core_ed25519_uniformbytes>();

  int crypto_core_ed25519_hashbytes() {
    return _crypto_core_ed25519_hashbytes();
  }

  late final _crypto_core_ed25519_hashbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_hashbytes>>(
          'crypto_core_ed25519_hashbytes');
  late final _dart_crypto_core_ed25519_hashbytes
      _crypto_core_ed25519_hashbytes = _crypto_core_ed25519_hashbytes_ptr
          .asFunction<_dart_crypto_core_ed25519_hashbytes>();

  int crypto_core_ed25519_scalarbytes() {
    return _crypto_core_ed25519_scalarbytes();
  }

  late final _crypto_core_ed25519_scalarbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_scalarbytes>>(
          'crypto_core_ed25519_scalarbytes');
  late final _dart_crypto_core_ed25519_scalarbytes
      _crypto_core_ed25519_scalarbytes = _crypto_core_ed25519_scalarbytes_ptr
          .asFunction<_dart_crypto_core_ed25519_scalarbytes>();

  int crypto_core_ed25519_nonreducedscalarbytes() {
    return _crypto_core_ed25519_nonreducedscalarbytes();
  }

  late final _crypto_core_ed25519_nonreducedscalarbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_nonreducedscalarbytes>>(
          'crypto_core_ed25519_nonreducedscalarbytes');
  late final _dart_crypto_core_ed25519_nonreducedscalarbytes
      _crypto_core_ed25519_nonreducedscalarbytes =
      _crypto_core_ed25519_nonreducedscalarbytes_ptr
          .asFunction<_dart_crypto_core_ed25519_nonreducedscalarbytes>();

  int crypto_core_ed25519_is_valid_point(
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _crypto_core_ed25519_is_valid_point(
      p,
    );
  }

  late final _crypto_core_ed25519_is_valid_point_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_is_valid_point>>(
          'crypto_core_ed25519_is_valid_point');
  late final _dart_crypto_core_ed25519_is_valid_point
      _crypto_core_ed25519_is_valid_point =
      _crypto_core_ed25519_is_valid_point_ptr
          .asFunction<_dart_crypto_core_ed25519_is_valid_point>();

  int crypto_core_ed25519_add(
    ffi.Pointer<ffi.Uint8> r,
    ffi.Pointer<ffi.Uint8> p,
    ffi.Pointer<ffi.Uint8> q,
  ) {
    return _crypto_core_ed25519_add(
      r,
      p,
      q,
    );
  }

  late final _crypto_core_ed25519_add_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_add>>(
          'crypto_core_ed25519_add');
  late final _dart_crypto_core_ed25519_add _crypto_core_ed25519_add =
      _crypto_core_ed25519_add_ptr.asFunction<_dart_crypto_core_ed25519_add>();

  int crypto_core_ed25519_sub(
    ffi.Pointer<ffi.Uint8> r,
    ffi.Pointer<ffi.Uint8> p,
    ffi.Pointer<ffi.Uint8> q,
  ) {
    return _crypto_core_ed25519_sub(
      r,
      p,
      q,
    );
  }

  late final _crypto_core_ed25519_sub_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_sub>>(
          'crypto_core_ed25519_sub');
  late final _dart_crypto_core_ed25519_sub _crypto_core_ed25519_sub =
      _crypto_core_ed25519_sub_ptr.asFunction<_dart_crypto_core_ed25519_sub>();

  int crypto_core_ed25519_from_uniform(
    ffi.Pointer<ffi.Uint8> p,
    ffi.Pointer<ffi.Uint8> r,
  ) {
    return _crypto_core_ed25519_from_uniform(
      p,
      r,
    );
  }

  late final _crypto_core_ed25519_from_uniform_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_from_uniform>>(
          'crypto_core_ed25519_from_uniform');
  late final _dart_crypto_core_ed25519_from_uniform
      _crypto_core_ed25519_from_uniform = _crypto_core_ed25519_from_uniform_ptr
          .asFunction<_dart_crypto_core_ed25519_from_uniform>();

  int crypto_core_ed25519_from_hash(
    ffi.Pointer<ffi.Uint8> p,
    ffi.Pointer<ffi.Uint8> h,
  ) {
    return _crypto_core_ed25519_from_hash(
      p,
      h,
    );
  }

  late final _crypto_core_ed25519_from_hash_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_from_hash>>(
          'crypto_core_ed25519_from_hash');
  late final _dart_crypto_core_ed25519_from_hash
      _crypto_core_ed25519_from_hash = _crypto_core_ed25519_from_hash_ptr
          .asFunction<_dart_crypto_core_ed25519_from_hash>();

  void crypto_core_ed25519_random(
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _crypto_core_ed25519_random(
      p,
    );
  }

  late final _crypto_core_ed25519_random_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_random>>(
          'crypto_core_ed25519_random');
  late final _dart_crypto_core_ed25519_random _crypto_core_ed25519_random =
      _crypto_core_ed25519_random_ptr
          .asFunction<_dart_crypto_core_ed25519_random>();

  void crypto_core_ed25519_scalar_random(
    ffi.Pointer<ffi.Uint8> r,
  ) {
    return _crypto_core_ed25519_scalar_random(
      r,
    );
  }

  late final _crypto_core_ed25519_scalar_random_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_scalar_random>>(
          'crypto_core_ed25519_scalar_random');
  late final _dart_crypto_core_ed25519_scalar_random
      _crypto_core_ed25519_scalar_random =
      _crypto_core_ed25519_scalar_random_ptr
          .asFunction<_dart_crypto_core_ed25519_scalar_random>();

  int crypto_core_ed25519_scalar_invert(
    ffi.Pointer<ffi.Uint8> recip,
    ffi.Pointer<ffi.Uint8> s,
  ) {
    return _crypto_core_ed25519_scalar_invert(
      recip,
      s,
    );
  }

  late final _crypto_core_ed25519_scalar_invert_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_scalar_invert>>(
          'crypto_core_ed25519_scalar_invert');
  late final _dart_crypto_core_ed25519_scalar_invert
      _crypto_core_ed25519_scalar_invert =
      _crypto_core_ed25519_scalar_invert_ptr
          .asFunction<_dart_crypto_core_ed25519_scalar_invert>();

  void crypto_core_ed25519_scalar_negate(
    ffi.Pointer<ffi.Uint8> neg,
    ffi.Pointer<ffi.Uint8> s,
  ) {
    return _crypto_core_ed25519_scalar_negate(
      neg,
      s,
    );
  }

  late final _crypto_core_ed25519_scalar_negate_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_scalar_negate>>(
          'crypto_core_ed25519_scalar_negate');
  late final _dart_crypto_core_ed25519_scalar_negate
      _crypto_core_ed25519_scalar_negate =
      _crypto_core_ed25519_scalar_negate_ptr
          .asFunction<_dart_crypto_core_ed25519_scalar_negate>();

  void crypto_core_ed25519_scalar_complement(
    ffi.Pointer<ffi.Uint8> comp,
    ffi.Pointer<ffi.Uint8> s,
  ) {
    return _crypto_core_ed25519_scalar_complement(
      comp,
      s,
    );
  }

  late final _crypto_core_ed25519_scalar_complement_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_scalar_complement>>(
          'crypto_core_ed25519_scalar_complement');
  late final _dart_crypto_core_ed25519_scalar_complement
      _crypto_core_ed25519_scalar_complement =
      _crypto_core_ed25519_scalar_complement_ptr
          .asFunction<_dart_crypto_core_ed25519_scalar_complement>();

  void crypto_core_ed25519_scalar_add(
    ffi.Pointer<ffi.Uint8> z,
    ffi.Pointer<ffi.Uint8> x,
    ffi.Pointer<ffi.Uint8> y,
  ) {
    return _crypto_core_ed25519_scalar_add(
      z,
      x,
      y,
    );
  }

  late final _crypto_core_ed25519_scalar_add_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_scalar_add>>(
          'crypto_core_ed25519_scalar_add');
  late final _dart_crypto_core_ed25519_scalar_add
      _crypto_core_ed25519_scalar_add = _crypto_core_ed25519_scalar_add_ptr
          .asFunction<_dart_crypto_core_ed25519_scalar_add>();

  void crypto_core_ed25519_scalar_sub(
    ffi.Pointer<ffi.Uint8> z,
    ffi.Pointer<ffi.Uint8> x,
    ffi.Pointer<ffi.Uint8> y,
  ) {
    return _crypto_core_ed25519_scalar_sub(
      z,
      x,
      y,
    );
  }

  late final _crypto_core_ed25519_scalar_sub_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_scalar_sub>>(
          'crypto_core_ed25519_scalar_sub');
  late final _dart_crypto_core_ed25519_scalar_sub
      _crypto_core_ed25519_scalar_sub = _crypto_core_ed25519_scalar_sub_ptr
          .asFunction<_dart_crypto_core_ed25519_scalar_sub>();

  void crypto_core_ed25519_scalar_mul(
    ffi.Pointer<ffi.Uint8> z,
    ffi.Pointer<ffi.Uint8> x,
    ffi.Pointer<ffi.Uint8> y,
  ) {
    return _crypto_core_ed25519_scalar_mul(
      z,
      x,
      y,
    );
  }

  late final _crypto_core_ed25519_scalar_mul_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_scalar_mul>>(
          'crypto_core_ed25519_scalar_mul');
  late final _dart_crypto_core_ed25519_scalar_mul
      _crypto_core_ed25519_scalar_mul = _crypto_core_ed25519_scalar_mul_ptr
          .asFunction<_dart_crypto_core_ed25519_scalar_mul>();

  void crypto_core_ed25519_scalar_reduce(
    ffi.Pointer<ffi.Uint8> r,
    ffi.Pointer<ffi.Uint8> s,
  ) {
    return _crypto_core_ed25519_scalar_reduce(
      r,
      s,
    );
  }

  late final _crypto_core_ed25519_scalar_reduce_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ed25519_scalar_reduce>>(
          'crypto_core_ed25519_scalar_reduce');
  late final _dart_crypto_core_ed25519_scalar_reduce
      _crypto_core_ed25519_scalar_reduce =
      _crypto_core_ed25519_scalar_reduce_ptr
          .asFunction<_dart_crypto_core_ed25519_scalar_reduce>();

  int crypto_core_ristretto255_bytes() {
    return _crypto_core_ristretto255_bytes();
  }

  late final _crypto_core_ristretto255_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_bytes>>(
          'crypto_core_ristretto255_bytes');
  late final _dart_crypto_core_ristretto255_bytes
      _crypto_core_ristretto255_bytes = _crypto_core_ristretto255_bytes_ptr
          .asFunction<_dart_crypto_core_ristretto255_bytes>();

  int crypto_core_ristretto255_hashbytes() {
    return _crypto_core_ristretto255_hashbytes();
  }

  late final _crypto_core_ristretto255_hashbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_hashbytes>>(
          'crypto_core_ristretto255_hashbytes');
  late final _dart_crypto_core_ristretto255_hashbytes
      _crypto_core_ristretto255_hashbytes =
      _crypto_core_ristretto255_hashbytes_ptr
          .asFunction<_dart_crypto_core_ristretto255_hashbytes>();

  int crypto_core_ristretto255_scalarbytes() {
    return _crypto_core_ristretto255_scalarbytes();
  }

  late final _crypto_core_ristretto255_scalarbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_scalarbytes>>(
          'crypto_core_ristretto255_scalarbytes');
  late final _dart_crypto_core_ristretto255_scalarbytes
      _crypto_core_ristretto255_scalarbytes =
      _crypto_core_ristretto255_scalarbytes_ptr
          .asFunction<_dart_crypto_core_ristretto255_scalarbytes>();

  int crypto_core_ristretto255_nonreducedscalarbytes() {
    return _crypto_core_ristretto255_nonreducedscalarbytes();
  }

  late final _crypto_core_ristretto255_nonreducedscalarbytes_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_core_ristretto255_nonreducedscalarbytes>>(
      'crypto_core_ristretto255_nonreducedscalarbytes');
  late final _dart_crypto_core_ristretto255_nonreducedscalarbytes
      _crypto_core_ristretto255_nonreducedscalarbytes =
      _crypto_core_ristretto255_nonreducedscalarbytes_ptr
          .asFunction<_dart_crypto_core_ristretto255_nonreducedscalarbytes>();

  int crypto_core_ristretto255_is_valid_point(
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _crypto_core_ristretto255_is_valid_point(
      p,
    );
  }

  late final _crypto_core_ristretto255_is_valid_point_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_is_valid_point>>(
          'crypto_core_ristretto255_is_valid_point');
  late final _dart_crypto_core_ristretto255_is_valid_point
      _crypto_core_ristretto255_is_valid_point =
      _crypto_core_ristretto255_is_valid_point_ptr
          .asFunction<_dart_crypto_core_ristretto255_is_valid_point>();

  int crypto_core_ristretto255_add(
    ffi.Pointer<ffi.Uint8> r,
    ffi.Pointer<ffi.Uint8> p,
    ffi.Pointer<ffi.Uint8> q,
  ) {
    return _crypto_core_ristretto255_add(
      r,
      p,
      q,
    );
  }

  late final _crypto_core_ristretto255_add_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_add>>(
          'crypto_core_ristretto255_add');
  late final _dart_crypto_core_ristretto255_add _crypto_core_ristretto255_add =
      _crypto_core_ristretto255_add_ptr
          .asFunction<_dart_crypto_core_ristretto255_add>();

  int crypto_core_ristretto255_sub(
    ffi.Pointer<ffi.Uint8> r,
    ffi.Pointer<ffi.Uint8> p,
    ffi.Pointer<ffi.Uint8> q,
  ) {
    return _crypto_core_ristretto255_sub(
      r,
      p,
      q,
    );
  }

  late final _crypto_core_ristretto255_sub_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_sub>>(
          'crypto_core_ristretto255_sub');
  late final _dart_crypto_core_ristretto255_sub _crypto_core_ristretto255_sub =
      _crypto_core_ristretto255_sub_ptr
          .asFunction<_dart_crypto_core_ristretto255_sub>();

  int crypto_core_ristretto255_from_hash(
    ffi.Pointer<ffi.Uint8> p,
    ffi.Pointer<ffi.Uint8> r,
  ) {
    return _crypto_core_ristretto255_from_hash(
      p,
      r,
    );
  }

  late final _crypto_core_ristretto255_from_hash_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_from_hash>>(
          'crypto_core_ristretto255_from_hash');
  late final _dart_crypto_core_ristretto255_from_hash
      _crypto_core_ristretto255_from_hash =
      _crypto_core_ristretto255_from_hash_ptr
          .asFunction<_dart_crypto_core_ristretto255_from_hash>();

  void crypto_core_ristretto255_random(
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _crypto_core_ristretto255_random(
      p,
    );
  }

  late final _crypto_core_ristretto255_random_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_random>>(
          'crypto_core_ristretto255_random');
  late final _dart_crypto_core_ristretto255_random
      _crypto_core_ristretto255_random = _crypto_core_ristretto255_random_ptr
          .asFunction<_dart_crypto_core_ristretto255_random>();

  void crypto_core_ristretto255_scalar_random(
    ffi.Pointer<ffi.Uint8> r,
  ) {
    return _crypto_core_ristretto255_scalar_random(
      r,
    );
  }

  late final _crypto_core_ristretto255_scalar_random_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_scalar_random>>(
          'crypto_core_ristretto255_scalar_random');
  late final _dart_crypto_core_ristretto255_scalar_random
      _crypto_core_ristretto255_scalar_random =
      _crypto_core_ristretto255_scalar_random_ptr
          .asFunction<_dart_crypto_core_ristretto255_scalar_random>();

  int crypto_core_ristretto255_scalar_invert(
    ffi.Pointer<ffi.Uint8> recip,
    ffi.Pointer<ffi.Uint8> s,
  ) {
    return _crypto_core_ristretto255_scalar_invert(
      recip,
      s,
    );
  }

  late final _crypto_core_ristretto255_scalar_invert_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_scalar_invert>>(
          'crypto_core_ristretto255_scalar_invert');
  late final _dart_crypto_core_ristretto255_scalar_invert
      _crypto_core_ristretto255_scalar_invert =
      _crypto_core_ristretto255_scalar_invert_ptr
          .asFunction<_dart_crypto_core_ristretto255_scalar_invert>();

  void crypto_core_ristretto255_scalar_negate(
    ffi.Pointer<ffi.Uint8> neg,
    ffi.Pointer<ffi.Uint8> s,
  ) {
    return _crypto_core_ristretto255_scalar_negate(
      neg,
      s,
    );
  }

  late final _crypto_core_ristretto255_scalar_negate_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_scalar_negate>>(
          'crypto_core_ristretto255_scalar_negate');
  late final _dart_crypto_core_ristretto255_scalar_negate
      _crypto_core_ristretto255_scalar_negate =
      _crypto_core_ristretto255_scalar_negate_ptr
          .asFunction<_dart_crypto_core_ristretto255_scalar_negate>();

  void crypto_core_ristretto255_scalar_complement(
    ffi.Pointer<ffi.Uint8> comp,
    ffi.Pointer<ffi.Uint8> s,
  ) {
    return _crypto_core_ristretto255_scalar_complement(
      comp,
      s,
    );
  }

  late final _crypto_core_ristretto255_scalar_complement_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_core_ristretto255_scalar_complement>>(
      'crypto_core_ristretto255_scalar_complement');
  late final _dart_crypto_core_ristretto255_scalar_complement
      _crypto_core_ristretto255_scalar_complement =
      _crypto_core_ristretto255_scalar_complement_ptr
          .asFunction<_dart_crypto_core_ristretto255_scalar_complement>();

  void crypto_core_ristretto255_scalar_add(
    ffi.Pointer<ffi.Uint8> z,
    ffi.Pointer<ffi.Uint8> x,
    ffi.Pointer<ffi.Uint8> y,
  ) {
    return _crypto_core_ristretto255_scalar_add(
      z,
      x,
      y,
    );
  }

  late final _crypto_core_ristretto255_scalar_add_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_scalar_add>>(
          'crypto_core_ristretto255_scalar_add');
  late final _dart_crypto_core_ristretto255_scalar_add
      _crypto_core_ristretto255_scalar_add =
      _crypto_core_ristretto255_scalar_add_ptr
          .asFunction<_dart_crypto_core_ristretto255_scalar_add>();

  void crypto_core_ristretto255_scalar_sub(
    ffi.Pointer<ffi.Uint8> z,
    ffi.Pointer<ffi.Uint8> x,
    ffi.Pointer<ffi.Uint8> y,
  ) {
    return _crypto_core_ristretto255_scalar_sub(
      z,
      x,
      y,
    );
  }

  late final _crypto_core_ristretto255_scalar_sub_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_scalar_sub>>(
          'crypto_core_ristretto255_scalar_sub');
  late final _dart_crypto_core_ristretto255_scalar_sub
      _crypto_core_ristretto255_scalar_sub =
      _crypto_core_ristretto255_scalar_sub_ptr
          .asFunction<_dart_crypto_core_ristretto255_scalar_sub>();

  void crypto_core_ristretto255_scalar_mul(
    ffi.Pointer<ffi.Uint8> z,
    ffi.Pointer<ffi.Uint8> x,
    ffi.Pointer<ffi.Uint8> y,
  ) {
    return _crypto_core_ristretto255_scalar_mul(
      z,
      x,
      y,
    );
  }

  late final _crypto_core_ristretto255_scalar_mul_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_scalar_mul>>(
          'crypto_core_ristretto255_scalar_mul');
  late final _dart_crypto_core_ristretto255_scalar_mul
      _crypto_core_ristretto255_scalar_mul =
      _crypto_core_ristretto255_scalar_mul_ptr
          .asFunction<_dart_crypto_core_ristretto255_scalar_mul>();

  void crypto_core_ristretto255_scalar_reduce(
    ffi.Pointer<ffi.Uint8> r,
    ffi.Pointer<ffi.Uint8> s,
  ) {
    return _crypto_core_ristretto255_scalar_reduce(
      r,
      s,
    );
  }

  late final _crypto_core_ristretto255_scalar_reduce_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_core_ristretto255_scalar_reduce>>(
          'crypto_core_ristretto255_scalar_reduce');
  late final _dart_crypto_core_ristretto255_scalar_reduce
      _crypto_core_ristretto255_scalar_reduce =
      _crypto_core_ristretto255_scalar_reduce_ptr
          .asFunction<_dart_crypto_core_ristretto255_scalar_reduce>();

  int crypto_scalarmult_ed25519_bytes() {
    return _crypto_scalarmult_ed25519_bytes();
  }

  late final _crypto_scalarmult_ed25519_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_ed25519_bytes>>(
          'crypto_scalarmult_ed25519_bytes');
  late final _dart_crypto_scalarmult_ed25519_bytes
      _crypto_scalarmult_ed25519_bytes = _crypto_scalarmult_ed25519_bytes_ptr
          .asFunction<_dart_crypto_scalarmult_ed25519_bytes>();

  int crypto_scalarmult_ed25519_scalarbytes() {
    return _crypto_scalarmult_ed25519_scalarbytes();
  }

  late final _crypto_scalarmult_ed25519_scalarbytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_ed25519_scalarbytes>>(
          'crypto_scalarmult_ed25519_scalarbytes');
  late final _dart_crypto_scalarmult_ed25519_scalarbytes
      _crypto_scalarmult_ed25519_scalarbytes =
      _crypto_scalarmult_ed25519_scalarbytes_ptr
          .asFunction<_dart_crypto_scalarmult_ed25519_scalarbytes>();

  int crypto_scalarmult_ed25519(
    ffi.Pointer<ffi.Uint8> q,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _crypto_scalarmult_ed25519(
      q,
      n,
      p,
    );
  }

  late final _crypto_scalarmult_ed25519_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_ed25519>>(
          'crypto_scalarmult_ed25519');
  late final _dart_crypto_scalarmult_ed25519 _crypto_scalarmult_ed25519 =
      _crypto_scalarmult_ed25519_ptr
          .asFunction<_dart_crypto_scalarmult_ed25519>();

  int crypto_scalarmult_ed25519_noclamp(
    ffi.Pointer<ffi.Uint8> q,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _crypto_scalarmult_ed25519_noclamp(
      q,
      n,
      p,
    );
  }

  late final _crypto_scalarmult_ed25519_noclamp_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_ed25519_noclamp>>(
          'crypto_scalarmult_ed25519_noclamp');
  late final _dart_crypto_scalarmult_ed25519_noclamp
      _crypto_scalarmult_ed25519_noclamp =
      _crypto_scalarmult_ed25519_noclamp_ptr
          .asFunction<_dart_crypto_scalarmult_ed25519_noclamp>();

  int crypto_scalarmult_ed25519_base(
    ffi.Pointer<ffi.Uint8> q,
    ffi.Pointer<ffi.Uint8> n,
  ) {
    return _crypto_scalarmult_ed25519_base(
      q,
      n,
    );
  }

  late final _crypto_scalarmult_ed25519_base_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_ed25519_base>>(
          'crypto_scalarmult_ed25519_base');
  late final _dart_crypto_scalarmult_ed25519_base
      _crypto_scalarmult_ed25519_base = _crypto_scalarmult_ed25519_base_ptr
          .asFunction<_dart_crypto_scalarmult_ed25519_base>();

  int crypto_scalarmult_ed25519_base_noclamp(
    ffi.Pointer<ffi.Uint8> q,
    ffi.Pointer<ffi.Uint8> n,
  ) {
    return _crypto_scalarmult_ed25519_base_noclamp(
      q,
      n,
    );
  }

  late final _crypto_scalarmult_ed25519_base_noclamp_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_ed25519_base_noclamp>>(
          'crypto_scalarmult_ed25519_base_noclamp');
  late final _dart_crypto_scalarmult_ed25519_base_noclamp
      _crypto_scalarmult_ed25519_base_noclamp =
      _crypto_scalarmult_ed25519_base_noclamp_ptr
          .asFunction<_dart_crypto_scalarmult_ed25519_base_noclamp>();

  int crypto_scalarmult_ristretto255_bytes() {
    return _crypto_scalarmult_ristretto255_bytes();
  }

  late final _crypto_scalarmult_ristretto255_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_ristretto255_bytes>>(
          'crypto_scalarmult_ristretto255_bytes');
  late final _dart_crypto_scalarmult_ristretto255_bytes
      _crypto_scalarmult_ristretto255_bytes =
      _crypto_scalarmult_ristretto255_bytes_ptr
          .asFunction<_dart_crypto_scalarmult_ristretto255_bytes>();

  int crypto_scalarmult_ristretto255_scalarbytes() {
    return _crypto_scalarmult_ristretto255_scalarbytes();
  }

  late final _crypto_scalarmult_ristretto255_scalarbytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_scalarmult_ristretto255_scalarbytes>>(
      'crypto_scalarmult_ristretto255_scalarbytes');
  late final _dart_crypto_scalarmult_ristretto255_scalarbytes
      _crypto_scalarmult_ristretto255_scalarbytes =
      _crypto_scalarmult_ristretto255_scalarbytes_ptr
          .asFunction<_dart_crypto_scalarmult_ristretto255_scalarbytes>();

  int crypto_scalarmult_ristretto255(
    ffi.Pointer<ffi.Uint8> q,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _crypto_scalarmult_ristretto255(
      q,
      n,
      p,
    );
  }

  late final _crypto_scalarmult_ristretto255_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_ristretto255>>(
          'crypto_scalarmult_ristretto255');
  late final _dart_crypto_scalarmult_ristretto255
      _crypto_scalarmult_ristretto255 = _crypto_scalarmult_ristretto255_ptr
          .asFunction<_dart_crypto_scalarmult_ristretto255>();

  int crypto_scalarmult_ristretto255_base(
    ffi.Pointer<ffi.Uint8> q,
    ffi.Pointer<ffi.Uint8> n,
  ) {
    return _crypto_scalarmult_ristretto255_base(
      q,
      n,
    );
  }

  late final _crypto_scalarmult_ristretto255_base_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_scalarmult_ristretto255_base>>(
          'crypto_scalarmult_ristretto255_base');
  late final _dart_crypto_scalarmult_ristretto255_base
      _crypto_scalarmult_ristretto255_base =
      _crypto_scalarmult_ristretto255_base_ptr
          .asFunction<_dart_crypto_scalarmult_ristretto255_base>();

  int crypto_secretbox_xchacha20poly1305_keybytes() {
    return _crypto_secretbox_xchacha20poly1305_keybytes();
  }

  late final _crypto_secretbox_xchacha20poly1305_keybytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretbox_xchacha20poly1305_keybytes>>(
      'crypto_secretbox_xchacha20poly1305_keybytes');
  late final _dart_crypto_secretbox_xchacha20poly1305_keybytes
      _crypto_secretbox_xchacha20poly1305_keybytes =
      _crypto_secretbox_xchacha20poly1305_keybytes_ptr
          .asFunction<_dart_crypto_secretbox_xchacha20poly1305_keybytes>();

  int crypto_secretbox_xchacha20poly1305_noncebytes() {
    return _crypto_secretbox_xchacha20poly1305_noncebytes();
  }

  late final _crypto_secretbox_xchacha20poly1305_noncebytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretbox_xchacha20poly1305_noncebytes>>(
      'crypto_secretbox_xchacha20poly1305_noncebytes');
  late final _dart_crypto_secretbox_xchacha20poly1305_noncebytes
      _crypto_secretbox_xchacha20poly1305_noncebytes =
      _crypto_secretbox_xchacha20poly1305_noncebytes_ptr
          .asFunction<_dart_crypto_secretbox_xchacha20poly1305_noncebytes>();

  int crypto_secretbox_xchacha20poly1305_macbytes() {
    return _crypto_secretbox_xchacha20poly1305_macbytes();
  }

  late final _crypto_secretbox_xchacha20poly1305_macbytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretbox_xchacha20poly1305_macbytes>>(
      'crypto_secretbox_xchacha20poly1305_macbytes');
  late final _dart_crypto_secretbox_xchacha20poly1305_macbytes
      _crypto_secretbox_xchacha20poly1305_macbytes =
      _crypto_secretbox_xchacha20poly1305_macbytes_ptr
          .asFunction<_dart_crypto_secretbox_xchacha20poly1305_macbytes>();

  int crypto_secretbox_xchacha20poly1305_messagebytes_max() {
    return _crypto_secretbox_xchacha20poly1305_messagebytes_max();
  }

  late final _crypto_secretbox_xchacha20poly1305_messagebytes_max_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretbox_xchacha20poly1305_messagebytes_max>>(
      'crypto_secretbox_xchacha20poly1305_messagebytes_max');
  late final _dart_crypto_secretbox_xchacha20poly1305_messagebytes_max
      _crypto_secretbox_xchacha20poly1305_messagebytes_max =
      _crypto_secretbox_xchacha20poly1305_messagebytes_max_ptr.asFunction<
          _dart_crypto_secretbox_xchacha20poly1305_messagebytes_max>();

  int crypto_secretbox_xchacha20poly1305_easy(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_xchacha20poly1305_easy(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_xchacha20poly1305_easy_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_secretbox_xchacha20poly1305_easy>>(
          'crypto_secretbox_xchacha20poly1305_easy');
  late final _dart_crypto_secretbox_xchacha20poly1305_easy
      _crypto_secretbox_xchacha20poly1305_easy =
      _crypto_secretbox_xchacha20poly1305_easy_ptr
          .asFunction<_dart_crypto_secretbox_xchacha20poly1305_easy>();

  int crypto_secretbox_xchacha20poly1305_open_easy(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_xchacha20poly1305_open_easy(
      m,
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_xchacha20poly1305_open_easy_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretbox_xchacha20poly1305_open_easy>>(
      'crypto_secretbox_xchacha20poly1305_open_easy');
  late final _dart_crypto_secretbox_xchacha20poly1305_open_easy
      _crypto_secretbox_xchacha20poly1305_open_easy =
      _crypto_secretbox_xchacha20poly1305_open_easy_ptr
          .asFunction<_dart_crypto_secretbox_xchacha20poly1305_open_easy>();

  int crypto_secretbox_xchacha20poly1305_detached(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_xchacha20poly1305_detached(
      c,
      mac,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_xchacha20poly1305_detached_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_secretbox_xchacha20poly1305_detached>>(
      'crypto_secretbox_xchacha20poly1305_detached');
  late final _dart_crypto_secretbox_xchacha20poly1305_detached
      _crypto_secretbox_xchacha20poly1305_detached =
      _crypto_secretbox_xchacha20poly1305_detached_ptr
          .asFunction<_dart_crypto_secretbox_xchacha20poly1305_detached>();

  int crypto_secretbox_xchacha20poly1305_open_detached(
    ffi.Pointer<ffi.Uint8> m,
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> mac,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_secretbox_xchacha20poly1305_open_detached(
      m,
      c,
      mac,
      clen,
      n,
      k,
    );
  }

  late final _crypto_secretbox_xchacha20poly1305_open_detached_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_secretbox_xchacha20poly1305_open_detached>>(
      'crypto_secretbox_xchacha20poly1305_open_detached');
  late final _dart_crypto_secretbox_xchacha20poly1305_open_detached
      _crypto_secretbox_xchacha20poly1305_open_detached =
      _crypto_secretbox_xchacha20poly1305_open_detached_ptr
          .asFunction<_dart_crypto_secretbox_xchacha20poly1305_open_detached>();

  int crypto_pwhash_scryptsalsa208sha256_bytes_min() {
    return _crypto_pwhash_scryptsalsa208sha256_bytes_min();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_bytes_min_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_scryptsalsa208sha256_bytes_min>>(
      'crypto_pwhash_scryptsalsa208sha256_bytes_min');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_bytes_min
      _crypto_pwhash_scryptsalsa208sha256_bytes_min =
      _crypto_pwhash_scryptsalsa208sha256_bytes_min_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_bytes_min>();

  int crypto_pwhash_scryptsalsa208sha256_bytes_max() {
    return _crypto_pwhash_scryptsalsa208sha256_bytes_max();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_bytes_max_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_scryptsalsa208sha256_bytes_max>>(
      'crypto_pwhash_scryptsalsa208sha256_bytes_max');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_bytes_max
      _crypto_pwhash_scryptsalsa208sha256_bytes_max =
      _crypto_pwhash_scryptsalsa208sha256_bytes_max_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_bytes_max>();

  int crypto_pwhash_scryptsalsa208sha256_passwd_min() {
    return _crypto_pwhash_scryptsalsa208sha256_passwd_min();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_passwd_min_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_scryptsalsa208sha256_passwd_min>>(
      'crypto_pwhash_scryptsalsa208sha256_passwd_min');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_passwd_min
      _crypto_pwhash_scryptsalsa208sha256_passwd_min =
      _crypto_pwhash_scryptsalsa208sha256_passwd_min_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_passwd_min>();

  int crypto_pwhash_scryptsalsa208sha256_passwd_max() {
    return _crypto_pwhash_scryptsalsa208sha256_passwd_max();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_passwd_max_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_scryptsalsa208sha256_passwd_max>>(
      'crypto_pwhash_scryptsalsa208sha256_passwd_max');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_passwd_max
      _crypto_pwhash_scryptsalsa208sha256_passwd_max =
      _crypto_pwhash_scryptsalsa208sha256_passwd_max_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_passwd_max>();

  int crypto_pwhash_scryptsalsa208sha256_saltbytes() {
    return _crypto_pwhash_scryptsalsa208sha256_saltbytes();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_saltbytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_scryptsalsa208sha256_saltbytes>>(
      'crypto_pwhash_scryptsalsa208sha256_saltbytes');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_saltbytes
      _crypto_pwhash_scryptsalsa208sha256_saltbytes =
      _crypto_pwhash_scryptsalsa208sha256_saltbytes_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_saltbytes>();

  int crypto_pwhash_scryptsalsa208sha256_strbytes() {
    return _crypto_pwhash_scryptsalsa208sha256_strbytes();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_strbytes_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_scryptsalsa208sha256_strbytes>>(
      'crypto_pwhash_scryptsalsa208sha256_strbytes');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_strbytes
      _crypto_pwhash_scryptsalsa208sha256_strbytes =
      _crypto_pwhash_scryptsalsa208sha256_strbytes_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_strbytes>();

  ffi.Pointer<ffi.Int8> crypto_pwhash_scryptsalsa208sha256_strprefix() {
    return _crypto_pwhash_scryptsalsa208sha256_strprefix();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_strprefix_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_scryptsalsa208sha256_strprefix>>(
      'crypto_pwhash_scryptsalsa208sha256_strprefix');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_strprefix
      _crypto_pwhash_scryptsalsa208sha256_strprefix =
      _crypto_pwhash_scryptsalsa208sha256_strprefix_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_strprefix>();

  int crypto_pwhash_scryptsalsa208sha256_opslimit_min() {
    return _crypto_pwhash_scryptsalsa208sha256_opslimit_min();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_opslimit_min_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_pwhash_scryptsalsa208sha256_opslimit_min>>(
      'crypto_pwhash_scryptsalsa208sha256_opslimit_min');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_opslimit_min
      _crypto_pwhash_scryptsalsa208sha256_opslimit_min =
      _crypto_pwhash_scryptsalsa208sha256_opslimit_min_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_opslimit_min>();

  int crypto_pwhash_scryptsalsa208sha256_opslimit_max() {
    return _crypto_pwhash_scryptsalsa208sha256_opslimit_max();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_opslimit_max_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_pwhash_scryptsalsa208sha256_opslimit_max>>(
      'crypto_pwhash_scryptsalsa208sha256_opslimit_max');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_opslimit_max
      _crypto_pwhash_scryptsalsa208sha256_opslimit_max =
      _crypto_pwhash_scryptsalsa208sha256_opslimit_max_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_opslimit_max>();

  int crypto_pwhash_scryptsalsa208sha256_memlimit_min() {
    return _crypto_pwhash_scryptsalsa208sha256_memlimit_min();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_memlimit_min_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_pwhash_scryptsalsa208sha256_memlimit_min>>(
      'crypto_pwhash_scryptsalsa208sha256_memlimit_min');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_memlimit_min
      _crypto_pwhash_scryptsalsa208sha256_memlimit_min =
      _crypto_pwhash_scryptsalsa208sha256_memlimit_min_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_memlimit_min>();

  int crypto_pwhash_scryptsalsa208sha256_memlimit_max() {
    return _crypto_pwhash_scryptsalsa208sha256_memlimit_max();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_memlimit_max_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_pwhash_scryptsalsa208sha256_memlimit_max>>(
      'crypto_pwhash_scryptsalsa208sha256_memlimit_max');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_memlimit_max
      _crypto_pwhash_scryptsalsa208sha256_memlimit_max =
      _crypto_pwhash_scryptsalsa208sha256_memlimit_max_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_memlimit_max>();

  int crypto_pwhash_scryptsalsa208sha256_opslimit_interactive() {
    return _crypto_pwhash_scryptsalsa208sha256_opslimit_interactive();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_opslimit_interactive_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive>>(
          'crypto_pwhash_scryptsalsa208sha256_opslimit_interactive');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive
      _crypto_pwhash_scryptsalsa208sha256_opslimit_interactive =
      _crypto_pwhash_scryptsalsa208sha256_opslimit_interactive_ptr.asFunction<
          _dart_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive>();

  int crypto_pwhash_scryptsalsa208sha256_memlimit_interactive() {
    return _crypto_pwhash_scryptsalsa208sha256_memlimit_interactive();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_memlimit_interactive_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive>>(
          'crypto_pwhash_scryptsalsa208sha256_memlimit_interactive');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive
      _crypto_pwhash_scryptsalsa208sha256_memlimit_interactive =
      _crypto_pwhash_scryptsalsa208sha256_memlimit_interactive_ptr.asFunction<
          _dart_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive>();

  int crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive() {
    return _crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive>>(
          'crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive
      _crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive =
      _crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive_ptr.asFunction<
          _dart_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive>();

  int crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive() {
    return _crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive();
  }

  late final _crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive>>(
          'crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive
      _crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive =
      _crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive_ptr.asFunction<
          _dart_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive>();

  int crypto_pwhash_scryptsalsa208sha256(
    ffi.Pointer<ffi.Uint8> out,
    int outlen,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
    ffi.Pointer<ffi.Uint8> salt,
    int opslimit,
    int memlimit,
  ) {
    return _crypto_pwhash_scryptsalsa208sha256(
      out,
      outlen,
      passwd,
      passwdlen,
      salt,
      opslimit,
      memlimit,
    );
  }

  late final _crypto_pwhash_scryptsalsa208sha256_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_scryptsalsa208sha256>>(
          'crypto_pwhash_scryptsalsa208sha256');
  late final _dart_crypto_pwhash_scryptsalsa208sha256
      _crypto_pwhash_scryptsalsa208sha256 =
      _crypto_pwhash_scryptsalsa208sha256_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256>();

  int crypto_pwhash_scryptsalsa208sha256_str(
    ffi.Pointer<ffi.Int8> out,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
    int opslimit,
    int memlimit,
  ) {
    return _crypto_pwhash_scryptsalsa208sha256_str(
      out,
      passwd,
      passwdlen,
      opslimit,
      memlimit,
    );
  }

  late final _crypto_pwhash_scryptsalsa208sha256_str_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_scryptsalsa208sha256_str>>(
          'crypto_pwhash_scryptsalsa208sha256_str');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_str
      _crypto_pwhash_scryptsalsa208sha256_str =
      _crypto_pwhash_scryptsalsa208sha256_str_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_str>();

  int crypto_pwhash_scryptsalsa208sha256_str_verify(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int8> passwd,
    int passwdlen,
  ) {
    return _crypto_pwhash_scryptsalsa208sha256_str_verify(
      str,
      passwd,
      passwdlen,
    );
  }

  late final _crypto_pwhash_scryptsalsa208sha256_str_verify_ptr = _lookup<
          ffi.NativeFunction<_c_crypto_pwhash_scryptsalsa208sha256_str_verify>>(
      'crypto_pwhash_scryptsalsa208sha256_str_verify');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_str_verify
      _crypto_pwhash_scryptsalsa208sha256_str_verify =
      _crypto_pwhash_scryptsalsa208sha256_str_verify_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_str_verify>();

  int crypto_pwhash_scryptsalsa208sha256_ll(
    ffi.Pointer<ffi.Uint8> passwd,
    int passwdlen,
    ffi.Pointer<ffi.Uint8> salt,
    int saltlen,
    int N,
    int r,
    int p,
    ffi.Pointer<ffi.Uint8> buf,
    int buflen,
  ) {
    return _crypto_pwhash_scryptsalsa208sha256_ll(
      passwd,
      passwdlen,
      salt,
      saltlen,
      N,
      r,
      p,
      buf,
      buflen,
    );
  }

  late final _crypto_pwhash_scryptsalsa208sha256_ll_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_pwhash_scryptsalsa208sha256_ll>>(
          'crypto_pwhash_scryptsalsa208sha256_ll');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_ll
      _crypto_pwhash_scryptsalsa208sha256_ll =
      _crypto_pwhash_scryptsalsa208sha256_ll_ptr
          .asFunction<_dart_crypto_pwhash_scryptsalsa208sha256_ll>();

  int crypto_pwhash_scryptsalsa208sha256_str_needs_rehash(
    ffi.Pointer<ffi.Int8> str,
    int opslimit,
    int memlimit,
  ) {
    return _crypto_pwhash_scryptsalsa208sha256_str_needs_rehash(
      str,
      opslimit,
      memlimit,
    );
  }

  late final _crypto_pwhash_scryptsalsa208sha256_str_needs_rehash_ptr = _lookup<
          ffi.NativeFunction<
              _c_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash>>(
      'crypto_pwhash_scryptsalsa208sha256_str_needs_rehash');
  late final _dart_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash
      _crypto_pwhash_scryptsalsa208sha256_str_needs_rehash =
      _crypto_pwhash_scryptsalsa208sha256_str_needs_rehash_ptr.asFunction<
          _dart_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash>();

  int crypto_stream_salsa2012_keybytes() {
    return _crypto_stream_salsa2012_keybytes();
  }

  late final _crypto_stream_salsa2012_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa2012_keybytes>>(
          'crypto_stream_salsa2012_keybytes');
  late final _dart_crypto_stream_salsa2012_keybytes
      _crypto_stream_salsa2012_keybytes = _crypto_stream_salsa2012_keybytes_ptr
          .asFunction<_dart_crypto_stream_salsa2012_keybytes>();

  int crypto_stream_salsa2012_noncebytes() {
    return _crypto_stream_salsa2012_noncebytes();
  }

  late final _crypto_stream_salsa2012_noncebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa2012_noncebytes>>(
          'crypto_stream_salsa2012_noncebytes');
  late final _dart_crypto_stream_salsa2012_noncebytes
      _crypto_stream_salsa2012_noncebytes =
      _crypto_stream_salsa2012_noncebytes_ptr
          .asFunction<_dart_crypto_stream_salsa2012_noncebytes>();

  int crypto_stream_salsa2012_messagebytes_max() {
    return _crypto_stream_salsa2012_messagebytes_max();
  }

  late final _crypto_stream_salsa2012_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa2012_messagebytes_max>>(
          'crypto_stream_salsa2012_messagebytes_max');
  late final _dart_crypto_stream_salsa2012_messagebytes_max
      _crypto_stream_salsa2012_messagebytes_max =
      _crypto_stream_salsa2012_messagebytes_max_ptr
          .asFunction<_dart_crypto_stream_salsa2012_messagebytes_max>();

  int crypto_stream_salsa2012(
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_salsa2012(
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_stream_salsa2012_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa2012>>(
          'crypto_stream_salsa2012');
  late final _dart_crypto_stream_salsa2012 _crypto_stream_salsa2012 =
      _crypto_stream_salsa2012_ptr.asFunction<_dart_crypto_stream_salsa2012>();

  int crypto_stream_salsa2012_xor(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_salsa2012_xor(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_stream_salsa2012_xor_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa2012_xor>>(
          'crypto_stream_salsa2012_xor');
  late final _dart_crypto_stream_salsa2012_xor _crypto_stream_salsa2012_xor =
      _crypto_stream_salsa2012_xor_ptr
          .asFunction<_dart_crypto_stream_salsa2012_xor>();

  void crypto_stream_salsa2012_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_salsa2012_keygen(
      k,
    );
  }

  late final _crypto_stream_salsa2012_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa2012_keygen>>(
          'crypto_stream_salsa2012_keygen');
  late final _dart_crypto_stream_salsa2012_keygen
      _crypto_stream_salsa2012_keygen = _crypto_stream_salsa2012_keygen_ptr
          .asFunction<_dart_crypto_stream_salsa2012_keygen>();

  int crypto_stream_salsa208_keybytes() {
    return _crypto_stream_salsa208_keybytes();
  }

  late final _crypto_stream_salsa208_keybytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa208_keybytes>>(
          'crypto_stream_salsa208_keybytes');
  late final _dart_crypto_stream_salsa208_keybytes
      _crypto_stream_salsa208_keybytes = _crypto_stream_salsa208_keybytes_ptr
          .asFunction<_dart_crypto_stream_salsa208_keybytes>();

  int crypto_stream_salsa208_noncebytes() {
    return _crypto_stream_salsa208_noncebytes();
  }

  late final _crypto_stream_salsa208_noncebytes_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa208_noncebytes>>(
          'crypto_stream_salsa208_noncebytes');
  late final _dart_crypto_stream_salsa208_noncebytes
      _crypto_stream_salsa208_noncebytes =
      _crypto_stream_salsa208_noncebytes_ptr
          .asFunction<_dart_crypto_stream_salsa208_noncebytes>();

  int crypto_stream_salsa208_messagebytes_max() {
    return _crypto_stream_salsa208_messagebytes_max();
  }

  late final _crypto_stream_salsa208_messagebytes_max_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa208_messagebytes_max>>(
          'crypto_stream_salsa208_messagebytes_max');
  late final _dart_crypto_stream_salsa208_messagebytes_max
      _crypto_stream_salsa208_messagebytes_max =
      _crypto_stream_salsa208_messagebytes_max_ptr
          .asFunction<_dart_crypto_stream_salsa208_messagebytes_max>();

  int crypto_stream_salsa208(
    ffi.Pointer<ffi.Uint8> c,
    int clen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_salsa208(
      c,
      clen,
      n,
      k,
    );
  }

  late final _crypto_stream_salsa208_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa208>>(
          'crypto_stream_salsa208');
  late final _dart_crypto_stream_salsa208 _crypto_stream_salsa208 =
      _crypto_stream_salsa208_ptr.asFunction<_dart_crypto_stream_salsa208>();

  int crypto_stream_salsa208_xor(
    ffi.Pointer<ffi.Uint8> c,
    ffi.Pointer<ffi.Uint8> m,
    int mlen,
    ffi.Pointer<ffi.Uint8> n,
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_salsa208_xor(
      c,
      m,
      mlen,
      n,
      k,
    );
  }

  late final _crypto_stream_salsa208_xor_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa208_xor>>(
          'crypto_stream_salsa208_xor');
  late final _dart_crypto_stream_salsa208_xor _crypto_stream_salsa208_xor =
      _crypto_stream_salsa208_xor_ptr
          .asFunction<_dart_crypto_stream_salsa208_xor>();

  void crypto_stream_salsa208_keygen(
    ffi.Pointer<ffi.Uint8> k,
  ) {
    return _crypto_stream_salsa208_keygen(
      k,
    );
  }

  late final _crypto_stream_salsa208_keygen_ptr =
      _lookup<ffi.NativeFunction<_c_crypto_stream_salsa208_keygen>>(
          'crypto_stream_salsa208_keygen');
  late final _dart_crypto_stream_salsa208_keygen
      _crypto_stream_salsa208_keygen = _crypto_stream_salsa208_keygen_ptr
          .asFunction<_dart_crypto_stream_salsa208_keygen>();
}

class max_align_t extends ffi.Opaque {}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

class crypto_aead_aes256gcm_state extends ffi.Struct {
  @ffi.Array.multi([512])
  external ffi.Array<ffi.Uint8> opaque;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> __val;
}

class timeval extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_usec;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int64> __fds_bits;
}

class __pthread_list_t extends ffi.Struct {
  external ffi.Pointer<__pthread_list_t> __prev;

  external ffi.Pointer<__pthread_list_t> __next;
}

class __pthread_slist_t extends ffi.Struct {
  external ffi.Pointer<__pthread_slist_t> __next;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __count;

  @ffi.Int32()
  external int __owner;

  @ffi.Uint32()
  external int __nusers;

  @ffi.Int32()
  external int __kind;

  @ffi.Int16()
  external int __spins;

  @ffi.Int16()
  external int __elision;

  external __pthread_list_t __list;
}

class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.Uint32()
  external int __readers;

  @ffi.Uint32()
  external int __writers;

  @ffi.Uint32()
  external int __wrphase_futex;

  @ffi.Uint32()
  external int __writers_futex;

  @ffi.Uint32()
  external int __pad3;

  @ffi.Uint32()
  external int __pad4;

  @ffi.Int32()
  external int __cur_writer;

  @ffi.Int32()
  external int __shared;

  @ffi.Int8()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint8> __pad1;

  @ffi.Uint64()
  external int __pad2;

  @ffi.Uint32()
  external int __flags;
}

class __pthread_cond_s extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_size;

  @ffi.Uint32()
  external int __g1_orig_size;

  @ffi.Uint32()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_signals;
}

class __once_flag extends ffi.Struct {
  @ffi.Int32()
  external int __data;
}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  external int rand_type;

  @ffi.Int32()
  external int rand_deg;

  @ffi.Int32()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __old_x;

  @ffi.Uint16()
  external int __c;

  @ffi.Uint16()
  external int __init;

  @ffi.Uint64()
  external int __a;
}

class crypto_hash_sha512_state extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint64> state;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint64> count;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> buf;
}

class crypto_auth_hmacsha512_state extends ffi.Struct {
  external crypto_hash_sha512_state ictx;

  external crypto_hash_sha512_state octx;
}

class crypto_hash_sha256_state extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> state;

  @ffi.Uint64()
  external int count;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> buf;
}

class crypto_auth_hmacsha256_state extends ffi.Struct {
  external crypto_hash_sha256_state ictx;

  external crypto_hash_sha256_state octx;
}

class crypto_generichash_blake2b_state extends ffi.Struct {
  @ffi.Array.multi([384])
  external ffi.Array<ffi.Uint8> opaque;
}

class __mbstate_t extends ffi.Opaque {}

class __fpos_t extends ffi.Opaque {}

class __fpos64_t extends ffi.Opaque {}

class _IO_marker extends ffi.Opaque {}

class _IO_codecvt extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

class _IO_FILE extends ffi.Struct {
  @ffi.Int32()
  external int _flags;

  external ffi.Pointer<ffi.Int8> _IO_read_ptr;

  external ffi.Pointer<ffi.Int8> _IO_read_end;

  external ffi.Pointer<ffi.Int8> _IO_read_base;

  external ffi.Pointer<ffi.Int8> _IO_write_base;

  external ffi.Pointer<ffi.Int8> _IO_write_ptr;

  external ffi.Pointer<ffi.Int8> _IO_write_end;

  external ffi.Pointer<ffi.Int8> _IO_buf_base;

  external ffi.Pointer<ffi.Int8> _IO_buf_end;

  external ffi.Pointer<ffi.Int8> _IO_save_base;

  external ffi.Pointer<ffi.Int8> _IO_backup_base;

  external ffi.Pointer<ffi.Int8> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int32()
  external int _fileno;

  @ffi.Int32()
  external int _flags2;

  @ffi.Int64()
  external int _old_offset;

  @ffi.Uint16()
  external int _cur_column;

  @ffi.Int8()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Int8> _shortbuf;

  external ffi.Pointer<ffi.Void> _lock;

  @ffi.Int64()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Uint64()
  external int __pad5;

  @ffi.Int32()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Int8> _unused2;
}

class crypto_onetimeauth_poly1305_state extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Uint8> opaque;
}

class crypto_secretstream_xchacha20poly1305_state extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> k;

  @ffi.Array.multi([12])
  external ffi.Array<ffi.Uint8> nonce;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> _pad;
}

class crypto_sign_ed25519ph_state extends ffi.Struct {
  external crypto_hash_sha512_state hs;
}

class randombytes_implementation extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_2>> implementation_name;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> random;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_4>> stir;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_5>> uniform;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_6>> buf;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_7>> close;
}

const int NULL = 0;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 33;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _LIBC_LIMITS_H_ = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int PTHREAD_STACK_MIN = 16384;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int SCHAR_MAX = 127;

const int SHRT_MAX = 32767;

const int INT_MAX = 2147483647;

const int LONG_MAX = 9223372036854775807;

const int SCHAR_MIN = -128;

const int SHRT_MIN = -32768;

const int INT_MIN = -2147483648;

const int LONG_MIN = -9223372036854775808;

const int UCHAR_MAX = 255;

const int USHRT_MAX = 65535;

const int UINT_MAX = 4294967295;

const int ULONG_MAX = -1;

const int CHAR_BIT = 8;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int SODIUM_SIZE_MAX = -1;

const String SODIUM_VERSION_STRING = '1.0.18';

const int SODIUM_LIBRARY_VERSION_MAJOR = 10;

const int SODIUM_LIBRARY_VERSION_MINOR = 3;

const int crypto_aead_aes256gcm_KEYBYTES = 32;

const int crypto_aead_aes256gcm_NSECBYTES = 0;

const int crypto_aead_aes256gcm_NPUBBYTES = 12;

const int crypto_aead_aes256gcm_ABYTES = 16;

const int crypto_aead_aes256gcm_MESSAGEBYTES_MAX = 68719476704;

const int crypto_aead_chacha20poly1305_ietf_KEYBYTES = 32;

const int crypto_aead_chacha20poly1305_ietf_NSECBYTES = 0;

const int crypto_aead_chacha20poly1305_ietf_NPUBBYTES = 12;

const int crypto_aead_chacha20poly1305_ietf_ABYTES = 16;

const int crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = 274877906880;

const int crypto_aead_chacha20poly1305_KEYBYTES = 32;

const int crypto_aead_chacha20poly1305_NSECBYTES = 0;

const int crypto_aead_chacha20poly1305_NPUBBYTES = 8;

const int crypto_aead_chacha20poly1305_ABYTES = 16;

const int crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX = -17;

const int crypto_aead_chacha20poly1305_IETF_KEYBYTES = 32;

const int crypto_aead_chacha20poly1305_IETF_NSECBYTES = 0;

const int crypto_aead_chacha20poly1305_IETF_NPUBBYTES = 12;

const int crypto_aead_chacha20poly1305_IETF_ABYTES = 16;

const int crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX = 274877906880;

const int crypto_aead_xchacha20poly1305_ietf_KEYBYTES = 32;

const int crypto_aead_xchacha20poly1305_ietf_NSECBYTES = 0;

const int crypto_aead_xchacha20poly1305_ietf_NPUBBYTES = 24;

const int crypto_aead_xchacha20poly1305_ietf_ABYTES = 16;

const int crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX = -17;

const int crypto_aead_xchacha20poly1305_IETF_KEYBYTES = 32;

const int crypto_aead_xchacha20poly1305_IETF_NSECBYTES = 0;

const int crypto_aead_xchacha20poly1305_IETF_NPUBBYTES = 24;

const int crypto_aead_xchacha20poly1305_IETF_ABYTES = 16;

const int crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX = -17;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;

const int crypto_hash_sha512_BYTES = 64;

const int crypto_auth_hmacsha512_BYTES = 64;

const int crypto_auth_hmacsha512_KEYBYTES = 32;

const int crypto_auth_hmacsha512256_BYTES = 32;

const int crypto_auth_hmacsha512256_KEYBYTES = 32;

const int crypto_auth_BYTES = 32;

const int crypto_auth_KEYBYTES = 32;

const String crypto_auth_PRIMITIVE = 'hmacsha512256';

const int crypto_hash_sha256_BYTES = 32;

const int crypto_auth_hmacsha256_BYTES = 32;

const int crypto_auth_hmacsha256_KEYBYTES = 32;

const int crypto_stream_xsalsa20_KEYBYTES = 32;

const int crypto_stream_xsalsa20_NONCEBYTES = 24;

const int crypto_stream_xsalsa20_MESSAGEBYTES_MAX = -1;

const int crypto_box_curve25519xsalsa20poly1305_SEEDBYTES = 32;

const int crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES = 32;

const int crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES = 32;

const int crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES = 32;

const int crypto_box_curve25519xsalsa20poly1305_NONCEBYTES = 24;

const int crypto_box_curve25519xsalsa20poly1305_MACBYTES = 16;

const int crypto_box_curve25519xsalsa20poly1305_MESSAGEBYTES_MAX = -17;

const int crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES = 16;

const int crypto_box_curve25519xsalsa20poly1305_ZEROBYTES = 32;

const int crypto_box_SEEDBYTES = 32;

const int crypto_box_PUBLICKEYBYTES = 32;

const int crypto_box_SECRETKEYBYTES = 32;

const int crypto_box_NONCEBYTES = 24;

const int crypto_box_MACBYTES = 16;

const int crypto_box_MESSAGEBYTES_MAX = -17;

const String crypto_box_PRIMITIVE = 'curve25519xsalsa20poly1305';

const int crypto_box_BEFORENMBYTES = 32;

const int crypto_box_SEALBYTES = 48;

const int crypto_box_ZEROBYTES = 32;

const int crypto_box_BOXZEROBYTES = 16;

const int crypto_core_hsalsa20_OUTPUTBYTES = 32;

const int crypto_core_hsalsa20_INPUTBYTES = 16;

const int crypto_core_hsalsa20_KEYBYTES = 32;

const int crypto_core_hsalsa20_CONSTBYTES = 16;

const int crypto_core_hchacha20_OUTPUTBYTES = 32;

const int crypto_core_hchacha20_INPUTBYTES = 16;

const int crypto_core_hchacha20_KEYBYTES = 32;

const int crypto_core_hchacha20_CONSTBYTES = 16;

const int crypto_core_salsa20_OUTPUTBYTES = 64;

const int crypto_core_salsa20_INPUTBYTES = 16;

const int crypto_core_salsa20_KEYBYTES = 32;

const int crypto_core_salsa20_CONSTBYTES = 16;

const int crypto_core_salsa2012_OUTPUTBYTES = 64;

const int crypto_core_salsa2012_INPUTBYTES = 16;

const int crypto_core_salsa2012_KEYBYTES = 32;

const int crypto_core_salsa2012_CONSTBYTES = 16;

const int crypto_core_salsa208_OUTPUTBYTES = 64;

const int crypto_core_salsa208_INPUTBYTES = 16;

const int crypto_core_salsa208_KEYBYTES = 32;

const int crypto_core_salsa208_CONSTBYTES = 16;

const int crypto_generichash_blake2b_BYTES_MIN = 16;

const int crypto_generichash_blake2b_BYTES_MAX = 64;

const int crypto_generichash_blake2b_BYTES = 32;

const int crypto_generichash_blake2b_KEYBYTES_MIN = 16;

const int crypto_generichash_blake2b_KEYBYTES_MAX = 64;

const int crypto_generichash_blake2b_KEYBYTES = 32;

const int crypto_generichash_blake2b_SALTBYTES = 16;

const int crypto_generichash_blake2b_PERSONALBYTES = 16;

const int crypto_generichash_BYTES_MIN = 16;

const int crypto_generichash_BYTES_MAX = 64;

const int crypto_generichash_BYTES = 32;

const int crypto_generichash_KEYBYTES_MIN = 16;

const int crypto_generichash_KEYBYTES_MAX = 64;

const int crypto_generichash_KEYBYTES = 32;

const String crypto_generichash_PRIMITIVE = 'blake2b';

const int crypto_hash_BYTES = 64;

const String crypto_hash_PRIMITIVE = 'sha512';

const int crypto_kdf_blake2b_BYTES_MIN = 16;

const int crypto_kdf_blake2b_BYTES_MAX = 64;

const int crypto_kdf_blake2b_CONTEXTBYTES = 8;

const int crypto_kdf_blake2b_KEYBYTES = 32;

const int crypto_kdf_BYTES_MIN = 16;

const int crypto_kdf_BYTES_MAX = 64;

const int crypto_kdf_CONTEXTBYTES = 8;

const int crypto_kdf_KEYBYTES = 32;

const String crypto_kdf_PRIMITIVE = 'blake2b';

const int crypto_kx_PUBLICKEYBYTES = 32;

const int crypto_kx_SECRETKEYBYTES = 32;

const int crypto_kx_SEEDBYTES = 32;

const int crypto_kx_SESSIONKEYBYTES = 32;

const String crypto_kx_PRIMITIVE = 'x25519blake2b';

const int _STDIO_H = 1;

const int __GNUC_VA_LIST = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int crypto_onetimeauth_poly1305_BYTES = 16;

const int crypto_onetimeauth_poly1305_KEYBYTES = 32;

const int crypto_onetimeauth_BYTES = 16;

const int crypto_onetimeauth_KEYBYTES = 32;

const String crypto_onetimeauth_PRIMITIVE = 'poly1305';

const int crypto_pwhash_argon2i_ALG_ARGON2I13 = 1;

const int crypto_pwhash_argon2i_BYTES_MIN = 16;

const int crypto_pwhash_argon2i_BYTES_MAX = 4294967295;

const int crypto_pwhash_argon2i_PASSWD_MIN = 0;

const int crypto_pwhash_argon2i_PASSWD_MAX = 4294967295;

const int crypto_pwhash_argon2i_SALTBYTES = 16;

const int crypto_pwhash_argon2i_STRBYTES = 128;

const String crypto_pwhash_argon2i_STRPREFIX = '\$argon2i\$';

const int crypto_pwhash_argon2i_OPSLIMIT_MIN = 3;

const int crypto_pwhash_argon2i_OPSLIMIT_MAX = 4294967295;

const int crypto_pwhash_argon2i_MEMLIMIT_MIN = 8192;

const int crypto_pwhash_argon2i_MEMLIMIT_MAX = 4398046510080;

const int crypto_pwhash_argon2i_OPSLIMIT_INTERACTIVE = 4;

const int crypto_pwhash_argon2i_MEMLIMIT_INTERACTIVE = 33554432;

const int crypto_pwhash_argon2i_OPSLIMIT_MODERATE = 6;

const int crypto_pwhash_argon2i_MEMLIMIT_MODERATE = 134217728;

const int crypto_pwhash_argon2i_OPSLIMIT_SENSITIVE = 8;

const int crypto_pwhash_argon2i_MEMLIMIT_SENSITIVE = 536870912;

const int crypto_pwhash_argon2id_ALG_ARGON2ID13 = 2;

const int crypto_pwhash_argon2id_BYTES_MIN = 16;

const int crypto_pwhash_argon2id_BYTES_MAX = 4294967295;

const int crypto_pwhash_argon2id_PASSWD_MIN = 0;

const int crypto_pwhash_argon2id_PASSWD_MAX = 4294967295;

const int crypto_pwhash_argon2id_SALTBYTES = 16;

const int crypto_pwhash_argon2id_STRBYTES = 128;

const String crypto_pwhash_argon2id_STRPREFIX = '\$argon2id\$';

const int crypto_pwhash_argon2id_OPSLIMIT_MIN = 1;

const int crypto_pwhash_argon2id_OPSLIMIT_MAX = 4294967295;

const int crypto_pwhash_argon2id_MEMLIMIT_MIN = 8192;

const int crypto_pwhash_argon2id_MEMLIMIT_MAX = 4398046510080;

const int crypto_pwhash_argon2id_OPSLIMIT_INTERACTIVE = 2;

const int crypto_pwhash_argon2id_MEMLIMIT_INTERACTIVE = 67108864;

const int crypto_pwhash_argon2id_OPSLIMIT_MODERATE = 3;

const int crypto_pwhash_argon2id_MEMLIMIT_MODERATE = 268435456;

const int crypto_pwhash_argon2id_OPSLIMIT_SENSITIVE = 4;

const int crypto_pwhash_argon2id_MEMLIMIT_SENSITIVE = 1073741824;

const int crypto_pwhash_ALG_ARGON2I13 = 1;

const int crypto_pwhash_ALG_ARGON2ID13 = 2;

const int crypto_pwhash_ALG_DEFAULT = 2;

const int crypto_pwhash_BYTES_MIN = 16;

const int crypto_pwhash_BYTES_MAX = 4294967295;

const int crypto_pwhash_PASSWD_MIN = 0;

const int crypto_pwhash_PASSWD_MAX = 4294967295;

const int crypto_pwhash_SALTBYTES = 16;

const int crypto_pwhash_STRBYTES = 128;

const String crypto_pwhash_STRPREFIX = '\$argon2id\$';

const int crypto_pwhash_OPSLIMIT_MIN = 1;

const int crypto_pwhash_OPSLIMIT_MAX = 4294967295;

const int crypto_pwhash_MEMLIMIT_MIN = 8192;

const int crypto_pwhash_MEMLIMIT_MAX = 4398046510080;

const int crypto_pwhash_OPSLIMIT_INTERACTIVE = 2;

const int crypto_pwhash_MEMLIMIT_INTERACTIVE = 67108864;

const int crypto_pwhash_OPSLIMIT_MODERATE = 3;

const int crypto_pwhash_MEMLIMIT_MODERATE = 268435456;

const int crypto_pwhash_OPSLIMIT_SENSITIVE = 4;

const int crypto_pwhash_MEMLIMIT_SENSITIVE = 1073741824;

const String crypto_pwhash_PRIMITIVE = 'argon2i';

const int crypto_scalarmult_curve25519_BYTES = 32;

const int crypto_scalarmult_curve25519_SCALARBYTES = 32;

const int crypto_scalarmult_BYTES = 32;

const int crypto_scalarmult_SCALARBYTES = 32;

const String crypto_scalarmult_PRIMITIVE = 'curve25519';

const int crypto_secretbox_xsalsa20poly1305_KEYBYTES = 32;

const int crypto_secretbox_xsalsa20poly1305_NONCEBYTES = 24;

const int crypto_secretbox_xsalsa20poly1305_MACBYTES = 16;

const int crypto_secretbox_xsalsa20poly1305_MESSAGEBYTES_MAX = -17;

const int crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES = 16;

const int crypto_secretbox_xsalsa20poly1305_ZEROBYTES = 32;

const int crypto_secretbox_KEYBYTES = 32;

const int crypto_secretbox_NONCEBYTES = 24;

const int crypto_secretbox_MACBYTES = 16;

const String crypto_secretbox_PRIMITIVE = 'xsalsa20poly1305';

const int crypto_secretbox_MESSAGEBYTES_MAX = -17;

const int crypto_secretbox_ZEROBYTES = 32;

const int crypto_secretbox_BOXZEROBYTES = 16;

const int crypto_stream_chacha20_KEYBYTES = 32;

const int crypto_stream_chacha20_NONCEBYTES = 8;

const int crypto_stream_chacha20_MESSAGEBYTES_MAX = -1;

const int crypto_stream_chacha20_ietf_KEYBYTES = 32;

const int crypto_stream_chacha20_ietf_NONCEBYTES = 12;

const int crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX = 274877906944;

const int crypto_stream_chacha20_IETF_KEYBYTES = 32;

const int crypto_stream_chacha20_IETF_NONCEBYTES = 12;

const int crypto_stream_chacha20_IETF_MESSAGEBYTES_MAX = 274877906944;

const int crypto_secretstream_xchacha20poly1305_ABYTES = 17;

const int crypto_secretstream_xchacha20poly1305_HEADERBYTES = 24;

const int crypto_secretstream_xchacha20poly1305_KEYBYTES = 32;

const int crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX = 274877906816;

const int crypto_secretstream_xchacha20poly1305_TAG_MESSAGE = 0;

const int crypto_secretstream_xchacha20poly1305_TAG_PUSH = 1;

const int crypto_secretstream_xchacha20poly1305_TAG_REKEY = 2;

const int crypto_secretstream_xchacha20poly1305_TAG_FINAL = 3;

const int crypto_shorthash_siphash24_BYTES = 8;

const int crypto_shorthash_siphash24_KEYBYTES = 16;

const int crypto_shorthash_siphashx24_BYTES = 16;

const int crypto_shorthash_siphashx24_KEYBYTES = 16;

const int crypto_shorthash_BYTES = 8;

const int crypto_shorthash_KEYBYTES = 16;

const String crypto_shorthash_PRIMITIVE = 'siphash24';

const int crypto_sign_ed25519_BYTES = 64;

const int crypto_sign_ed25519_SEEDBYTES = 32;

const int crypto_sign_ed25519_PUBLICKEYBYTES = 32;

const int crypto_sign_ed25519_SECRETKEYBYTES = 64;

const int crypto_sign_ed25519_MESSAGEBYTES_MAX = -65;

const int crypto_sign_BYTES = 64;

const int crypto_sign_SEEDBYTES = 32;

const int crypto_sign_PUBLICKEYBYTES = 32;

const int crypto_sign_SECRETKEYBYTES = 64;

const int crypto_sign_MESSAGEBYTES_MAX = -65;

const String crypto_sign_PRIMITIVE = 'ed25519';

const int crypto_stream_KEYBYTES = 32;

const int crypto_stream_NONCEBYTES = 24;

const int crypto_stream_MESSAGEBYTES_MAX = -1;

const String crypto_stream_PRIMITIVE = 'xsalsa20';

const int crypto_stream_salsa20_KEYBYTES = 32;

const int crypto_stream_salsa20_NONCEBYTES = 8;

const int crypto_stream_salsa20_MESSAGEBYTES_MAX = -1;

const int crypto_verify_16_BYTES = 16;

const int crypto_verify_32_BYTES = 32;

const int crypto_verify_64_BYTES = 64;

const int randombytes_BYTES_MAX = 4294967295;

const int randombytes_SEEDBYTES = 32;

const int sodium_base64_VARIANT_ORIGINAL = 1;

const int sodium_base64_VARIANT_ORIGINAL_NO_PADDING = 3;

const int sodium_base64_VARIANT_URLSAFE = 5;

const int sodium_base64_VARIANT_URLSAFE_NO_PADDING = 7;

const int crypto_stream_xchacha20_KEYBYTES = 32;

const int crypto_stream_xchacha20_NONCEBYTES = 24;

const int crypto_stream_xchacha20_MESSAGEBYTES_MAX = -1;

const int crypto_box_curve25519xchacha20poly1305_SEEDBYTES = 32;

const int crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES = 32;

const int crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES = 32;

const int crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES = 32;

const int crypto_box_curve25519xchacha20poly1305_NONCEBYTES = 24;

const int crypto_box_curve25519xchacha20poly1305_MACBYTES = 16;

const int crypto_box_curve25519xchacha20poly1305_MESSAGEBYTES_MAX = -17;

const int crypto_box_curve25519xchacha20poly1305_SEALBYTES = 48;

const int crypto_core_ed25519_BYTES = 32;

const int crypto_core_ed25519_UNIFORMBYTES = 32;

const int crypto_core_ed25519_HASHBYTES = 64;

const int crypto_core_ed25519_SCALARBYTES = 32;

const int crypto_core_ed25519_NONREDUCEDSCALARBYTES = 64;

const int crypto_core_ristretto255_BYTES = 32;

const int crypto_core_ristretto255_HASHBYTES = 64;

const int crypto_core_ristretto255_SCALARBYTES = 32;

const int crypto_core_ristretto255_NONREDUCEDSCALARBYTES = 64;

const int crypto_scalarmult_ed25519_BYTES = 32;

const int crypto_scalarmult_ed25519_SCALARBYTES = 32;

const int crypto_scalarmult_ristretto255_BYTES = 32;

const int crypto_scalarmult_ristretto255_SCALARBYTES = 32;

const int crypto_secretbox_xchacha20poly1305_KEYBYTES = 32;

const int crypto_secretbox_xchacha20poly1305_NONCEBYTES = 24;

const int crypto_secretbox_xchacha20poly1305_MACBYTES = 16;

const int crypto_secretbox_xchacha20poly1305_MESSAGEBYTES_MAX = -17;

const int crypto_pwhash_scryptsalsa208sha256_BYTES_MIN = 16;

const int crypto_pwhash_scryptsalsa208sha256_BYTES_MAX = 137438953440;

const int crypto_pwhash_scryptsalsa208sha256_PASSWD_MIN = 0;

const int crypto_pwhash_scryptsalsa208sha256_PASSWD_MAX = -1;

const int crypto_pwhash_scryptsalsa208sha256_SALTBYTES = 32;

const int crypto_pwhash_scryptsalsa208sha256_STRBYTES = 102;

const String crypto_pwhash_scryptsalsa208sha256_STRPREFIX = '\$7\$';

const int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN = 32768;

const int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX = 4294967295;

const int crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN = 16777216;

const int crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX = 68719476736;

const int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE = 524288;

const int crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE = 16777216;

const int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE = 33554432;

const int crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE = 1073741824;

const int crypto_stream_salsa2012_KEYBYTES = 32;

const int crypto_stream_salsa2012_NONCEBYTES = 8;

const int crypto_stream_salsa2012_MESSAGEBYTES_MAX = -1;

const int crypto_stream_salsa208_KEYBYTES = 32;

const int crypto_stream_salsa208_NONCEBYTES = 8;

const int crypto_stream_salsa208_MESSAGEBYTES_MAX = -1;

typedef _c_sodium_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _dart_sodium_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _c_sodium_library_version_major = ffi.Int32 Function();

typedef _dart_sodium_library_version_major = int Function();

typedef _c_sodium_library_version_minor = ffi.Int32 Function();

typedef _dart_sodium_library_version_minor = int Function();

typedef _c_sodium_library_minimal = ffi.Int32 Function();

typedef _dart_sodium_library_minimal = int Function();

typedef _c_sodium_init = ffi.Int32 Function();

typedef _dart_sodium_init = int Function();

typedef _typedefC_1 = ffi.Void Function();

typedef _c_sodium_set_misuse_handler = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> handler,
);

typedef _dart_sodium_set_misuse_handler = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> handler,
);

typedef _c_sodium_misuse = ffi.Void Function();

typedef _dart_sodium_misuse = void Function();

typedef _c_crypto_aead_aes256gcm_is_available = ffi.Int32 Function();

typedef _dart_crypto_aead_aes256gcm_is_available = int Function();

typedef _c_crypto_aead_aes256gcm_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_aes256gcm_keybytes = int Function();

typedef _c_crypto_aead_aes256gcm_nsecbytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_aes256gcm_nsecbytes = int Function();

typedef _c_crypto_aead_aes256gcm_npubbytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_aes256gcm_npubbytes = int Function();

typedef _c_crypto_aead_aes256gcm_abytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_aes256gcm_abytes = int Function();

typedef _c_crypto_aead_aes256gcm_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_aead_aes256gcm_messagebytes_max = int Function();

typedef _c_crypto_aead_aes256gcm_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_aes256gcm_statebytes = int Function();

typedef _c_crypto_aead_aes256gcm_encrypt = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_aes256gcm_encrypt = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_aes256gcm_decrypt = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_aes256gcm_decrypt = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_aes256gcm_encrypt_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint64> maclen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_aes256gcm_encrypt_detached = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint64> maclen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_aes256gcm_decrypt_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_aes256gcm_decrypt_detached = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_aes256gcm_beforenm = ffi.Int32 Function(
  ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_aes256gcm_beforenm = int Function(
  ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_aes256gcm_encrypt_afternm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
);

typedef _dart_crypto_aead_aes256gcm_encrypt_afternm = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
);

typedef _c_crypto_aead_aes256gcm_decrypt_afternm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
);

typedef _dart_crypto_aead_aes256gcm_decrypt_afternm = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
);

typedef _c_crypto_aead_aes256gcm_encrypt_detached_afternm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint64> maclen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
);

typedef _dart_crypto_aead_aes256gcm_encrypt_detached_afternm = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint64> maclen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
);

typedef _c_crypto_aead_aes256gcm_decrypt_detached_afternm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
);

typedef _dart_crypto_aead_aes256gcm_decrypt_detached_afternm = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<crypto_aead_aes256gcm_state> ctx_,
);

typedef _c_crypto_aead_aes256gcm_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_aes256gcm_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_chacha20poly1305_ietf_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_chacha20poly1305_ietf_keybytes = int Function();

typedef _c_crypto_aead_chacha20poly1305_ietf_nsecbytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_chacha20poly1305_ietf_nsecbytes = int Function();

typedef _c_crypto_aead_chacha20poly1305_ietf_npubbytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_chacha20poly1305_ietf_npubbytes = int Function();

typedef _c_crypto_aead_chacha20poly1305_ietf_abytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_chacha20poly1305_ietf_abytes = int Function();

typedef _c_crypto_aead_chacha20poly1305_ietf_messagebytes_max = ffi.Uint64
    Function();

typedef _dart_crypto_aead_chacha20poly1305_ietf_messagebytes_max = int
    Function();

typedef _c_crypto_aead_chacha20poly1305_ietf_encrypt = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_chacha20poly1305_ietf_encrypt = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_chacha20poly1305_ietf_decrypt = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_chacha20poly1305_ietf_decrypt = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_chacha20poly1305_ietf_encrypt_detached = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint64> maclen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_chacha20poly1305_ietf_encrypt_detached = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint64> maclen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_chacha20poly1305_ietf_decrypt_detached = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_chacha20poly1305_ietf_decrypt_detached = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_chacha20poly1305_ietf_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_chacha20poly1305_ietf_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_chacha20poly1305_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_chacha20poly1305_keybytes = int Function();

typedef _c_crypto_aead_chacha20poly1305_nsecbytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_chacha20poly1305_nsecbytes = int Function();

typedef _c_crypto_aead_chacha20poly1305_npubbytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_chacha20poly1305_npubbytes = int Function();

typedef _c_crypto_aead_chacha20poly1305_abytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_chacha20poly1305_abytes = int Function();

typedef _c_crypto_aead_chacha20poly1305_messagebytes_max = ffi.Uint64
    Function();

typedef _dart_crypto_aead_chacha20poly1305_messagebytes_max = int Function();

typedef _c_crypto_aead_chacha20poly1305_encrypt = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_chacha20poly1305_encrypt = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_chacha20poly1305_decrypt = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_chacha20poly1305_decrypt = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_chacha20poly1305_encrypt_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint64> maclen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_chacha20poly1305_encrypt_detached = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint64> maclen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_chacha20poly1305_decrypt_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_chacha20poly1305_decrypt_detached = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_chacha20poly1305_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_chacha20poly1305_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_xchacha20poly1305_ietf_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_xchacha20poly1305_ietf_keybytes = int Function();

typedef _c_crypto_aead_xchacha20poly1305_ietf_nsecbytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_xchacha20poly1305_ietf_nsecbytes = int Function();

typedef _c_crypto_aead_xchacha20poly1305_ietf_npubbytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_xchacha20poly1305_ietf_npubbytes = int Function();

typedef _c_crypto_aead_xchacha20poly1305_ietf_abytes = ffi.Uint64 Function();

typedef _dart_crypto_aead_xchacha20poly1305_ietf_abytes = int Function();

typedef _c_crypto_aead_xchacha20poly1305_ietf_messagebytes_max = ffi.Uint64
    Function();

typedef _dart_crypto_aead_xchacha20poly1305_ietf_messagebytes_max = int
    Function();

typedef _c_crypto_aead_xchacha20poly1305_ietf_encrypt = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_xchacha20poly1305_ietf_encrypt = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_xchacha20poly1305_ietf_decrypt = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_xchacha20poly1305_ietf_decrypt = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_xchacha20poly1305_ietf_encrypt_detached = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint64> maclen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_xchacha20poly1305_ietf_encrypt_detached = int
    Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint64> maclen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_xchacha20poly1305_ietf_decrypt_detached = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_xchacha20poly1305_ietf_decrypt_detached = int
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> nsec,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  ffi.Pointer<ffi.Uint8> npub,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_aead_xchacha20poly1305_ietf_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_aead_xchacha20poly1305_ietf_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_hash_sha512_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_hash_sha512_statebytes = int Function();

typedef _c_crypto_hash_sha512_bytes = ffi.Uint64 Function();

typedef _dart_crypto_hash_sha512_bytes = int Function();

typedef _c_crypto_hash_sha512 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_hash_sha512 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_hash_sha512_init = ffi.Int32 Function(
  ffi.Pointer<crypto_hash_sha512_state> state,
);

typedef _dart_crypto_hash_sha512_init = int Function(
  ffi.Pointer<crypto_hash_sha512_state> state,
);

typedef _c_crypto_hash_sha512_update = ffi.Int32 Function(
  ffi.Pointer<crypto_hash_sha512_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_hash_sha512_update = int Function(
  ffi.Pointer<crypto_hash_sha512_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_hash_sha512_final = ffi.Int32 Function(
  ffi.Pointer<crypto_hash_sha512_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _dart_crypto_hash_sha512_final = int Function(
  ffi.Pointer<crypto_hash_sha512_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _c_crypto_auth_hmacsha512_bytes = ffi.Uint64 Function();

typedef _dart_crypto_auth_hmacsha512_bytes = int Function();

typedef _c_crypto_auth_hmacsha512_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_auth_hmacsha512_keybytes = int Function();

typedef _c_crypto_auth_hmacsha512 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth_hmacsha512 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_auth_hmacsha512_verify = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth_hmacsha512_verify = int Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_auth_hmacsha512_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_auth_hmacsha512_statebytes = int Function();

typedef _c_crypto_auth_hmacsha512_init = ffi.Int32 Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> key,
  ffi.Uint64 keylen,
);

typedef _dart_crypto_auth_hmacsha512_init = int Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> key,
  int keylen,
);

typedef _c_crypto_auth_hmacsha512_update = ffi.Int32 Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_auth_hmacsha512_update = int Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_auth_hmacsha512_final = ffi.Int32 Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _dart_crypto_auth_hmacsha512_final = int Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _c_crypto_auth_hmacsha512_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth_hmacsha512_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_auth_hmacsha512256_bytes = ffi.Uint64 Function();

typedef _dart_crypto_auth_hmacsha512256_bytes = int Function();

typedef _c_crypto_auth_hmacsha512256_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_auth_hmacsha512256_keybytes = int Function();

typedef _c_crypto_auth_hmacsha512256 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth_hmacsha512256 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_auth_hmacsha512256_verify = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth_hmacsha512256_verify = int Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_auth_hmacsha512256_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_auth_hmacsha512256_statebytes = int Function();

typedef _c_crypto_auth_hmacsha512256_init = ffi.Int32 Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> key,
  ffi.Uint64 keylen,
);

typedef _dart_crypto_auth_hmacsha512256_init = int Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> key,
  int keylen,
);

typedef _c_crypto_auth_hmacsha512256_update = ffi.Int32 Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_auth_hmacsha512256_update = int Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_auth_hmacsha512256_final = ffi.Int32 Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _dart_crypto_auth_hmacsha512256_final = int Function(
  ffi.Pointer<crypto_auth_hmacsha512_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _c_crypto_auth_hmacsha512256_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth_hmacsha512256_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_auth_bytes = ffi.Uint64 Function();

typedef _dart_crypto_auth_bytes = int Function();

typedef _c_crypto_auth_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_auth_keybytes = int Function();

typedef _c_crypto_auth_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_auth_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_auth = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_auth_verify = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth_verify = int Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_auth_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_hash_sha256_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_hash_sha256_statebytes = int Function();

typedef _c_crypto_hash_sha256_bytes = ffi.Uint64 Function();

typedef _dart_crypto_hash_sha256_bytes = int Function();

typedef _c_crypto_hash_sha256 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_hash_sha256 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_hash_sha256_init = ffi.Int32 Function(
  ffi.Pointer<crypto_hash_sha256_state> state,
);

typedef _dart_crypto_hash_sha256_init = int Function(
  ffi.Pointer<crypto_hash_sha256_state> state,
);

typedef _c_crypto_hash_sha256_update = ffi.Int32 Function(
  ffi.Pointer<crypto_hash_sha256_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_hash_sha256_update = int Function(
  ffi.Pointer<crypto_hash_sha256_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_hash_sha256_final = ffi.Int32 Function(
  ffi.Pointer<crypto_hash_sha256_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _dart_crypto_hash_sha256_final = int Function(
  ffi.Pointer<crypto_hash_sha256_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _c_crypto_auth_hmacsha256_bytes = ffi.Uint64 Function();

typedef _dart_crypto_auth_hmacsha256_bytes = int Function();

typedef _c_crypto_auth_hmacsha256_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_auth_hmacsha256_keybytes = int Function();

typedef _c_crypto_auth_hmacsha256 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth_hmacsha256 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_auth_hmacsha256_verify = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth_hmacsha256_verify = int Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_auth_hmacsha256_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_auth_hmacsha256_statebytes = int Function();

typedef _c_crypto_auth_hmacsha256_init = ffi.Int32 Function(
  ffi.Pointer<crypto_auth_hmacsha256_state> state,
  ffi.Pointer<ffi.Uint8> key,
  ffi.Uint64 keylen,
);

typedef _dart_crypto_auth_hmacsha256_init = int Function(
  ffi.Pointer<crypto_auth_hmacsha256_state> state,
  ffi.Pointer<ffi.Uint8> key,
  int keylen,
);

typedef _c_crypto_auth_hmacsha256_update = ffi.Int32 Function(
  ffi.Pointer<crypto_auth_hmacsha256_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_auth_hmacsha256_update = int Function(
  ffi.Pointer<crypto_auth_hmacsha256_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_auth_hmacsha256_final = ffi.Int32 Function(
  ffi.Pointer<crypto_auth_hmacsha256_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _dart_crypto_auth_hmacsha256_final = int Function(
  ffi.Pointer<crypto_auth_hmacsha256_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _c_crypto_auth_hmacsha256_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_auth_hmacsha256_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_xsalsa20_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_xsalsa20_keybytes = int Function();

typedef _c_crypto_stream_xsalsa20_noncebytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_xsalsa20_noncebytes = int Function();

typedef _c_crypto_stream_xsalsa20_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_stream_xsalsa20_messagebytes_max = int Function();

typedef _c_crypto_stream_xsalsa20 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_xsalsa20 = int Function(
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_xsalsa20_xor = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_xsalsa20_xor = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_xsalsa20_xor_ic = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Uint64 ic,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_xsalsa20_xor_ic = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  int ic,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_xsalsa20_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_xsalsa20_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_curve25519xsalsa20poly1305_seedbytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xsalsa20poly1305_seedbytes = int Function();

typedef _c_crypto_box_curve25519xsalsa20poly1305_publickeybytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xsalsa20poly1305_publickeybytes = int
    Function();

typedef _c_crypto_box_curve25519xsalsa20poly1305_secretkeybytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xsalsa20poly1305_secretkeybytes = int
    Function();

typedef _c_crypto_box_curve25519xsalsa20poly1305_beforenmbytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xsalsa20poly1305_beforenmbytes = int
    Function();

typedef _c_crypto_box_curve25519xsalsa20poly1305_noncebytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xsalsa20poly1305_noncebytes = int Function();

typedef _c_crypto_box_curve25519xsalsa20poly1305_macbytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xsalsa20poly1305_macbytes = int Function();

typedef _c_crypto_box_curve25519xsalsa20poly1305_messagebytes_max = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xsalsa20poly1305_messagebytes_max = int
    Function();

typedef _c_crypto_box_curve25519xsalsa20poly1305_seed_keypair = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _dart_crypto_box_curve25519xsalsa20poly1305_seed_keypair = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _c_crypto_box_curve25519xsalsa20poly1305_keypair = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_curve25519xsalsa20poly1305_keypair = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_curve25519xsalsa20poly1305_beforenm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_curve25519xsalsa20poly1305_beforenm = int Function(
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_curve25519xsalsa20poly1305_boxzerobytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xsalsa20poly1305_boxzerobytes = int
    Function();

typedef _c_crypto_box_curve25519xsalsa20poly1305_zerobytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xsalsa20poly1305_zerobytes = int Function();

typedef _c_crypto_box_curve25519xsalsa20poly1305 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_curve25519xsalsa20poly1305 = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_curve25519xsalsa20poly1305_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_curve25519xsalsa20poly1305_open = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_curve25519xsalsa20poly1305_afternm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_curve25519xsalsa20poly1305_afternm = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_curve25519xsalsa20poly1305_open_afternm = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_curve25519xsalsa20poly1305_open_afternm = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_seedbytes = ffi.Uint64 Function();

typedef _dart_crypto_box_seedbytes = int Function();

typedef _c_crypto_box_publickeybytes = ffi.Uint64 Function();

typedef _dart_crypto_box_publickeybytes = int Function();

typedef _c_crypto_box_secretkeybytes = ffi.Uint64 Function();

typedef _dart_crypto_box_secretkeybytes = int Function();

typedef _c_crypto_box_noncebytes = ffi.Uint64 Function();

typedef _dart_crypto_box_noncebytes = int Function();

typedef _c_crypto_box_macbytes = ffi.Uint64 Function();

typedef _dart_crypto_box_macbytes = int Function();

typedef _c_crypto_box_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_box_messagebytes_max = int Function();

typedef _c_crypto_box_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_box_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_box_seed_keypair = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _dart_crypto_box_seed_keypair = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _c_crypto_box_keypair = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_keypair = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_easy = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_easy = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_open_easy = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_open_easy = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_detached = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_open_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_open_detached = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_beforenmbytes = ffi.Uint64 Function();

typedef _dart_crypto_box_beforenmbytes = int Function();

typedef _c_crypto_box_beforenm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_beforenm = int Function(
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_easy_afternm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_easy_afternm = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_open_easy_afternm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_open_easy_afternm = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_detached_afternm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_detached_afternm = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_open_detached_afternm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_open_detached_afternm = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_sealbytes = ffi.Uint64 Function();

typedef _dart_crypto_box_sealbytes = int Function();

typedef _c_crypto_box_seal = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _dart_crypto_box_seal = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _c_crypto_box_seal_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_seal_open = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_zerobytes = ffi.Uint64 Function();

typedef _dart_crypto_box_zerobytes = int Function();

typedef _c_crypto_box_boxzerobytes = ffi.Uint64 Function();

typedef _dart_crypto_box_boxzerobytes = int Function();

typedef _c_crypto_box = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_open = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_afternm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_afternm = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_open_afternm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_open_afternm = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_core_hsalsa20_outputbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_hsalsa20_outputbytes = int Function();

typedef _c_crypto_core_hsalsa20_inputbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_hsalsa20_inputbytes = int Function();

typedef _c_crypto_core_hsalsa20_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_core_hsalsa20_keybytes = int Function();

typedef _c_crypto_core_hsalsa20_constbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_hsalsa20_constbytes = int Function();

typedef _c_crypto_core_hsalsa20 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> c,
);

typedef _dart_crypto_core_hsalsa20 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> c,
);

typedef _c_crypto_core_hchacha20_outputbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_hchacha20_outputbytes = int Function();

typedef _c_crypto_core_hchacha20_inputbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_hchacha20_inputbytes = int Function();

typedef _c_crypto_core_hchacha20_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_core_hchacha20_keybytes = int Function();

typedef _c_crypto_core_hchacha20_constbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_hchacha20_constbytes = int Function();

typedef _c_crypto_core_hchacha20 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> c,
);

typedef _dart_crypto_core_hchacha20 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> c,
);

typedef _c_crypto_core_salsa20_outputbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa20_outputbytes = int Function();

typedef _c_crypto_core_salsa20_inputbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa20_inputbytes = int Function();

typedef _c_crypto_core_salsa20_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa20_keybytes = int Function();

typedef _c_crypto_core_salsa20_constbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa20_constbytes = int Function();

typedef _c_crypto_core_salsa20 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> c,
);

typedef _dart_crypto_core_salsa20 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> c,
);

typedef _c_crypto_core_salsa2012_outputbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa2012_outputbytes = int Function();

typedef _c_crypto_core_salsa2012_inputbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa2012_inputbytes = int Function();

typedef _c_crypto_core_salsa2012_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa2012_keybytes = int Function();

typedef _c_crypto_core_salsa2012_constbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa2012_constbytes = int Function();

typedef _c_crypto_core_salsa2012 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> c,
);

typedef _dart_crypto_core_salsa2012 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> c,
);

typedef _c_crypto_core_salsa208_outputbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa208_outputbytes = int Function();

typedef _c_crypto_core_salsa208_inputbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa208_inputbytes = int Function();

typedef _c_crypto_core_salsa208_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa208_keybytes = int Function();

typedef _c_crypto_core_salsa208_constbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_salsa208_constbytes = int Function();

typedef _c_crypto_core_salsa208 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> c,
);

typedef _dart_crypto_core_salsa208 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> c,
);

typedef _c_crypto_generichash_blake2b_bytes_min = ffi.Uint64 Function();

typedef _dart_crypto_generichash_blake2b_bytes_min = int Function();

typedef _c_crypto_generichash_blake2b_bytes_max = ffi.Uint64 Function();

typedef _dart_crypto_generichash_blake2b_bytes_max = int Function();

typedef _c_crypto_generichash_blake2b_bytes = ffi.Uint64 Function();

typedef _dart_crypto_generichash_blake2b_bytes = int Function();

typedef _c_crypto_generichash_blake2b_keybytes_min = ffi.Uint64 Function();

typedef _dart_crypto_generichash_blake2b_keybytes_min = int Function();

typedef _c_crypto_generichash_blake2b_keybytes_max = ffi.Uint64 Function();

typedef _dart_crypto_generichash_blake2b_keybytes_max = int Function();

typedef _c_crypto_generichash_blake2b_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_generichash_blake2b_keybytes = int Function();

typedef _c_crypto_generichash_blake2b_saltbytes = ffi.Uint64 Function();

typedef _dart_crypto_generichash_blake2b_saltbytes = int Function();

typedef _c_crypto_generichash_blake2b_personalbytes = ffi.Uint64 Function();

typedef _dart_crypto_generichash_blake2b_personalbytes = int Function();

typedef _c_crypto_generichash_blake2b_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_generichash_blake2b_statebytes = int Function();

typedef _c_crypto_generichash_blake2b = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 outlen,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> key,
  ffi.Uint64 keylen,
);

typedef _dart_crypto_generichash_blake2b = int Function(
  ffi.Pointer<ffi.Uint8> out,
  int outlen,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> key,
  int keylen,
);

typedef _c_crypto_generichash_blake2b_salt_personal = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 outlen,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> key,
  ffi.Uint64 keylen,
  ffi.Pointer<ffi.Uint8> salt,
  ffi.Pointer<ffi.Uint8> personal,
);

typedef _dart_crypto_generichash_blake2b_salt_personal = int Function(
  ffi.Pointer<ffi.Uint8> out,
  int outlen,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> key,
  int keylen,
  ffi.Pointer<ffi.Uint8> salt,
  ffi.Pointer<ffi.Uint8> personal,
);

typedef _c_crypto_generichash_blake2b_init = ffi.Int32 Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> key,
  ffi.Uint64 keylen,
  ffi.Uint64 outlen,
);

typedef _dart_crypto_generichash_blake2b_init = int Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> key,
  int keylen,
  int outlen,
);

typedef _c_crypto_generichash_blake2b_init_salt_personal = ffi.Int32 Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> key,
  ffi.Uint64 keylen,
  ffi.Uint64 outlen,
  ffi.Pointer<ffi.Uint8> salt,
  ffi.Pointer<ffi.Uint8> personal,
);

typedef _dart_crypto_generichash_blake2b_init_salt_personal = int Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> key,
  int keylen,
  int outlen,
  ffi.Pointer<ffi.Uint8> salt,
  ffi.Pointer<ffi.Uint8> personal,
);

typedef _c_crypto_generichash_blake2b_update = ffi.Int32 Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_generichash_blake2b_update = int Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_generichash_blake2b_final = ffi.Int32 Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 outlen,
);

typedef _dart_crypto_generichash_blake2b_final = int Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> out,
  int outlen,
);

typedef _c_crypto_generichash_blake2b_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_generichash_blake2b_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_generichash_bytes_min = ffi.Uint64 Function();

typedef _dart_crypto_generichash_bytes_min = int Function();

typedef _c_crypto_generichash_bytes_max = ffi.Uint64 Function();

typedef _dart_crypto_generichash_bytes_max = int Function();

typedef _c_crypto_generichash_bytes = ffi.Uint64 Function();

typedef _dart_crypto_generichash_bytes = int Function();

typedef _c_crypto_generichash_keybytes_min = ffi.Uint64 Function();

typedef _dart_crypto_generichash_keybytes_min = int Function();

typedef _c_crypto_generichash_keybytes_max = ffi.Uint64 Function();

typedef _dart_crypto_generichash_keybytes_max = int Function();

typedef _c_crypto_generichash_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_generichash_keybytes = int Function();

typedef _c_crypto_generichash_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_generichash_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_generichash_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_generichash_statebytes = int Function();

typedef _c_crypto_generichash = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 outlen,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> key,
  ffi.Uint64 keylen,
);

typedef _dart_crypto_generichash = int Function(
  ffi.Pointer<ffi.Uint8> out,
  int outlen,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> key,
  int keylen,
);

typedef _c_crypto_generichash_init = ffi.Int32 Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> key,
  ffi.Uint64 keylen,
  ffi.Uint64 outlen,
);

typedef _dart_crypto_generichash_init = int Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> key,
  int keylen,
  int outlen,
);

typedef _c_crypto_generichash_update = ffi.Int32 Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_generichash_update = int Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_generichash_final = ffi.Int32 Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 outlen,
);

typedef _dart_crypto_generichash_final = int Function(
  ffi.Pointer<crypto_generichash_blake2b_state> state,
  ffi.Pointer<ffi.Uint8> out,
  int outlen,
);

typedef _c_crypto_generichash_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_generichash_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_hash_bytes = ffi.Uint64 Function();

typedef _dart_crypto_hash_bytes = int Function();

typedef _c_crypto_hash = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_hash = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_hash_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_hash_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_kdf_blake2b_bytes_min = ffi.Uint64 Function();

typedef _dart_crypto_kdf_blake2b_bytes_min = int Function();

typedef _c_crypto_kdf_blake2b_bytes_max = ffi.Uint64 Function();

typedef _dart_crypto_kdf_blake2b_bytes_max = int Function();

typedef _c_crypto_kdf_blake2b_contextbytes = ffi.Uint64 Function();

typedef _dart_crypto_kdf_blake2b_contextbytes = int Function();

typedef _c_crypto_kdf_blake2b_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_kdf_blake2b_keybytes = int Function();

typedef _c_crypto_kdf_blake2b_derive_from_key = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> subkey,
  ffi.Uint64 subkey_len,
  ffi.Uint64 subkey_id,
  ffi.Pointer<ffi.Int8> ctx,
  ffi.Pointer<ffi.Uint8> key,
);

typedef _dart_crypto_kdf_blake2b_derive_from_key = int Function(
  ffi.Pointer<ffi.Uint8> subkey,
  int subkey_len,
  int subkey_id,
  ffi.Pointer<ffi.Int8> ctx,
  ffi.Pointer<ffi.Uint8> key,
);

typedef _c_crypto_kdf_bytes_min = ffi.Uint64 Function();

typedef _dart_crypto_kdf_bytes_min = int Function();

typedef _c_crypto_kdf_bytes_max = ffi.Uint64 Function();

typedef _dart_crypto_kdf_bytes_max = int Function();

typedef _c_crypto_kdf_contextbytes = ffi.Uint64 Function();

typedef _dart_crypto_kdf_contextbytes = int Function();

typedef _c_crypto_kdf_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_kdf_keybytes = int Function();

typedef _c_crypto_kdf_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_kdf_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_kdf_derive_from_key = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> subkey,
  ffi.Uint64 subkey_len,
  ffi.Uint64 subkey_id,
  ffi.Pointer<ffi.Int8> ctx,
  ffi.Pointer<ffi.Uint8> key,
);

typedef _dart_crypto_kdf_derive_from_key = int Function(
  ffi.Pointer<ffi.Uint8> subkey,
  int subkey_len,
  int subkey_id,
  ffi.Pointer<ffi.Int8> ctx,
  ffi.Pointer<ffi.Uint8> key,
);

typedef _c_crypto_kdf_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_kdf_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_kx_publickeybytes = ffi.Uint64 Function();

typedef _dart_crypto_kx_publickeybytes = int Function();

typedef _c_crypto_kx_secretkeybytes = ffi.Uint64 Function();

typedef _dart_crypto_kx_secretkeybytes = int Function();

typedef _c_crypto_kx_seedbytes = ffi.Uint64 Function();

typedef _dart_crypto_kx_seedbytes = int Function();

typedef _c_crypto_kx_sessionkeybytes = ffi.Uint64 Function();

typedef _dart_crypto_kx_sessionkeybytes = int Function();

typedef _c_crypto_kx_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_kx_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_kx_seed_keypair = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _dart_crypto_kx_seed_keypair = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _c_crypto_kx_keypair = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_kx_keypair = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_kx_client_session_keys = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> rx,
  ffi.Pointer<ffi.Uint8> tx,
  ffi.Pointer<ffi.Uint8> client_pk,
  ffi.Pointer<ffi.Uint8> client_sk,
  ffi.Pointer<ffi.Uint8> server_pk,
);

typedef _dart_crypto_kx_client_session_keys = int Function(
  ffi.Pointer<ffi.Uint8> rx,
  ffi.Pointer<ffi.Uint8> tx,
  ffi.Pointer<ffi.Uint8> client_pk,
  ffi.Pointer<ffi.Uint8> client_sk,
  ffi.Pointer<ffi.Uint8> server_pk,
);

typedef _c_crypto_kx_server_session_keys = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> rx,
  ffi.Pointer<ffi.Uint8> tx,
  ffi.Pointer<ffi.Uint8> server_pk,
  ffi.Pointer<ffi.Uint8> server_sk,
  ffi.Pointer<ffi.Uint8> client_pk,
);

typedef _dart_crypto_kx_server_session_keys = int Function(
  ffi.Pointer<ffi.Uint8> rx,
  ffi.Pointer<ffi.Uint8> tx,
  ffi.Pointer<ffi.Uint8> server_pk,
  ffi.Pointer<ffi.Uint8> server_sk,
  ffi.Pointer<ffi.Uint8> client_pk,
);

typedef _c_crypto_onetimeauth_poly1305_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_onetimeauth_poly1305_statebytes = int Function();

typedef _c_crypto_onetimeauth_poly1305_bytes = ffi.Uint64 Function();

typedef _dart_crypto_onetimeauth_poly1305_bytes = int Function();

typedef _c_crypto_onetimeauth_poly1305_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_onetimeauth_poly1305_keybytes = int Function();

typedef _c_crypto_onetimeauth_poly1305 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_onetimeauth_poly1305 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_onetimeauth_poly1305_verify = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_onetimeauth_poly1305_verify = int Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_onetimeauth_poly1305_init = ffi.Int32 Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> key,
);

typedef _dart_crypto_onetimeauth_poly1305_init = int Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> key,
);

typedef _c_crypto_onetimeauth_poly1305_update = ffi.Int32 Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_onetimeauth_poly1305_update = int Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_onetimeauth_poly1305_final = ffi.Int32 Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _dart_crypto_onetimeauth_poly1305_final = int Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _c_crypto_onetimeauth_poly1305_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_onetimeauth_poly1305_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_onetimeauth_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_onetimeauth_statebytes = int Function();

typedef _c_crypto_onetimeauth_bytes = ffi.Uint64 Function();

typedef _dart_crypto_onetimeauth_bytes = int Function();

typedef _c_crypto_onetimeauth_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_onetimeauth_keybytes = int Function();

typedef _c_crypto_onetimeauth_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_onetimeauth_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_onetimeauth = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_onetimeauth = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_onetimeauth_verify = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_onetimeauth_verify = int Function(
  ffi.Pointer<ffi.Uint8> h,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_onetimeauth_init = ffi.Int32 Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> key,
);

typedef _dart_crypto_onetimeauth_init = int Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> key,
);

typedef _c_crypto_onetimeauth_update = ffi.Int32 Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
);

typedef _dart_crypto_onetimeauth_update = int Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
);

typedef _c_crypto_onetimeauth_final = ffi.Int32 Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _dart_crypto_onetimeauth_final = int Function(
  ffi.Pointer<crypto_onetimeauth_poly1305_state> state,
  ffi.Pointer<ffi.Uint8> out,
);

typedef _c_crypto_onetimeauth_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_onetimeauth_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_pwhash_argon2i_alg_argon2i13 = ffi.Int32 Function();

typedef _dart_crypto_pwhash_argon2i_alg_argon2i13 = int Function();

typedef _c_crypto_pwhash_argon2i_bytes_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_bytes_min = int Function();

typedef _c_crypto_pwhash_argon2i_bytes_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_bytes_max = int Function();

typedef _c_crypto_pwhash_argon2i_passwd_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_passwd_min = int Function();

typedef _c_crypto_pwhash_argon2i_passwd_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_passwd_max = int Function();

typedef _c_crypto_pwhash_argon2i_saltbytes = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_saltbytes = int Function();

typedef _c_crypto_pwhash_argon2i_strbytes = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_strbytes = int Function();

typedef _c_crypto_pwhash_argon2i_strprefix = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_pwhash_argon2i_strprefix = ffi.Pointer<ffi.Int8>
    Function();

typedef _c_crypto_pwhash_argon2i_opslimit_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_opslimit_min = int Function();

typedef _c_crypto_pwhash_argon2i_opslimit_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_opslimit_max = int Function();

typedef _c_crypto_pwhash_argon2i_memlimit_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_memlimit_min = int Function();

typedef _c_crypto_pwhash_argon2i_memlimit_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_memlimit_max = int Function();

typedef _c_crypto_pwhash_argon2i_opslimit_interactive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_opslimit_interactive = int Function();

typedef _c_crypto_pwhash_argon2i_memlimit_interactive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_memlimit_interactive = int Function();

typedef _c_crypto_pwhash_argon2i_opslimit_moderate = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_opslimit_moderate = int Function();

typedef _c_crypto_pwhash_argon2i_memlimit_moderate = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_memlimit_moderate = int Function();

typedef _c_crypto_pwhash_argon2i_opslimit_sensitive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_opslimit_sensitive = int Function();

typedef _c_crypto_pwhash_argon2i_memlimit_sensitive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2i_memlimit_sensitive = int Function();

typedef _c_crypto_pwhash_argon2i = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 outlen,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
  ffi.Pointer<ffi.Uint8> salt,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
  ffi.Int32 alg,
);

typedef _dart_crypto_pwhash_argon2i = int Function(
  ffi.Pointer<ffi.Uint8> out,
  int outlen,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
  ffi.Pointer<ffi.Uint8> salt,
  int opslimit,
  int memlimit,
  int alg,
);

typedef _c_crypto_pwhash_argon2i_str = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> out,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
);

typedef _dart_crypto_pwhash_argon2i_str = int Function(
  ffi.Pointer<ffi.Int8> out,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
  int opslimit,
  int memlimit,
);

typedef _c_crypto_pwhash_argon2i_str_verify = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
);

typedef _dart_crypto_pwhash_argon2i_str_verify = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
);

typedef _c_crypto_pwhash_argon2i_str_needs_rehash = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
);

typedef _dart_crypto_pwhash_argon2i_str_needs_rehash = int Function(
  ffi.Pointer<ffi.Int8> str,
  int opslimit,
  int memlimit,
);

typedef _c_crypto_pwhash_argon2id_alg_argon2id13 = ffi.Int32 Function();

typedef _dart_crypto_pwhash_argon2id_alg_argon2id13 = int Function();

typedef _c_crypto_pwhash_argon2id_bytes_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_bytes_min = int Function();

typedef _c_crypto_pwhash_argon2id_bytes_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_bytes_max = int Function();

typedef _c_crypto_pwhash_argon2id_passwd_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_passwd_min = int Function();

typedef _c_crypto_pwhash_argon2id_passwd_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_passwd_max = int Function();

typedef _c_crypto_pwhash_argon2id_saltbytes = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_saltbytes = int Function();

typedef _c_crypto_pwhash_argon2id_strbytes = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_strbytes = int Function();

typedef _c_crypto_pwhash_argon2id_strprefix = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_pwhash_argon2id_strprefix = ffi.Pointer<ffi.Int8>
    Function();

typedef _c_crypto_pwhash_argon2id_opslimit_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_opslimit_min = int Function();

typedef _c_crypto_pwhash_argon2id_opslimit_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_opslimit_max = int Function();

typedef _c_crypto_pwhash_argon2id_memlimit_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_memlimit_min = int Function();

typedef _c_crypto_pwhash_argon2id_memlimit_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_memlimit_max = int Function();

typedef _c_crypto_pwhash_argon2id_opslimit_interactive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_opslimit_interactive = int Function();

typedef _c_crypto_pwhash_argon2id_memlimit_interactive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_memlimit_interactive = int Function();

typedef _c_crypto_pwhash_argon2id_opslimit_moderate = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_opslimit_moderate = int Function();

typedef _c_crypto_pwhash_argon2id_memlimit_moderate = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_memlimit_moderate = int Function();

typedef _c_crypto_pwhash_argon2id_opslimit_sensitive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_opslimit_sensitive = int Function();

typedef _c_crypto_pwhash_argon2id_memlimit_sensitive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_argon2id_memlimit_sensitive = int Function();

typedef _c_crypto_pwhash_argon2id = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 outlen,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
  ffi.Pointer<ffi.Uint8> salt,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
  ffi.Int32 alg,
);

typedef _dart_crypto_pwhash_argon2id = int Function(
  ffi.Pointer<ffi.Uint8> out,
  int outlen,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
  ffi.Pointer<ffi.Uint8> salt,
  int opslimit,
  int memlimit,
  int alg,
);

typedef _c_crypto_pwhash_argon2id_str = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> out,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
);

typedef _dart_crypto_pwhash_argon2id_str = int Function(
  ffi.Pointer<ffi.Int8> out,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
  int opslimit,
  int memlimit,
);

typedef _c_crypto_pwhash_argon2id_str_verify = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
);

typedef _dart_crypto_pwhash_argon2id_str_verify = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
);

typedef _c_crypto_pwhash_argon2id_str_needs_rehash = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
);

typedef _dart_crypto_pwhash_argon2id_str_needs_rehash = int Function(
  ffi.Pointer<ffi.Int8> str,
  int opslimit,
  int memlimit,
);

typedef _c_crypto_pwhash_alg_argon2i13 = ffi.Int32 Function();

typedef _dart_crypto_pwhash_alg_argon2i13 = int Function();

typedef _c_crypto_pwhash_alg_argon2id13 = ffi.Int32 Function();

typedef _dart_crypto_pwhash_alg_argon2id13 = int Function();

typedef _c_crypto_pwhash_alg_default = ffi.Int32 Function();

typedef _dart_crypto_pwhash_alg_default = int Function();

typedef _c_crypto_pwhash_bytes_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_bytes_min = int Function();

typedef _c_crypto_pwhash_bytes_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_bytes_max = int Function();

typedef _c_crypto_pwhash_passwd_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_passwd_min = int Function();

typedef _c_crypto_pwhash_passwd_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_passwd_max = int Function();

typedef _c_crypto_pwhash_saltbytes = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_saltbytes = int Function();

typedef _c_crypto_pwhash_strbytes = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_strbytes = int Function();

typedef _c_crypto_pwhash_strprefix = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_pwhash_strprefix = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_pwhash_opslimit_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_opslimit_min = int Function();

typedef _c_crypto_pwhash_opslimit_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_opslimit_max = int Function();

typedef _c_crypto_pwhash_memlimit_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_memlimit_min = int Function();

typedef _c_crypto_pwhash_memlimit_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_memlimit_max = int Function();

typedef _c_crypto_pwhash_opslimit_interactive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_opslimit_interactive = int Function();

typedef _c_crypto_pwhash_memlimit_interactive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_memlimit_interactive = int Function();

typedef _c_crypto_pwhash_opslimit_moderate = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_opslimit_moderate = int Function();

typedef _c_crypto_pwhash_memlimit_moderate = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_memlimit_moderate = int Function();

typedef _c_crypto_pwhash_opslimit_sensitive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_opslimit_sensitive = int Function();

typedef _c_crypto_pwhash_memlimit_sensitive = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_memlimit_sensitive = int Function();

typedef _c_crypto_pwhash = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 outlen,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
  ffi.Pointer<ffi.Uint8> salt,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
  ffi.Int32 alg,
);

typedef _dart_crypto_pwhash = int Function(
  ffi.Pointer<ffi.Uint8> out,
  int outlen,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
  ffi.Pointer<ffi.Uint8> salt,
  int opslimit,
  int memlimit,
  int alg,
);

typedef _c_crypto_pwhash_str = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> out,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
);

typedef _dart_crypto_pwhash_str = int Function(
  ffi.Pointer<ffi.Int8> out,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
  int opslimit,
  int memlimit,
);

typedef _c_crypto_pwhash_str_alg = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> out,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
  ffi.Int32 alg,
);

typedef _dart_crypto_pwhash_str_alg = int Function(
  ffi.Pointer<ffi.Int8> out,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
  int opslimit,
  int memlimit,
  int alg,
);

typedef _c_crypto_pwhash_str_verify = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
);

typedef _dart_crypto_pwhash_str_verify = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
);

typedef _c_crypto_pwhash_str_needs_rehash = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
);

typedef _dart_crypto_pwhash_str_needs_rehash = int Function(
  ffi.Pointer<ffi.Int8> str,
  int opslimit,
  int memlimit,
);

typedef _c_crypto_pwhash_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_pwhash_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_scalarmult_curve25519_bytes = ffi.Uint64 Function();

typedef _dart_crypto_scalarmult_curve25519_bytes = int Function();

typedef _c_crypto_scalarmult_curve25519_scalarbytes = ffi.Uint64 Function();

typedef _dart_crypto_scalarmult_curve25519_scalarbytes = int Function();

typedef _c_crypto_scalarmult_curve25519 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> p,
);

typedef _dart_crypto_scalarmult_curve25519 = int Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> p,
);

typedef _c_crypto_scalarmult_curve25519_base = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
);

typedef _dart_crypto_scalarmult_curve25519_base = int Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
);

typedef _c_crypto_scalarmult_bytes = ffi.Uint64 Function();

typedef _dart_crypto_scalarmult_bytes = int Function();

typedef _c_crypto_scalarmult_scalarbytes = ffi.Uint64 Function();

typedef _dart_crypto_scalarmult_scalarbytes = int Function();

typedef _c_crypto_scalarmult_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_scalarmult_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_scalarmult_base = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
);

typedef _dart_crypto_scalarmult_base = int Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
);

typedef _c_crypto_scalarmult = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> p,
);

typedef _dart_crypto_scalarmult = int Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> p,
);

typedef _c_crypto_secretbox_xsalsa20poly1305_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_xsalsa20poly1305_keybytes = int Function();

typedef _c_crypto_secretbox_xsalsa20poly1305_noncebytes = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_xsalsa20poly1305_noncebytes = int Function();

typedef _c_crypto_secretbox_xsalsa20poly1305_macbytes = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_xsalsa20poly1305_macbytes = int Function();

typedef _c_crypto_secretbox_xsalsa20poly1305_messagebytes_max = ffi.Uint64
    Function();

typedef _dart_crypto_secretbox_xsalsa20poly1305_messagebytes_max = int
    Function();

typedef _c_crypto_secretbox_xsalsa20poly1305 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_xsalsa20poly1305 = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_xsalsa20poly1305_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_xsalsa20poly1305_open = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_xsalsa20poly1305_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_xsalsa20poly1305_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_xsalsa20poly1305_boxzerobytes = ffi.Uint64
    Function();

typedef _dart_crypto_secretbox_xsalsa20poly1305_boxzerobytes = int Function();

typedef _c_crypto_secretbox_xsalsa20poly1305_zerobytes = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_xsalsa20poly1305_zerobytes = int Function();

typedef _c_crypto_secretbox_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_keybytes = int Function();

typedef _c_crypto_secretbox_noncebytes = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_noncebytes = int Function();

typedef _c_crypto_secretbox_macbytes = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_macbytes = int Function();

typedef _c_crypto_secretbox_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_secretbox_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_secretbox_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_messagebytes_max = int Function();

typedef _c_crypto_secretbox_easy = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_easy = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_open_easy = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_open_easy = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_detached = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_open_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_open_detached = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_zerobytes = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_zerobytes = int Function();

typedef _c_crypto_secretbox_boxzerobytes = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_boxzerobytes = int Function();

typedef _c_crypto_secretbox = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_open = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_chacha20_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_chacha20_keybytes = int Function();

typedef _c_crypto_stream_chacha20_noncebytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_chacha20_noncebytes = int Function();

typedef _c_crypto_stream_chacha20_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_stream_chacha20_messagebytes_max = int Function();

typedef _c_crypto_stream_chacha20 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_chacha20 = int Function(
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_chacha20_xor = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_chacha20_xor = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_chacha20_xor_ic = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Uint64 ic,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_chacha20_xor_ic = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  int ic,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_chacha20_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_chacha20_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_chacha20_ietf_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_chacha20_ietf_keybytes = int Function();

typedef _c_crypto_stream_chacha20_ietf_noncebytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_chacha20_ietf_noncebytes = int Function();

typedef _c_crypto_stream_chacha20_ietf_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_stream_chacha20_ietf_messagebytes_max = int Function();

typedef _c_crypto_stream_chacha20_ietf = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_chacha20_ietf = int Function(
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_chacha20_ietf_xor = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_chacha20_ietf_xor = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_chacha20_ietf_xor_ic = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Uint32 ic,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_chacha20_ietf_xor_ic = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  int ic,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_chacha20_ietf_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_chacha20_ietf_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretstream_xchacha20poly1305_abytes = ffi.Uint64 Function();

typedef _dart_crypto_secretstream_xchacha20poly1305_abytes = int Function();

typedef _c_crypto_secretstream_xchacha20poly1305_headerbytes = ffi.Uint64
    Function();

typedef _dart_crypto_secretstream_xchacha20poly1305_headerbytes = int
    Function();

typedef _c_crypto_secretstream_xchacha20poly1305_keybytes = ffi.Uint64
    Function();

typedef _dart_crypto_secretstream_xchacha20poly1305_keybytes = int Function();

typedef _c_crypto_secretstream_xchacha20poly1305_messagebytes_max = ffi.Uint64
    Function();

typedef _dart_crypto_secretstream_xchacha20poly1305_messagebytes_max = int
    Function();

typedef _c_crypto_secretstream_xchacha20poly1305_tag_message = ffi.Uint8
    Function();

typedef _dart_crypto_secretstream_xchacha20poly1305_tag_message = int
    Function();

typedef _c_crypto_secretstream_xchacha20poly1305_tag_push = ffi.Uint8
    Function();

typedef _dart_crypto_secretstream_xchacha20poly1305_tag_push = int Function();

typedef _c_crypto_secretstream_xchacha20poly1305_tag_rekey = ffi.Uint8
    Function();

typedef _dart_crypto_secretstream_xchacha20poly1305_tag_rekey = int Function();

typedef _c_crypto_secretstream_xchacha20poly1305_tag_final = ffi.Uint8
    Function();

typedef _dart_crypto_secretstream_xchacha20poly1305_tag_final = int Function();

typedef _c_crypto_secretstream_xchacha20poly1305_statebytes = ffi.Uint64
    Function();

typedef _dart_crypto_secretstream_xchacha20poly1305_statebytes = int Function();

typedef _c_crypto_secretstream_xchacha20poly1305_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretstream_xchacha20poly1305_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretstream_xchacha20poly1305_init_push = ffi.Int32 Function(
  ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
  ffi.Pointer<ffi.Uint8> header,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretstream_xchacha20poly1305_init_push = int Function(
  ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
  ffi.Pointer<ffi.Uint8> header,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretstream_xchacha20poly1305_push = ffi.Int32 Function(
  ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
  ffi.Uint8 tag,
);

typedef _dart_crypto_secretstream_xchacha20poly1305_push = int Function(
  ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint64> clen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
  int tag,
);

typedef _c_crypto_secretstream_xchacha20poly1305_init_pull = ffi.Int32 Function(
  ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
  ffi.Pointer<ffi.Uint8> header,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretstream_xchacha20poly1305_init_pull = int Function(
  ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
  ffi.Pointer<ffi.Uint8> header,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretstream_xchacha20poly1305_pull = ffi.Int32 Function(
  ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> tag_p,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.Uint64 adlen,
);

typedef _dart_crypto_secretstream_xchacha20poly1305_pull = int Function(
  ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> tag_p,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> ad,
  int adlen,
);

typedef _c_crypto_secretstream_xchacha20poly1305_rekey = ffi.Void Function(
  ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
);

typedef _dart_crypto_secretstream_xchacha20poly1305_rekey = void Function(
  ffi.Pointer<crypto_secretstream_xchacha20poly1305_state> state,
);

typedef _c_crypto_shorthash_siphash24_bytes = ffi.Uint64 Function();

typedef _dart_crypto_shorthash_siphash24_bytes = int Function();

typedef _c_crypto_shorthash_siphash24_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_shorthash_siphash24_keybytes = int Function();

typedef _c_crypto_shorthash_siphash24 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_shorthash_siphash24 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_shorthash_siphashx24_bytes = ffi.Uint64 Function();

typedef _dart_crypto_shorthash_siphashx24_bytes = int Function();

typedef _c_crypto_shorthash_siphashx24_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_shorthash_siphashx24_keybytes = int Function();

typedef _c_crypto_shorthash_siphashx24 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_shorthash_siphashx24 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_shorthash_bytes = ffi.Uint64 Function();

typedef _dart_crypto_shorthash_bytes = int Function();

typedef _c_crypto_shorthash_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_shorthash_keybytes = int Function();

typedef _c_crypto_shorthash_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_shorthash_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_shorthash = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Uint64 inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_shorthash = int Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint8> in_1,
  int inlen,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_shorthash_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_shorthash_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_sign_ed25519ph_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_sign_ed25519ph_statebytes = int Function();

typedef _c_crypto_sign_ed25519_bytes = ffi.Uint64 Function();

typedef _dart_crypto_sign_ed25519_bytes = int Function();

typedef _c_crypto_sign_ed25519_seedbytes = ffi.Uint64 Function();

typedef _dart_crypto_sign_ed25519_seedbytes = int Function();

typedef _c_crypto_sign_ed25519_publickeybytes = ffi.Uint64 Function();

typedef _dart_crypto_sign_ed25519_publickeybytes = int Function();

typedef _c_crypto_sign_ed25519_secretkeybytes = ffi.Uint64 Function();

typedef _dart_crypto_sign_ed25519_secretkeybytes = int Function();

typedef _c_crypto_sign_ed25519_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_sign_ed25519_messagebytes_max = int Function();

typedef _c_crypto_sign_ed25519 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> sm,
  ffi.Pointer<ffi.Uint64> smlen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_sign_ed25519 = int Function(
  ffi.Pointer<ffi.Uint8> sm,
  ffi.Pointer<ffi.Uint64> smlen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_sign_ed25519_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> sm,
  ffi.Uint64 smlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _dart_crypto_sign_ed25519_open = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> sm,
  int smlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _c_crypto_sign_ed25519_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint64> siglen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_sign_ed25519_detached = int Function(
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint64> siglen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_sign_ed25519_verify_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _dart_crypto_sign_ed25519_verify_detached = int Function(
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _c_crypto_sign_ed25519_keypair = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_sign_ed25519_keypair = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_sign_ed25519_seed_keypair = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _dart_crypto_sign_ed25519_seed_keypair = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _c_crypto_sign_ed25519_pk_to_curve25519 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> curve25519_pk,
  ffi.Pointer<ffi.Uint8> ed25519_pk,
);

typedef _dart_crypto_sign_ed25519_pk_to_curve25519 = int Function(
  ffi.Pointer<ffi.Uint8> curve25519_pk,
  ffi.Pointer<ffi.Uint8> ed25519_pk,
);

typedef _c_crypto_sign_ed25519_sk_to_curve25519 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> curve25519_sk,
  ffi.Pointer<ffi.Uint8> ed25519_sk,
);

typedef _dart_crypto_sign_ed25519_sk_to_curve25519 = int Function(
  ffi.Pointer<ffi.Uint8> curve25519_sk,
  ffi.Pointer<ffi.Uint8> ed25519_sk,
);

typedef _c_crypto_sign_ed25519_sk_to_seed = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> seed,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_sign_ed25519_sk_to_seed = int Function(
  ffi.Pointer<ffi.Uint8> seed,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_sign_ed25519_sk_to_pk = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_sign_ed25519_sk_to_pk = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_sign_ed25519ph_init = ffi.Int32 Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
);

typedef _dart_crypto_sign_ed25519ph_init = int Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
);

typedef _c_crypto_sign_ed25519ph_update = ffi.Int32 Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
);

typedef _dart_crypto_sign_ed25519ph_update = int Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
);

typedef _c_crypto_sign_ed25519ph_final_create = ffi.Int32 Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint64> siglen_p,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_sign_ed25519ph_final_create = int Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint64> siglen_p,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_sign_ed25519ph_final_verify = ffi.Int32 Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _dart_crypto_sign_ed25519ph_final_verify = int Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _c_crypto_sign_statebytes = ffi.Uint64 Function();

typedef _dart_crypto_sign_statebytes = int Function();

typedef _c_crypto_sign_bytes = ffi.Uint64 Function();

typedef _dart_crypto_sign_bytes = int Function();

typedef _c_crypto_sign_seedbytes = ffi.Uint64 Function();

typedef _dart_crypto_sign_seedbytes = int Function();

typedef _c_crypto_sign_publickeybytes = ffi.Uint64 Function();

typedef _dart_crypto_sign_publickeybytes = int Function();

typedef _c_crypto_sign_secretkeybytes = ffi.Uint64 Function();

typedef _dart_crypto_sign_secretkeybytes = int Function();

typedef _c_crypto_sign_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_sign_messagebytes_max = int Function();

typedef _c_crypto_sign_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_sign_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_sign_seed_keypair = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _dart_crypto_sign_seed_keypair = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _c_crypto_sign_keypair = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_sign_keypair = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_sign = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> sm,
  ffi.Pointer<ffi.Uint64> smlen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_sign = int Function(
  ffi.Pointer<ffi.Uint8> sm,
  ffi.Pointer<ffi.Uint64> smlen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_sign_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> sm,
  ffi.Uint64 smlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _dart_crypto_sign_open = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint64> mlen_p,
  ffi.Pointer<ffi.Uint8> sm,
  int smlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _c_crypto_sign_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint64> siglen_p,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_sign_detached = int Function(
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint64> siglen_p,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_sign_verify_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _dart_crypto_sign_verify_detached = int Function(
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _c_crypto_sign_init = ffi.Int32 Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
);

typedef _dart_crypto_sign_init = int Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
);

typedef _c_crypto_sign_update = ffi.Int32 Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
);

typedef _dart_crypto_sign_update = int Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
);

typedef _c_crypto_sign_final_create = ffi.Int32 Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint64> siglen_p,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_sign_final_create = int Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint64> siglen_p,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_sign_final_verify = ffi.Int32 Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _dart_crypto_sign_final_verify = int Function(
  ffi.Pointer<crypto_sign_ed25519ph_state> state,
  ffi.Pointer<ffi.Uint8> sig,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _c_crypto_stream_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_keybytes = int Function();

typedef _c_crypto_stream_noncebytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_noncebytes = int Function();

typedef _c_crypto_stream_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_stream_messagebytes_max = int Function();

typedef _c_crypto_stream_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _dart_crypto_stream_primitive = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_stream = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream = int Function(
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_xor = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_xor = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_salsa20_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_salsa20_keybytes = int Function();

typedef _c_crypto_stream_salsa20_noncebytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_salsa20_noncebytes = int Function();

typedef _c_crypto_stream_salsa20_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_stream_salsa20_messagebytes_max = int Function();

typedef _c_crypto_stream_salsa20 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_salsa20 = int Function(
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_salsa20_xor = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_salsa20_xor = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_salsa20_xor_ic = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Uint64 ic,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_salsa20_xor_ic = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  int ic,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_salsa20_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_salsa20_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_verify_16_bytes = ffi.Uint64 Function();

typedef _dart_crypto_verify_16_bytes = int Function();

typedef _c_crypto_verify_16 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _dart_crypto_verify_16 = int Function(
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _c_crypto_verify_32_bytes = ffi.Uint64 Function();

typedef _dart_crypto_verify_32_bytes = int Function();

typedef _c_crypto_verify_32 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _dart_crypto_verify_32 = int Function(
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _c_crypto_verify_64_bytes = ffi.Uint64 Function();

typedef _dart_crypto_verify_64_bytes = int Function();

typedef _c_crypto_verify_64 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _dart_crypto_verify_64 = int Function(
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _c_randombytes_seedbytes = ffi.Uint64 Function();

typedef _dart_randombytes_seedbytes = int Function();

typedef _c_randombytes_buf = ffi.Void Function(
  ffi.Pointer<ffi.Void> buf,
  ffi.Uint64 size,
);

typedef _dart_randombytes_buf = void Function(
  ffi.Pointer<ffi.Void> buf,
  int size,
);

typedef _c_randombytes_buf_deterministic = ffi.Void Function(
  ffi.Pointer<ffi.Void> buf,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _dart_randombytes_buf_deterministic = void Function(
  ffi.Pointer<ffi.Void> buf,
  int size,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _c_randombytes_random = ffi.Uint32 Function();

typedef _dart_randombytes_random = int Function();

typedef _c_randombytes_uniform = ffi.Uint32 Function(
  ffi.Uint32 upper_bound,
);

typedef _dart_randombytes_uniform = int Function(
  int upper_bound,
);

typedef _c_randombytes_stir = ffi.Void Function();

typedef _dart_randombytes_stir = void Function();

typedef _c_randombytes_close = ffi.Int32 Function();

typedef _dart_randombytes_close = int Function();

typedef _c_randombytes_set_implementation = ffi.Int32 Function(
  ffi.Pointer<randombytes_implementation> impl,
);

typedef _dart_randombytes_set_implementation = int Function(
  ffi.Pointer<randombytes_implementation> impl,
);

typedef _c_randombytes_implementation_name = ffi.Pointer<ffi.Int8> Function();

typedef _dart_randombytes_implementation_name = ffi.Pointer<ffi.Int8>
    Function();

typedef _c_randombytes = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> buf,
  ffi.Uint64 buf_len,
);

typedef _dart_randombytes = void Function(
  ffi.Pointer<ffi.Uint8> buf,
  int buf_len,
);

typedef _c_sodium_runtime_has_neon = ffi.Int32 Function();

typedef _dart_sodium_runtime_has_neon = int Function();

typedef _c_sodium_runtime_has_sse2 = ffi.Int32 Function();

typedef _dart_sodium_runtime_has_sse2 = int Function();

typedef _c_sodium_runtime_has_sse3 = ffi.Int32 Function();

typedef _dart_sodium_runtime_has_sse3 = int Function();

typedef _c_sodium_runtime_has_ssse3 = ffi.Int32 Function();

typedef _dart_sodium_runtime_has_ssse3 = int Function();

typedef _c_sodium_runtime_has_sse41 = ffi.Int32 Function();

typedef _dart_sodium_runtime_has_sse41 = int Function();

typedef _c_sodium_runtime_has_avx = ffi.Int32 Function();

typedef _dart_sodium_runtime_has_avx = int Function();

typedef _c_sodium_runtime_has_avx2 = ffi.Int32 Function();

typedef _dart_sodium_runtime_has_avx2 = int Function();

typedef _c_sodium_runtime_has_avx512f = ffi.Int32 Function();

typedef _dart_sodium_runtime_has_avx512f = int Function();

typedef _c_sodium_runtime_has_pclmul = ffi.Int32 Function();

typedef _dart_sodium_runtime_has_pclmul = int Function();

typedef _c_sodium_runtime_has_aesni = ffi.Int32 Function();

typedef _dart_sodium_runtime_has_aesni = int Function();

typedef _c_sodium_runtime_has_rdrand = ffi.Int32 Function();

typedef _dart_sodium_runtime_has_rdrand = int Function();

typedef _c_sodium_memzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> pnt,
  ffi.Uint64 len,
);

typedef _dart_sodium_memzero = void Function(
  ffi.Pointer<ffi.Void> pnt,
  int len,
);

typedef _c_sodium_stackzero = ffi.Void Function(
  ffi.Uint64 len,
);

typedef _dart_sodium_stackzero = void Function(
  int len,
);

typedef _c_sodium_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> b1_,
  ffi.Pointer<ffi.Void> b2_,
  ffi.Uint64 len,
);

typedef _dart_sodium_memcmp = int Function(
  ffi.Pointer<ffi.Void> b1_,
  ffi.Pointer<ffi.Void> b2_,
  int len,
);

typedef _c_sodium_compare = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> b1_,
  ffi.Pointer<ffi.Uint8> b2_,
  ffi.Uint64 len,
);

typedef _dart_sodium_compare = int Function(
  ffi.Pointer<ffi.Uint8> b1_,
  ffi.Pointer<ffi.Uint8> b2_,
  int len,
);

typedef _c_sodium_is_zero = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> n,
  ffi.Uint64 nlen,
);

typedef _dart_sodium_is_zero = int Function(
  ffi.Pointer<ffi.Uint8> n,
  int nlen,
);

typedef _c_sodium_increment = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> n,
  ffi.Uint64 nlen,
);

typedef _dart_sodium_increment = void Function(
  ffi.Pointer<ffi.Uint8> n,
  int nlen,
);

typedef _c_sodium_add = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> a,
  ffi.Pointer<ffi.Uint8> b,
  ffi.Uint64 len,
);

typedef _dart_sodium_add = void Function(
  ffi.Pointer<ffi.Uint8> a,
  ffi.Pointer<ffi.Uint8> b,
  int len,
);

typedef _c_sodium_sub = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> a,
  ffi.Pointer<ffi.Uint8> b,
  ffi.Uint64 len,
);

typedef _dart_sodium_sub = void Function(
  ffi.Pointer<ffi.Uint8> a,
  ffi.Pointer<ffi.Uint8> b,
  int len,
);

typedef _c_sodium_bin2hex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> hex,
  ffi.Uint64 hex_maxlen,
  ffi.Pointer<ffi.Uint8> bin,
  ffi.Uint64 bin_len,
);

typedef _dart_sodium_bin2hex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> hex,
  int hex_maxlen,
  ffi.Pointer<ffi.Uint8> bin,
  int bin_len,
);

typedef _c_sodium_hex2bin = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> bin,
  ffi.Uint64 bin_maxlen,
  ffi.Pointer<ffi.Int8> hex,
  ffi.Uint64 hex_len,
  ffi.Pointer<ffi.Int8> ignore,
  ffi.Pointer<ffi.Uint64> bin_len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> hex_end,
);

typedef _dart_sodium_hex2bin = int Function(
  ffi.Pointer<ffi.Uint8> bin,
  int bin_maxlen,
  ffi.Pointer<ffi.Int8> hex,
  int hex_len,
  ffi.Pointer<ffi.Int8> ignore,
  ffi.Pointer<ffi.Uint64> bin_len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> hex_end,
);

typedef _c_sodium_base64_encoded_len = ffi.Uint64 Function(
  ffi.Uint64 bin_len,
  ffi.Int32 variant,
);

typedef _dart_sodium_base64_encoded_len = int Function(
  int bin_len,
  int variant,
);

typedef _c_sodium_bin2base64 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> b64,
  ffi.Uint64 b64_maxlen,
  ffi.Pointer<ffi.Uint8> bin,
  ffi.Uint64 bin_len,
  ffi.Int32 variant,
);

typedef _dart_sodium_bin2base64 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> b64,
  int b64_maxlen,
  ffi.Pointer<ffi.Uint8> bin,
  int bin_len,
  int variant,
);

typedef _c_sodium_base642bin = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> bin,
  ffi.Uint64 bin_maxlen,
  ffi.Pointer<ffi.Int8> b64,
  ffi.Uint64 b64_len,
  ffi.Pointer<ffi.Int8> ignore,
  ffi.Pointer<ffi.Uint64> bin_len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> b64_end,
  ffi.Int32 variant,
);

typedef _dart_sodium_base642bin = int Function(
  ffi.Pointer<ffi.Uint8> bin,
  int bin_maxlen,
  ffi.Pointer<ffi.Int8> b64,
  int b64_len,
  ffi.Pointer<ffi.Int8> ignore,
  ffi.Pointer<ffi.Uint64> bin_len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> b64_end,
  int variant,
);

typedef _c_sodium_mlock = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> addr,
  ffi.Uint64 len,
);

typedef _dart_sodium_mlock = int Function(
  ffi.Pointer<ffi.Void> addr,
  int len,
);

typedef _c_sodium_munlock = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> addr,
  ffi.Uint64 len,
);

typedef _dart_sodium_munlock = int Function(
  ffi.Pointer<ffi.Void> addr,
  int len,
);

typedef _c_sodium_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 size,
);

typedef _dart_sodium_malloc = ffi.Pointer<ffi.Void> Function(
  int size,
);

typedef _c_sodium_allocarray = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 count,
  ffi.Uint64 size,
);

typedef _dart_sodium_allocarray = ffi.Pointer<ffi.Void> Function(
  int count,
  int size,
);

typedef _c_sodium_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_sodium_free = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_sodium_mprotect_noaccess = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_sodium_mprotect_noaccess = int Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_sodium_mprotect_readonly = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_sodium_mprotect_readonly = int Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_sodium_mprotect_readwrite = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_sodium_mprotect_readwrite = int Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_sodium_pad = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> padded_buflen_p,
  ffi.Pointer<ffi.Uint8> buf,
  ffi.Uint64 unpadded_buflen,
  ffi.Uint64 blocksize,
  ffi.Uint64 max_buflen,
);

typedef _dart_sodium_pad = int Function(
  ffi.Pointer<ffi.Uint64> padded_buflen_p,
  ffi.Pointer<ffi.Uint8> buf,
  int unpadded_buflen,
  int blocksize,
  int max_buflen,
);

typedef _c_sodium_unpad = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> unpadded_buflen_p,
  ffi.Pointer<ffi.Uint8> buf,
  ffi.Uint64 padded_buflen,
  ffi.Uint64 blocksize,
);

typedef _dart_sodium_unpad = int Function(
  ffi.Pointer<ffi.Uint64> unpadded_buflen_p,
  ffi.Pointer<ffi.Uint8> buf,
  int padded_buflen,
  int blocksize,
);

typedef _c_crypto_stream_xchacha20_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_xchacha20_keybytes = int Function();

typedef _c_crypto_stream_xchacha20_noncebytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_xchacha20_noncebytes = int Function();

typedef _c_crypto_stream_xchacha20_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_stream_xchacha20_messagebytes_max = int Function();

typedef _c_crypto_stream_xchacha20 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_xchacha20 = int Function(
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_xchacha20_xor = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_xchacha20_xor = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_xchacha20_xor_ic = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Uint64 ic,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_xchacha20_xor_ic = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  int ic,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_xchacha20_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_xchacha20_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_seedbytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xchacha20poly1305_seedbytes = int Function();

typedef _c_crypto_box_curve25519xchacha20poly1305_publickeybytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xchacha20poly1305_publickeybytes = int
    Function();

typedef _c_crypto_box_curve25519xchacha20poly1305_secretkeybytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xchacha20poly1305_secretkeybytes = int
    Function();

typedef _c_crypto_box_curve25519xchacha20poly1305_beforenmbytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xchacha20poly1305_beforenmbytes = int
    Function();

typedef _c_crypto_box_curve25519xchacha20poly1305_noncebytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xchacha20poly1305_noncebytes = int
    Function();

typedef _c_crypto_box_curve25519xchacha20poly1305_macbytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xchacha20poly1305_macbytes = int Function();

typedef _c_crypto_box_curve25519xchacha20poly1305_messagebytes_max = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xchacha20poly1305_messagebytes_max = int
    Function();

typedef _c_crypto_box_curve25519xchacha20poly1305_seed_keypair = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_seed_keypair = int
    Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
  ffi.Pointer<ffi.Uint8> seed,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_keypair = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_keypair = int Function(
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_easy = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_easy = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_open_easy = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_open_easy = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_detached = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_open_detached = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_open_detached = int
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_beforenm = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_beforenm = int Function(
  ffi.Pointer<ffi.Uint8> k,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_easy_afternm = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_easy_afternm = int
    Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_open_easy_afternm = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_open_easy_afternm = int
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_detached_afternm = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_detached_afternm = int
    Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_open_detached_afternm
    = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_open_detached_afternm = int
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_sealbytes = ffi.Uint64
    Function();

typedef _dart_crypto_box_curve25519xchacha20poly1305_sealbytes = int Function();

typedef _c_crypto_box_curve25519xchacha20poly1305_seal = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_seal = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> pk,
);

typedef _c_crypto_box_curve25519xchacha20poly1305_seal_open = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _dart_crypto_box_curve25519xchacha20poly1305_seal_open = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> pk,
  ffi.Pointer<ffi.Uint8> sk,
);

typedef _c_crypto_core_ed25519_bytes = ffi.Uint64 Function();

typedef _dart_crypto_core_ed25519_bytes = int Function();

typedef _c_crypto_core_ed25519_uniformbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_ed25519_uniformbytes = int Function();

typedef _c_crypto_core_ed25519_hashbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_ed25519_hashbytes = int Function();

typedef _c_crypto_core_ed25519_scalarbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_ed25519_scalarbytes = int Function();

typedef _c_crypto_core_ed25519_nonreducedscalarbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_ed25519_nonreducedscalarbytes = int Function();

typedef _c_crypto_core_ed25519_is_valid_point = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> p,
);

typedef _dart_crypto_core_ed25519_is_valid_point = int Function(
  ffi.Pointer<ffi.Uint8> p,
);

typedef _c_crypto_core_ed25519_add = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> q,
);

typedef _dart_crypto_core_ed25519_add = int Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> q,
);

typedef _c_crypto_core_ed25519_sub = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> q,
);

typedef _dart_crypto_core_ed25519_sub = int Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> q,
);

typedef _c_crypto_core_ed25519_from_uniform = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> r,
);

typedef _dart_crypto_core_ed25519_from_uniform = int Function(
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> r,
);

typedef _c_crypto_core_ed25519_from_hash = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> h,
);

typedef _dart_crypto_core_ed25519_from_hash = int Function(
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> h,
);

typedef _c_crypto_core_ed25519_random = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> p,
);

typedef _dart_crypto_core_ed25519_random = void Function(
  ffi.Pointer<ffi.Uint8> p,
);

typedef _c_crypto_core_ed25519_scalar_random = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> r,
);

typedef _dart_crypto_core_ed25519_scalar_random = void Function(
  ffi.Pointer<ffi.Uint8> r,
);

typedef _c_crypto_core_ed25519_scalar_invert = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> recip,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _dart_crypto_core_ed25519_scalar_invert = int Function(
  ffi.Pointer<ffi.Uint8> recip,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _c_crypto_core_ed25519_scalar_negate = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> neg,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _dart_crypto_core_ed25519_scalar_negate = void Function(
  ffi.Pointer<ffi.Uint8> neg,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _c_crypto_core_ed25519_scalar_complement = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> comp,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _dart_crypto_core_ed25519_scalar_complement = void Function(
  ffi.Pointer<ffi.Uint8> comp,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _c_crypto_core_ed25519_scalar_add = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _dart_crypto_core_ed25519_scalar_add = void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _c_crypto_core_ed25519_scalar_sub = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _dart_crypto_core_ed25519_scalar_sub = void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _c_crypto_core_ed25519_scalar_mul = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _dart_crypto_core_ed25519_scalar_mul = void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _c_crypto_core_ed25519_scalar_reduce = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _dart_crypto_core_ed25519_scalar_reduce = void Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _c_crypto_core_ristretto255_bytes = ffi.Uint64 Function();

typedef _dart_crypto_core_ristretto255_bytes = int Function();

typedef _c_crypto_core_ristretto255_hashbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_ristretto255_hashbytes = int Function();

typedef _c_crypto_core_ristretto255_scalarbytes = ffi.Uint64 Function();

typedef _dart_crypto_core_ristretto255_scalarbytes = int Function();

typedef _c_crypto_core_ristretto255_nonreducedscalarbytes = ffi.Uint64
    Function();

typedef _dart_crypto_core_ristretto255_nonreducedscalarbytes = int Function();

typedef _c_crypto_core_ristretto255_is_valid_point = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> p,
);

typedef _dart_crypto_core_ristretto255_is_valid_point = int Function(
  ffi.Pointer<ffi.Uint8> p,
);

typedef _c_crypto_core_ristretto255_add = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> q,
);

typedef _dart_crypto_core_ristretto255_add = int Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> q,
);

typedef _c_crypto_core_ristretto255_sub = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> q,
);

typedef _dart_crypto_core_ristretto255_sub = int Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> q,
);

typedef _c_crypto_core_ristretto255_from_hash = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> r,
);

typedef _dart_crypto_core_ristretto255_from_hash = int Function(
  ffi.Pointer<ffi.Uint8> p,
  ffi.Pointer<ffi.Uint8> r,
);

typedef _c_crypto_core_ristretto255_random = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> p,
);

typedef _dart_crypto_core_ristretto255_random = void Function(
  ffi.Pointer<ffi.Uint8> p,
);

typedef _c_crypto_core_ristretto255_scalar_random = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> r,
);

typedef _dart_crypto_core_ristretto255_scalar_random = void Function(
  ffi.Pointer<ffi.Uint8> r,
);

typedef _c_crypto_core_ristretto255_scalar_invert = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> recip,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _dart_crypto_core_ristretto255_scalar_invert = int Function(
  ffi.Pointer<ffi.Uint8> recip,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _c_crypto_core_ristretto255_scalar_negate = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> neg,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _dart_crypto_core_ristretto255_scalar_negate = void Function(
  ffi.Pointer<ffi.Uint8> neg,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _c_crypto_core_ristretto255_scalar_complement = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> comp,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _dart_crypto_core_ristretto255_scalar_complement = void Function(
  ffi.Pointer<ffi.Uint8> comp,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _c_crypto_core_ristretto255_scalar_add = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _dart_crypto_core_ristretto255_scalar_add = void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _c_crypto_core_ristretto255_scalar_sub = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _dart_crypto_core_ristretto255_scalar_sub = void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _c_crypto_core_ristretto255_scalar_mul = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _dart_crypto_core_ristretto255_scalar_mul = void Function(
  ffi.Pointer<ffi.Uint8> z,
  ffi.Pointer<ffi.Uint8> x,
  ffi.Pointer<ffi.Uint8> y,
);

typedef _c_crypto_core_ristretto255_scalar_reduce = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _dart_crypto_core_ristretto255_scalar_reduce = void Function(
  ffi.Pointer<ffi.Uint8> r,
  ffi.Pointer<ffi.Uint8> s,
);

typedef _c_crypto_scalarmult_ed25519_bytes = ffi.Uint64 Function();

typedef _dart_crypto_scalarmult_ed25519_bytes = int Function();

typedef _c_crypto_scalarmult_ed25519_scalarbytes = ffi.Uint64 Function();

typedef _dart_crypto_scalarmult_ed25519_scalarbytes = int Function();

typedef _c_crypto_scalarmult_ed25519 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> p,
);

typedef _dart_crypto_scalarmult_ed25519 = int Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> p,
);

typedef _c_crypto_scalarmult_ed25519_noclamp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> p,
);

typedef _dart_crypto_scalarmult_ed25519_noclamp = int Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> p,
);

typedef _c_crypto_scalarmult_ed25519_base = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
);

typedef _dart_crypto_scalarmult_ed25519_base = int Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
);

typedef _c_crypto_scalarmult_ed25519_base_noclamp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
);

typedef _dart_crypto_scalarmult_ed25519_base_noclamp = int Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
);

typedef _c_crypto_scalarmult_ristretto255_bytes = ffi.Uint64 Function();

typedef _dart_crypto_scalarmult_ristretto255_bytes = int Function();

typedef _c_crypto_scalarmult_ristretto255_scalarbytes = ffi.Uint64 Function();

typedef _dart_crypto_scalarmult_ristretto255_scalarbytes = int Function();

typedef _c_crypto_scalarmult_ristretto255 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> p,
);

typedef _dart_crypto_scalarmult_ristretto255 = int Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> p,
);

typedef _c_crypto_scalarmult_ristretto255_base = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
);

typedef _dart_crypto_scalarmult_ristretto255_base = int Function(
  ffi.Pointer<ffi.Uint8> q,
  ffi.Pointer<ffi.Uint8> n,
);

typedef _c_crypto_secretbox_xchacha20poly1305_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_xchacha20poly1305_keybytes = int Function();

typedef _c_crypto_secretbox_xchacha20poly1305_noncebytes = ffi.Uint64
    Function();

typedef _dart_crypto_secretbox_xchacha20poly1305_noncebytes = int Function();

typedef _c_crypto_secretbox_xchacha20poly1305_macbytes = ffi.Uint64 Function();

typedef _dart_crypto_secretbox_xchacha20poly1305_macbytes = int Function();

typedef _c_crypto_secretbox_xchacha20poly1305_messagebytes_max = ffi.Uint64
    Function();

typedef _dart_crypto_secretbox_xchacha20poly1305_messagebytes_max = int
    Function();

typedef _c_crypto_secretbox_xchacha20poly1305_easy = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_xchacha20poly1305_easy = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_xchacha20poly1305_open_easy = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_xchacha20poly1305_open_easy = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_xchacha20poly1305_detached = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_xchacha20poly1305_detached = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_secretbox_xchacha20poly1305_open_detached = ffi.Int32
    Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_secretbox_xchacha20poly1305_open_detached = int Function(
  ffi.Pointer<ffi.Uint8> m,
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> mac,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_pwhash_scryptsalsa208sha256_bytes_min = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_bytes_min = int Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_bytes_max = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_bytes_max = int Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_passwd_min = ffi.Uint64
    Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_passwd_min = int Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_passwd_max = ffi.Uint64
    Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_passwd_max = int Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_saltbytes = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_saltbytes = int Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_strbytes = ffi.Uint64 Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_strbytes = int Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_strprefix = ffi.Pointer<ffi.Int8>
    Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_strprefix
    = ffi.Pointer<ffi.Int8> Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_opslimit_min = ffi.Uint64
    Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_opslimit_min = int Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_opslimit_max = ffi.Uint64
    Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_opslimit_max = int Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_memlimit_min = ffi.Uint64
    Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_memlimit_min = int Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_memlimit_max = ffi.Uint64
    Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_memlimit_max = int Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive = ffi.Uint64
    Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive = int
    Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive = ffi.Uint64
    Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive = int
    Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive = ffi.Uint64
    Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive = int
    Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive = ffi.Uint64
    Function();

typedef _dart_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive = int
    Function();

typedef _c_crypto_pwhash_scryptsalsa208sha256 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.Uint64 outlen,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
  ffi.Pointer<ffi.Uint8> salt,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
);

typedef _dart_crypto_pwhash_scryptsalsa208sha256 = int Function(
  ffi.Pointer<ffi.Uint8> out,
  int outlen,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
  ffi.Pointer<ffi.Uint8> salt,
  int opslimit,
  int memlimit,
);

typedef _c_crypto_pwhash_scryptsalsa208sha256_str = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> out,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
);

typedef _dart_crypto_pwhash_scryptsalsa208sha256_str = int Function(
  ffi.Pointer<ffi.Int8> out,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
  int opslimit,
  int memlimit,
);

typedef _c_crypto_pwhash_scryptsalsa208sha256_str_verify = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> passwd,
  ffi.Uint64 passwdlen,
);

typedef _dart_crypto_pwhash_scryptsalsa208sha256_str_verify = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> passwd,
  int passwdlen,
);

typedef _c_crypto_pwhash_scryptsalsa208sha256_ll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> passwd,
  ffi.Uint64 passwdlen,
  ffi.Pointer<ffi.Uint8> salt,
  ffi.Uint64 saltlen,
  ffi.Uint64 N,
  ffi.Uint32 r,
  ffi.Uint32 p,
  ffi.Pointer<ffi.Uint8> buf,
  ffi.Uint64 buflen,
);

typedef _dart_crypto_pwhash_scryptsalsa208sha256_ll = int Function(
  ffi.Pointer<ffi.Uint8> passwd,
  int passwdlen,
  ffi.Pointer<ffi.Uint8> salt,
  int saltlen,
  int N,
  int r,
  int p,
  ffi.Pointer<ffi.Uint8> buf,
  int buflen,
);

typedef _c_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash = ffi.Int32
    Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Uint64 opslimit,
  ffi.Uint64 memlimit,
);

typedef _dart_crypto_pwhash_scryptsalsa208sha256_str_needs_rehash = int
    Function(
  ffi.Pointer<ffi.Int8> str,
  int opslimit,
  int memlimit,
);

typedef _c_crypto_stream_salsa2012_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_salsa2012_keybytes = int Function();

typedef _c_crypto_stream_salsa2012_noncebytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_salsa2012_noncebytes = int Function();

typedef _c_crypto_stream_salsa2012_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_stream_salsa2012_messagebytes_max = int Function();

typedef _c_crypto_stream_salsa2012 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_salsa2012 = int Function(
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_salsa2012_xor = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_salsa2012_xor = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_salsa2012_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_salsa2012_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_salsa208_keybytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_salsa208_keybytes = int Function();

typedef _c_crypto_stream_salsa208_noncebytes = ffi.Uint64 Function();

typedef _dart_crypto_stream_salsa208_noncebytes = int Function();

typedef _c_crypto_stream_salsa208_messagebytes_max = ffi.Uint64 Function();

typedef _dart_crypto_stream_salsa208_messagebytes_max = int Function();

typedef _c_crypto_stream_salsa208 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Uint64 clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_salsa208 = int Function(
  ffi.Pointer<ffi.Uint8> c,
  int clen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_salsa208_xor = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  ffi.Uint64 mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_salsa208_xor = int Function(
  ffi.Pointer<ffi.Uint8> c,
  ffi.Pointer<ffi.Uint8> m,
  int mlen,
  ffi.Pointer<ffi.Uint8> n,
  ffi.Pointer<ffi.Uint8> k,
);

typedef _c_crypto_stream_salsa208_keygen = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _dart_crypto_stream_salsa208_keygen = void Function(
  ffi.Pointer<ffi.Uint8> k,
);

typedef _typedefC_2 = ffi.Pointer<ffi.Int8> Function();

typedef _typedefC_3 = ffi.Uint32 Function();

typedef _typedefC_4 = ffi.Void Function();

typedef _typedefC_5 = ffi.Uint32 Function(
  ffi.Uint32,
);

typedef _typedefC_6 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_7 = ffi.Int32 Function();
