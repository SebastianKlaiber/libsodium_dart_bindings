@JS()
library node_modules._types.libsodium_wrappers;

import "package:js/js.dart";
import "dart:typed_data";

/// Type definitions for libsodium-wrappers 0.7
/// Project: https://github.com/jedisct1/libsodium.js
/// Definitions by: Florian Imdahl <https://github.com/ffflorian>
/// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
/// TypeScript Version: 2.1
/*export type Uint8ListOutputFormat = 'Uint8List';*/
/*export type StringOutputFormat = 'text' | 'hex' | 'base64';*/
/*export type KeyType = 'curve25519' | 'ed25519' | 'x25519';*/
@JS()
class base64_variants {
  external static num get ORIGINAL;
  external static num get ORIGINAL_NO_PADDING;
  external static num get URLSAFE;
  external static num get URLSAFE_NO_PADDING;
}

@anonymous
@JS()
abstract class CryptoBox {
  external Uint8List get ciphertext;
  external set ciphertext(Uint8List v);
  external Uint8List get mac;
  external set mac(Uint8List v);
  external factory CryptoBox({Uint8List ciphertext, Uint8List mac});
}

@anonymous
@JS()
abstract class StringCryptoBox {
  external String get ciphertext;
  external set ciphertext(String v);
  external String get mac;
  external set mac(String v);
  external factory StringCryptoBox({String ciphertext, String mac});
}

@anonymous
@JS()
abstract class CryptoKX {
  external Uint8List get sharedRx;
  external set sharedRx(Uint8List v);
  external Uint8List get sharedTx;
  external set sharedTx(Uint8List v);
  external factory CryptoKX({Uint8List sharedRx, Uint8List sharedTx});
}

@anonymous
@JS()
abstract class StringCryptoKX {
  external String get sharedRx;
  external set sharedRx(String v);
  external String get sharedTx;
  external set sharedTx(String v);
  external factory StringCryptoKX({String sharedRx, String sharedTx});
}

@anonymous
@JS()
abstract class KeyPair {
  external String /*'curve25519'|'ed25519'|'x25519'*/ get keyType;
  external set keyType(String /*'curve25519'|'ed25519'|'x25519'*/ v);
  external Uint8List get privateKey;
  external set privateKey(Uint8List v);
  external Uint8List get publicKey;
  external set publicKey(Uint8List v);
  external factory KeyPair(
      {String /*'curve25519'|'ed25519'|'x25519'*/ keyType,
      Uint8List privateKey,
      Uint8List publicKey});
}

@anonymous
@JS()
abstract class StringKeyPair {
  external String /*'curve25519'|'ed25519'|'x25519'*/ get keyType;
  external set keyType(String /*'curve25519'|'ed25519'|'x25519'*/ v);
  external String get privateKey;
  external set privateKey(String v);
  external String get publicKey;
  external set publicKey(String v);
  external factory StringKeyPair(
      {String /*'curve25519'|'ed25519'|'x25519'*/ keyType,
      String privateKey,
      String publicKey});
}

@anonymous
@JS()
abstract class SecretBox {
  external Uint8List get cipher;
  external set cipher(Uint8List v);
  external Uint8List get mac;
  external set mac(Uint8List v);
  external factory SecretBox({Uint8List cipher, Uint8List mac});
}

@anonymous
@JS()
abstract class StringSecretBox {
  external String get cipher;
  external set cipher(String v);
  external String get mac;
  external set mac(String v);
  external factory StringSecretBox({String cipher, String mac});
}

@anonymous
@JS()
abstract class StateAddress {
  external String get name;
  external set name(String v);
  external factory StateAddress({String name});
}

@anonymous
@JS()
abstract class MessageTag {
  external Uint8List get message;
  external set message(Uint8List v);
  external num get tag;
  external set tag(num v);
  external factory MessageTag({Uint8List message, num tag});
}

@anonymous
@JS()
abstract class StringMessageTag {
  external String get message;
  external set message(String v);
  external num get tag;
  external set tag(num v);
  external factory StringMessageTag({String message, num tag});
}

@JS()
external num get crypto_aead_chacha20poly1305_ABYTES;
@JS()
external num get crypto_aead_chacha20poly1305_ietf_ABYTES;
@JS()
external num get crypto_aead_chacha20poly1305_IETF_ABYTES;
@JS()
external num get crypto_aead_chacha20poly1305_ietf_KEYBYTES;
@JS()
external num get crypto_aead_chacha20poly1305_IETF_KEYBYTES;
@JS()
external num get crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX;
@JS()
external num get crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX;
@JS()
external num get crypto_aead_chacha20poly1305_ietf_NPUBBYTES;
@JS()
external num get crypto_aead_chacha20poly1305_IETF_NPUBBYTES;
@JS()
external num get crypto_aead_chacha20poly1305_ietf_NSECBYTES;
@JS()
external num get crypto_aead_chacha20poly1305_IETF_NSECBYTES;
@JS()
external num get crypto_aead_chacha20poly1305_KEYBYTES;
@JS()
external num get crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX;
@JS()
external num get crypto_aead_chacha20poly1305_NPUBBYTES;
@JS()
external num get crypto_aead_chacha20poly1305_NSECBYTES;
@JS()
external num get crypto_aead_xchacha20poly1305_ietf_ABYTES;
@JS()
external num get crypto_aead_xchacha20poly1305_IETF_ABYTES;
@JS()
external num get crypto_aead_xchacha20poly1305_ietf_KEYBYTES;
@JS()
external num get crypto_aead_xchacha20poly1305_IETF_KEYBYTES;
@JS()
external num get crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX;
@JS()
external num get crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX;
@JS()
external num get crypto_aead_xchacha20poly1305_ietf_NPUBBYTES;
@JS()
external num get crypto_aead_xchacha20poly1305_IETF_NPUBBYTES;
@JS()
external num get crypto_aead_xchacha20poly1305_ietf_NSECBYTES;
@JS()
external num get crypto_aead_xchacha20poly1305_IETF_NSECBYTES;
@JS()
external num get crypto_auth_BYTES;
@JS()
external num get crypto_auth_KEYBYTES;
@JS()
external num get crypto_box_BEFORENMBYTES;
@JS()
external num get crypto_box_MACBYTES;
@JS()
external num get crypto_box_MESSAGEBYTES_MAX;
@JS()
external num get crypto_box_NONCEBYTES;
@JS()
external num get crypto_box_PUBLICKEYBYTES;
@JS()
external num get crypto_box_SEALBYTES;
@JS()
external num get crypto_box_SECRETKEYBYTES;
@JS()
external num get crypto_box_SEEDBYTES;
@JS()
external num get crypto_generichash_BYTES;
@JS()
external num get crypto_generichash_BYTES_MAX;
@JS()
external num get crypto_generichash_BYTES_MIN;
@JS()
external num get crypto_generichash_KEYBYTES;
@JS()
external num get crypto_generichash_KEYBYTES_MAX;
@JS()
external num get crypto_generichash_KEYBYTES_MIN;
@JS()
external num get crypto_hash_BYTES;
@JS()
external num get crypto_kdf_BYTES_MAX;
@JS()
external num get crypto_kdf_BYTES_MIN;
@JS()
external num get crypto_kdf_CONTEXTBYTES;
@JS()
external num get crypto_kdf_KEYBYTES;
@JS()
external num get crypto_kx_PUBLICKEYBYTES;
@JS()
external num get crypto_kx_SECRETKEYBYTES;
@JS()
external num get crypto_kx_SEEDBYTES;
@JS()
external num get crypto_kx_SESSIONKEYBYTES;
@JS()
external num get crypto_pwhash_ALG_ARGON2I13;
@JS()
external num get crypto_pwhash_ALG_ARGON2ID13;
@JS()
external num get crypto_pwhash_ALG_DEFAULT;
@JS()
external num get crypto_pwhash_BYTES_MAX;
@JS()
external num get crypto_pwhash_BYTES_MIN;
@JS()
external num get crypto_pwhash_MEMLIMIT_INTERACTIVE;
@JS()
external num get crypto_pwhash_MEMLIMIT_MAX;
@JS()
external num get crypto_pwhash_MEMLIMIT_MIN;
@JS()
external num get crypto_pwhash_MEMLIMIT_MODERATE;
@JS()
external num get crypto_pwhash_MEMLIMIT_SENSITIVE;
@JS()
external num get crypto_pwhash_OPSLIMIT_INTERACTIVE;
@JS()
external num get crypto_pwhash_OPSLIMIT_MAX;
@JS()
external num get crypto_pwhash_OPSLIMIT_MIN;
@JS()
external num get crypto_pwhash_OPSLIMIT_MODERATE;
@JS()
external num get crypto_pwhash_OPSLIMIT_SENSITIVE;
@JS()
external num get crypto_pwhash_PASSWD_MAX;
@JS()
external num get crypto_pwhash_PASSWD_MIN;
@JS()
external num get crypto_pwhash_SALTBYTES;
@JS()
external num get crypto_pwhash_STRBYTES;
@JS()
external String get crypto_pwhash_STRPREFIX;
@JS()
external num get crypto_scalarmult_BYTES;
@JS()
external num get crypto_scalarmult_SCALARBYTES;
@JS()
external num get crypto_secretbox_KEYBYTES;
@JS()
external num get crypto_secretbox_MACBYTES;
@JS()
external num get crypto_secretbox_MESSAGEBYTES_MAX;
@JS()
external num get crypto_secretbox_NONCEBYTES;
@JS()
external num get crypto_secretstream_xchacha20poly1305_ABYTES;
@JS()
external num get crypto_secretstream_xchacha20poly1305_HEADERBYTES;
@JS()
external num get crypto_secretstream_xchacha20poly1305_KEYBYTES;
@JS()
external num get crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX;
@JS()
external num get crypto_secretstream_xchacha20poly1305_TAG_FINAL;
@JS()
external num get crypto_secretstream_xchacha20poly1305_TAG_MESSAGE;
@JS()
external num get crypto_secretstream_xchacha20poly1305_TAG_PUSH;
@JS()
external num get crypto_secretstream_xchacha20poly1305_TAG_REKEY;
@JS()
external num get crypto_shorthash_BYTES;
@JS()
external num get crypto_shorthash_KEYBYTES;
@JS()
external num get crypto_sign_BYTES;
@JS()
external num get crypto_sign_MESSAGEBYTES_MAX;
@JS()
external num get crypto_sign_PUBLICKEYBYTES;
@JS()
external num get crypto_sign_SECRETKEYBYTES;
@JS()
external num get crypto_sign_SEEDBYTES;
@JS()
external num get SODIUM_LIBRARY_VERSION_MAJOR;
@JS()
external num get SODIUM_LIBRARY_VERSION_MINOR;
@JS()
external String get SODIUM_VERSION_STRING;
@JS()
external Future<void> get ready;
@JS()
external void add(Uint8List a, Uint8List b);
@JS()
external num compare(Uint8List b1, Uint8List b2);
/*external Uint8List crypto_aead_chacha20poly1305_decrypt(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_chacha20poly1305_decrypt(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_chacha20poly1305_decrypt(
    dynamic /*String|Uint8List*/ secret_nonce,
    dynamic /*String|Uint8List*/ ciphertext,
    dynamic /*String|Uint8List*/ additional_data,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_aead_chacha20poly1305_decrypt_detached(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, Uint8List mac, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_chacha20poly1305_decrypt_detached(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, Uint8List mac, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_chacha20poly1305_decrypt_detached(
    dynamic /*String|Uint8List*/ secret_nonce,
    dynamic /*String|Uint8List*/ ciphertext,
    Uint8List mac,
    dynamic /*String|Uint8List*/ additional_data,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_aead_chacha20poly1305_encrypt(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_chacha20poly1305_encrypt(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_chacha20poly1305_encrypt(
    dynamic /*String|Uint8List*/ message,
    dynamic /*String|Uint8List*/ additional_data,
    dynamic /*String|Uint8List*/ secret_nonce,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external CryptoBox crypto_aead_chacha20poly1305_encrypt_detached(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external StringCryptoBox crypto_aead_chacha20poly1305_encrypt_detached(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*CryptoBox|StringCryptoBox*/ crypto_aead_chacha20poly1305_encrypt_detached(
    dynamic /*String|Uint8List*/ message,
    dynamic /*String|Uint8List*/ additional_data,
    dynamic /*String|Uint8List*/ secret_nonce,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_aead_chacha20poly1305_ietf_decrypt(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_chacha20poly1305_ietf_decrypt(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_chacha20poly1305_ietf_decrypt(
    dynamic /*String|Uint8List*/ secret_nonce,
    dynamic /*String|Uint8List*/ ciphertext,
    dynamic /*String|Uint8List*/ additional_data,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_aead_chacha20poly1305_ietf_decrypt_detached(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, Uint8List mac, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_chacha20poly1305_ietf_decrypt_detached(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, Uint8List mac, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_chacha20poly1305_ietf_decrypt_detached(
    dynamic /*String|Uint8List*/ secret_nonce,
    dynamic /*String|Uint8List*/ ciphertext,
    Uint8List mac,
    dynamic /*String|Uint8List*/ additional_data,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_aead_chacha20poly1305_ietf_encrypt(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_chacha20poly1305_ietf_encrypt(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_chacha20poly1305_ietf_encrypt(
    dynamic /*String|Uint8List*/ message,
    dynamic /*String|Uint8List*/ additional_data,
    dynamic /*String|Uint8List*/ secret_nonce,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external CryptoBox crypto_aead_chacha20poly1305_ietf_encrypt_detached(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external StringCryptoBox crypto_aead_chacha20poly1305_ietf_encrypt_detached(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*CryptoBox|StringCryptoBox*/ crypto_aead_chacha20poly1305_ietf_encrypt_detached(
    dynamic /*String|Uint8List*/ message,
    dynamic /*String|Uint8List*/ additional_data,
    dynamic /*String|Uint8List*/ secret_nonce,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_aead_chacha20poly1305_ietf_keygen(['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_chacha20poly1305_ietf_keygen('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_chacha20poly1305_ietf_keygen(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_aead_chacha20poly1305_keygen(['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_chacha20poly1305_keygen('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_chacha20poly1305_keygen(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_aead_xchacha20poly1305_ietf_decrypt(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_xchacha20poly1305_ietf_decrypt(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_xchacha20poly1305_ietf_decrypt(
    dynamic /*String|Uint8List*/ secret_nonce,
    dynamic /*String|Uint8List*/ ciphertext,
    dynamic /*String|Uint8List*/ additional_data,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_aead_xchacha20poly1305_ietf_decrypt_detached(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, Uint8List mac, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_xchacha20poly1305_ietf_decrypt_detached(String|Uint8List|Null secret_nonce, String|Uint8List ciphertext, Uint8List mac, String|Uint8List|Null additional_data, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_xchacha20poly1305_ietf_decrypt_detached(
    dynamic /*String|Uint8List*/ secret_nonce,
    dynamic /*String|Uint8List*/ ciphertext,
    Uint8List mac,
    dynamic /*String|Uint8List*/ additional_data,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_aead_xchacha20poly1305_ietf_encrypt(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_xchacha20poly1305_ietf_encrypt(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_xchacha20poly1305_ietf_encrypt(
    dynamic /*String|Uint8List*/ message,
    dynamic /*String|Uint8List*/ additional_data,
    dynamic /*String|Uint8List*/ secret_nonce,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external CryptoBox crypto_aead_xchacha20poly1305_ietf_encrypt_detached(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external StringCryptoBox crypto_aead_xchacha20poly1305_ietf_encrypt_detached(String|Uint8List message, String|Uint8List|Null additional_data, String|Uint8List|Null secret_nonce, Uint8List public_nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*CryptoBox|StringCryptoBox*/ crypto_aead_xchacha20poly1305_ietf_encrypt_detached(
    dynamic /*String|Uint8List*/ message,
    dynamic /*String|Uint8List*/ additional_data,
    dynamic /*String|Uint8List*/ secret_nonce,
    Uint8List public_nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_aead_xchacha20poly1305_ietf_keygen(['Uint8List'|Null outputFormat]);*/
/*external String crypto_aead_xchacha20poly1305_ietf_keygen('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_aead_xchacha20poly1305_ietf_keygen(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_auth(String|Uint8List message, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_auth(String|Uint8List message, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_auth(
    dynamic /*String|Uint8List*/ message, Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_auth_keygen(['Uint8List'|Null outputFormat]);*/
/*external String crypto_auth_keygen('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_auth_keygen(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
@JS()
external bool crypto_auth_verify(
    Uint8List tag, dynamic /*String|Uint8List*/ message, Uint8List key);
/*external Uint8List crypto_box_beforenm(Uint8List publicKey, Uint8List privateKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_box_beforenm(Uint8List publicKey, Uint8List privateKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_box_beforenm(
    Uint8List publicKey, Uint8List privateKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external CryptoBox crypto_box_detached(String|Uint8List message, Uint8List nonce, Uint8List publicKey, Uint8List privateKey, ['Uint8List'|Null outputFormat]);*/
/*external StringCryptoBox crypto_box_detached(String|Uint8List message, Uint8List nonce, Uint8List publicKey, Uint8List privateKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*CryptoBox|StringCryptoBox*/ crypto_box_detached(
    dynamic /*String|Uint8List*/ message,
    Uint8List nonce,
    Uint8List publicKey,
    Uint8List privateKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_box_easy(String|Uint8List message, Uint8List nonce, Uint8List publicKey, Uint8List privateKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_box_easy(String|Uint8List message, Uint8List nonce, Uint8List publicKey, Uint8List privateKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_box_easy(
    dynamic /*String|Uint8List*/ message,
    Uint8List nonce,
    Uint8List publicKey,
    Uint8List privateKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_box_easy_afternm(String|Uint8List message, Uint8List nonce, Uint8List sharedKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_box_easy_afternm(String|Uint8List message, Uint8List nonce, Uint8List sharedKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_box_easy_afternm(
    dynamic /*String|Uint8List*/ message, Uint8List nonce, Uint8List sharedKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external KeyPair crypto_box_keypair(['Uint8List'|Null outputFormat]);*/
/*external StringKeyPair crypto_box_keypair('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*KeyPair|StringKeyPair*/ crypto_box_keypair(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_box_open_detached(String|Uint8List ciphertext, Uint8List mac, Uint8List nonce, Uint8List publicKey, Uint8List privateKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_box_open_detached(String|Uint8List ciphertext, Uint8List mac, Uint8List nonce, Uint8List publicKey, Uint8List privateKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_box_open_detached(
    dynamic /*String|Uint8List*/ ciphertext,
    Uint8List mac,
    Uint8List nonce,
    Uint8List publicKey,
    Uint8List privateKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_box_open_easy(String|Uint8List ciphertext, Uint8List nonce, Uint8List publicKey, Uint8List privateKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_box_open_easy(String|Uint8List ciphertext, Uint8List nonce, Uint8List publicKey, Uint8List privateKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_box_open_easy(
    dynamic /*String|Uint8List*/ ciphertext,
    Uint8List nonce,
    Uint8List publicKey,
    Uint8List privateKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_box_open_easy_afternm(String|Uint8List ciphertext, Uint8List nonce, Uint8List sharedKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_box_open_easy_afternm(String|Uint8List ciphertext, Uint8List nonce, Uint8List sharedKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_box_open_easy_afternm(
    dynamic /*String|Uint8List*/ ciphertext,
    Uint8List nonce,
    Uint8List sharedKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_box_seal(String|Uint8List message, Uint8List publicKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_box_seal(String|Uint8List message, Uint8List publicKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_box_seal(
    dynamic /*String|Uint8List*/ message, Uint8List publicKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_box_seal_open(String|Uint8List ciphertext, Uint8List publicKey, Uint8List privateKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_box_seal_open(String|Uint8List ciphertext, Uint8List publicKey, Uint8List privateKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_box_seal_open(
    dynamic /*String|Uint8List*/ ciphertext,
    Uint8List publicKey,
    Uint8List privateKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external KeyPair crypto_box_seed_keypair(Uint8List seed, ['Uint8List'|Null outputFormat]);*/
/*external StringKeyPair crypto_box_seed_keypair(Uint8List seed, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*KeyPair|StringKeyPair*/ crypto_box_seed_keypair(
    Uint8List seed,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_generichash(num hash_length, String|Uint8List message, [String|Uint8List|Null key, 'Uint8List'|Null outputFormat]);*/
/*external String crypto_generichash(num hash_length, String|Uint8List message, String|Uint8List|Null key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_generichash(
    num hash_length, dynamic /*String|Uint8List*/ message,
    [dynamic /*String|Uint8List*/ key,
    String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_generichash_final(StateAddress state_address, num hash_length, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_generichash_final(StateAddress state_address, num hash_length, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_generichash_final(
    StateAddress state_address, num hash_length,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
@JS()
external StateAddress crypto_generichash_init(
    dynamic /*String|Uint8List|Null*/ key, num hash_length);
/*external Uint8List crypto_generichash_keygen(['Uint8List'|Null outputFormat]);*/
/*external String crypto_generichash_keygen('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_generichash_keygen(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
@JS()
external void crypto_generichash_update(
    StateAddress state_address, dynamic /*String|Uint8List*/ message_chunk);
/*external Uint8List crypto_hash(String|Uint8List message, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_hash(String|Uint8List message, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_hash(
    dynamic /*String|Uint8List*/ message,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_kdf_derive_from_key(num subkey_len, num subkey_id, String ctx, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_kdf_derive_from_key(num subkey_len, num subkey_id, String ctx, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_kdf_derive_from_key(
    num subkey_len, num subkey_id, String ctx, Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_kdf_keygen(['Uint8List'|Null outputFormat]);*/
/*external String crypto_kdf_keygen('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_kdf_keygen(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external CryptoKX crypto_kx_client_session_keys(Uint8List clientPublicKey, Uint8List clientSecretKey, Uint8List serverPublicKey, ['Uint8List'|Null outputFormat]);*/
/*external StringCryptoKX crypto_kx_client_session_keys(Uint8List clientPublicKey, Uint8List clientSecretKey, Uint8List serverPublicKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*CryptoKX|StringCryptoKX*/ crypto_kx_client_session_keys(
    Uint8List clientPublicKey,
    Uint8List clientSecretKey,
    Uint8List serverPublicKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external KeyPair crypto_kx_keypair(['Uint8List'|Null outputFormat]);*/
/*external StringKeyPair crypto_kx_keypair('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*KeyPair|StringKeyPair*/ crypto_kx_keypair(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external KeyPair crypto_kx_seed_keypair(Uint8List seed, ['Uint8List'|Null outputFormat]);*/
/*external StringKeyPair crypto_kx_seed_keypair(Uint8List seed, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*KeyPair|StringKeyPair*/ crypto_kx_seed_keypair(
    Uint8List seed,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external CryptoKX crypto_kx_server_session_keys(Uint8List serverPublicKey, Uint8List serverSecretKey, Uint8List clientPublicKey, ['Uint8List'|Null outputFormat]);*/
/*external StringCryptoKX crypto_kx_server_session_keys(Uint8List serverPublicKey, Uint8List serverSecretKey, Uint8List clientPublicKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*CryptoKX|StringCryptoKX*/ crypto_kx_server_session_keys(
    Uint8List serverPublicKey,
    Uint8List serverSecretKey,
    Uint8List clientPublicKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_pwhash(num keyLength, String|Uint8List password, Uint8List salt, num opsLimit, num memLimit, num algorithm, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_pwhash(num keyLength, String|Uint8List password, Uint8List salt, num opsLimit, num memLimit, num algorithm, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_pwhash(
    num keyLength,
    dynamic /*String|Uint8List*/ password,
    Uint8List salt,
    num opsLimit,
    num memLimit,
    num algorithm,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
@JS()
external String crypto_pwhash_str(
    dynamic /*String|Uint8List*/ password, num opsLimit, num memLimit);
@JS()
external bool crypto_pwhash_str_verify(
    String hashed_password, dynamic /*String|Uint8List*/ password);
/*external Uint8List crypto_scalarmult(Uint8List privateKey, Uint8List publicKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_scalarmult(Uint8List privateKey, Uint8List publicKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_scalarmult(
    Uint8List privateKey, Uint8List publicKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_scalarmult_base(Uint8List privateKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_scalarmult_base(Uint8List privateKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_scalarmult_base(
    Uint8List privateKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external SecretBox crypto_secretbox_detached(String|Uint8List message, Uint8List nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external StringSecretBox crypto_secretbox_detached(String|Uint8List message, Uint8List nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*SecretBox|StringSecretBox*/ crypto_secretbox_detached(
    dynamic /*String|Uint8List*/ message, Uint8List nonce, Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_secretbox_easy(String|Uint8List message, Uint8List nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_secretbox_easy(String|Uint8List message, Uint8List nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_secretbox_easy(
    dynamic /*String|Uint8List*/ message, Uint8List nonce, Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_secretbox_keygen(['Uint8List'|Null outputFormat]);*/
/*external String crypto_secretbox_keygen('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_secretbox_keygen(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_secretbox_open_detached(String|Uint8List ciphertext, Uint8List mac, Uint8List nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_secretbox_open_detached(String|Uint8List ciphertext, Uint8List mac, Uint8List nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_secretbox_open_detached(
    dynamic /*String|Uint8List*/ ciphertext,
    Uint8List mac,
    Uint8List nonce,
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_secretbox_open_easy(String|Uint8List ciphertext, Uint8List nonce, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_secretbox_open_easy(String|Uint8List ciphertext, Uint8List nonce, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_secretbox_open_easy(
    dynamic /*String|Uint8List*/ ciphertext, Uint8List nonce, Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
@JS()
external StateAddress crypto_secretstream_xchacha20poly1305_init_pull(
    Uint8List header, Uint8List key);
/*external { state: StateAddress; header: Uint8List } crypto_secretstream_xchacha20poly1305_init_push(Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external { state: StateAddress; header: string } crypto_secretstream_xchacha20poly1305_init_push(Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*{ state: StateAddress; header: Uint8List }|{ state: StateAddress; header: string }*/ crypto_secretstream_xchacha20poly1305_init_push(
    Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_secretstream_xchacha20poly1305_keygen(['Uint8List'|Null outputFormat]);*/
/*external String crypto_secretstream_xchacha20poly1305_keygen('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_secretstream_xchacha20poly1305_keygen(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external MessageTag crypto_secretstream_xchacha20poly1305_pull(StateAddress state_address, String|Uint8List cipher, [String|Uint8List|Null ad, 'Uint8List'|Null outputFormat]);*/
/*external StringMessageTag crypto_secretstream_xchacha20poly1305_pull(StateAddress state_address, String|Uint8List cipher, String|Uint8List|Null ad, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*MessageTag|StringMessageTag*/ crypto_secretstream_xchacha20poly1305_pull(
    StateAddress state_address, dynamic /*String|Uint8List*/ cipher,
    [dynamic /*String|Uint8List*/ ad,
    String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_secretstream_xchacha20poly1305_push(StateAddress state_address, String|Uint8List message_chunk, String|Uint8List|Null ad, num tag, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_secretstream_xchacha20poly1305_push(StateAddress state_address, String|Uint8List message_chunk, String|Uint8List|Null ad, num tag, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_secretstream_xchacha20poly1305_push(
    StateAddress state_address,
    dynamic /*String|Uint8List*/ message_chunk,
    dynamic /*String|Uint8List*/ ad,
    num tag,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
@JS()
external bool /*true*/ crypto_secretstream_xchacha20poly1305_rekey(
    StateAddress state_address);
/*external Uint8List crypto_shorthash(String|Uint8List message, Uint8List key, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_shorthash(String|Uint8List message, Uint8List key, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_shorthash(
    dynamic /*String|Uint8List*/ message, Uint8List key,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_shorthash_keygen(['Uint8List'|Null outputFormat]);*/
/*external String crypto_shorthash_keygen('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_shorthash_keygen(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_sign(String|Uint8List message, Uint8List privateKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_sign(String|Uint8List message, Uint8List privateKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_sign(
    dynamic /*String|Uint8List*/ message, Uint8List privateKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_sign_detached(String|Uint8List message, Uint8List privateKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_sign_detached(String|Uint8List message, Uint8List privateKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_sign_detached(
    dynamic /*String|Uint8List*/ message, Uint8List privateKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_sign_ed25519_pk_to_curve25519(Uint8List edPk, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_sign_ed25519_pk_to_curve25519(Uint8List edPk, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_sign_ed25519_pk_to_curve25519(
    Uint8List edPk,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_sign_ed25519_sk_to_curve25519(Uint8List edSk, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_sign_ed25519_sk_to_curve25519(Uint8List edSk, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_sign_ed25519_sk_to_curve25519(
    Uint8List edSk,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_sign_final_create(StateAddress state_address, Uint8List privateKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_sign_final_create(StateAddress state_address, Uint8List privateKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_sign_final_create(
    StateAddress state_address, Uint8List privateKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
@JS()
external bool crypto_sign_final_verify(
    StateAddress state_address, Uint8List signature, Uint8List publicKey);
@JS()
external StateAddress crypto_sign_init();
/*external KeyPair crypto_sign_keypair(['Uint8List'|Null outputFormat]);*/
/*external StringKeyPair crypto_sign_keypair('text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*KeyPair|StringKeyPair*/ crypto_sign_keypair(
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List crypto_sign_open(String|Uint8List signedMessage, Uint8List publicKey, ['Uint8List'|Null outputFormat]);*/
/*external String crypto_sign_open(String|Uint8List signedMessage, Uint8List publicKey, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ crypto_sign_open(
    dynamic /*String|Uint8List*/ signedMessage, Uint8List publicKey,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external KeyPair crypto_sign_seed_keypair(Uint8List seed, ['Uint8List'|Null outputFormat]);*/
/*external StringKeyPair crypto_sign_seed_keypair(Uint8List seed, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*KeyPair|StringKeyPair*/ crypto_sign_seed_keypair(
    Uint8List seed,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
@JS()
external void crypto_sign_update(
    StateAddress state_address, dynamic /*String|Uint8List*/ message_chunk);
@JS()
external bool crypto_sign_verify_detached(Uint8List signature,
    dynamic /*String|Uint8List*/ message, Uint8List publicKey);
@JS()
external Uint8List from_base64(String input,
    [num /*enum base64_variants*/ variant]);
@JS()
external Uint8List from_hex(String input);
@JS()
external Uint8List from_string(String str);
@JS()
external void increment(Uint8List bytes);
@JS()
external bool is_zero(Uint8List bytes);
@JS()
external bool memcmp(Uint8List b1, Uint8List b2);
@JS()
external void memzero(Uint8List bytes);
@JS()
external List<String /*'Uint8List'|'text'|'hex'|'base64'*/ > output_formats();
@JS()
external Uint8List pad(Uint8List buf, num blocksize);
/*external Uint8List randombytes_buf(num length, ['Uint8List'|Null outputFormat]);*/
/*external String randombytes_buf(num length, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ randombytes_buf(num length,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
/*external Uint8List randombytes_buf_deterministic(num length, Uint8List seed, ['Uint8List'|Null outputFormat]);*/
/*external String randombytes_buf_deterministic(num length, Uint8List seed, 'text'|'hex'|'base64' outputFormat);*/
@JS()
external dynamic /*Uint8List|String*/ randombytes_buf_deterministic(
    num length, Uint8List seed,
    [String /*'Uint8List'|'text'|'hex'|'base64'*/ outputFormat]);
@JS()
external void randombytes_close();
@JS()
external num randombytes_random();
@JS()
external void randombytes_stir();
@JS()
external num randombytes_uniform(num upper_bound);
@JS()
external String sodium_version_string();
@JS()
external List<String> symbols();
@JS()
external String to_base64(dynamic /*String|Uint8List*/ input,
    [num /*enum base64_variants*/ variant]);
@JS()
external String to_hex(dynamic /*String|Uint8List*/ input);
@JS()
external String to_string(Uint8List bytes);
@JS()
external Uint8List unpad(Uint8List buf, num blocksize);
