name: Continous Integration for package sodium_libs

env:
  PACKAGE_NAME: sodium_libs

on:
  workflow_dispatch:
  push:
    branches:
      - "*"
    paths:
      - "packages/sodium_libs/**"
      - ".github/workflows/sodium_libs_ci.yaml"
  pull_request:
    branches:
      - "*"
    paths:
      - "packages/sodium_libs/**"
      - ".github/workflows/sodium_libs_ci.yaml"

defaults:
  run:
    working-directory: packages/sodium_libs

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          - windows

        include:
          - platform: linux
            os: ubuntu-latest
            drive: false
          - platform: windows
            os: windows-latest
            drive: true

    runs-on: ${{ matrix.os }}
    steps:
      - uses: subosito/flutter-action@v1
      - uses: actions/checkout@v2
      - run: flutter config --enable-${{ matrix.platform }}-desktop
      - name: install libsodium + ninja + GTK (linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install libsodium-dev ninja-build libgtk-3-dev
      - name: install minisign (windows)
        if: matrix.platform == 'windows'
        run: choco install minisign -y
      - run: flutter doctor -v
      - uses: ./.github/actions/dependency_clean
        with:
          package: ${{ env.PACKAGE_NAME }},${{ env.PACKAGE_NAME }}_example
      - run: flutter pub get
      - run: flutter analyze
      - run: flutter pub publish --dry-run
      - run: flutter build ${{ matrix.platform }} --release
        working-directory: packages/sodium_libs/example
      - run: flutter drive --target=test_driver/app.dart -d ${{ matrix.platform }}
        if: matrix.drive == 'true'
        working-directory: packages/sodium_libs/example
  # release:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test
  #   if: github.ref == 'refs/heads/main'
  #   outputs:
  #     update: ${{ steps.version.outputs.update }}
  #     tag_name: ${{ steps.version.outputs.tag_name }}
  #   steps:
  #     - uses: subosito/flutter-action@v1
  #     - uses: actions/checkout@v2
  #     - uses: Skycoder42/action-dart-release@v1
  #       id: version
  #       with:
  #         src_dir: packages/${{ env.PACKAGE_NAME }}
  #     - name: Create Release
  #       if: steps.version.outputs.update == 'true'
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ env.PACKAGE_NAME }}/v${{ steps.version.outputs.tag_name }}
  #         release_name: ${{ env.PACKAGE_NAME }} - ${{ steps.version.outputs.release_name }}
  #         body_path: ${{ steps.version.outputs.body_path }}
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - release
  #   if: needs.release.outputs.update == 'true'
  #   steps:
  #     - uses: subosito/flutter-action@v1
  #     - uses: actions/checkout@v2
  #     - uses: ./.github/actions/dependency_clean
  #       with:
  #         package: ${{ env.PACKAGE_NAME }}
  #     - run: flutter pub get
  #     - name: store credentials
  #       run: |
  #         mkdir -p ~/.pub-cache
  #         echo '${{ secrets.PUB_DEV_CREDENTIALS }}' > ~/.pub-cache/credentials.json
  #     - run: flutter pub publish --force
  #     - name: clean up credentials
  #       if: always()
  #       run: shred -fzvu ~/.pub-cache/credentials.json
  # doc:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - release
  #   if: needs.release.outputs.update == 'true'
  #   steps:
  #     - uses: subosito/flutter-action@v1
  #     - uses: actions/checkout@v2
  #     - uses: ./.github/actions/dependency_clean
  #       with:
  #         package: ${{ env.PACKAGE_NAME }}
  #     - run: flutter pub get
  #     - run: dartdoc
  #     - name: upload doc
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: packages/${{ env.PACKAGE_NAME }}/doc/api
  #         commit_message: Updated documentation to v${{ needs.release.outputs.tag_name }}
  #         destination_dir: ${{ env.PACKAGE_NAME }}
