name: CI/CD for sodium_libs

on:
  workflow_dispatch:
  push:
    branches:
      - "*"
    paths:
      - "packages/sodium_libs/**"
      - ".github/workflows/sodium_libs_ci.yaml"
  pull_request:
    branches:
      - "*"
    paths:
      - "packages/sodium_libs/**"
      - ".github/workflows/sodium_libs_ci.yaml"

jobs:
  ci:
    name: CI
    uses: Skycoder42/dart_test_tools/.github/workflows/flutter.yml@main
    with:
      workingDirectory: packages/sodium_libs
      publishExclude: >-
        [
          "android/src/main/.gitignore",
          "example/windows/flutter/ephemeral/.plugin_symlinks"
        ]
      unitTestPaths: ""
      integrationTestProject: "example"
      integrationTestPaths: "integration_test/app_test.dart"
      integrationTestSetup: >-
        {
          "linux": "sudo apt-get -qq install libsodium-dev",
          "windows": "choco install minisign -y",
          "macos": "brew install libsodium",
          "web": "cd example && flutter pub run sodium_libs:update_web --sumo"
        }
  # test:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform:
  #         - linux
  #         - windows
  #         - macos
  #         - web
  #         - android
  #         - ios

  #       include:
  #         - platform: linux
  #           os: ubuntu-latest
  #           build: linux
  #           desktop: true
  #           drive: linux
  #           drive-prelude: xvfb-run --auto-servernum
  #         - platform: windows
  #           os: windows-latest
  #           build: windows
  #           desktop: true
  #           drive: windows
  #         - platform: macos
  #           os: macos-latest
  #           build: macos
  #           desktop: true
  #           drive: macos
  #         - platform: web
  #           os: windows-latest
  #           build: web
  #           drive: chrome
  #           drive-prelude: chromedriver --port=4444 & ;
  #         - platform: android
  #           os: ubuntu-latest
  #           build: apk
  #         - platform: ios
  #           os: macos-latest
  #           build: ios --no-codesign

  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     # Install common tools
  #     - uses: subosito/flutter-action@v1
  #     - uses: actions/checkout@v2
  #     - name: enable experimental platforms
  #       if: matrix.desktop
  #       run: flutter config --enable-${{ matrix.platform }}-desktop
  #     # Install platform tools
  #     - name: install libsodium + ninja + GTK + xvfb (linux)
  #       if: matrix.platform == 'linux'
  #       run: |
  #         sudo apt-get -qq update
  #         sudo apt-get -qq install libsodium-dev ninja-build libgtk-3-dev xvfb
  #     - name: install minisign (windows)
  #       if: matrix.platform == 'windows'
  #       run: choco install minisign -y
  #     - name: install libsodium (macos)
  #       if: matrix.platform == 'macos'
  #       run: brew install libsodium
  #     - name: install ChromeDriver (web)
  #       if: matrix.platform == 'web'
  #       uses: nanasess/setup-chromedriver@master
  #     - name: install minisign (android)
  #       if: matrix.platform == 'android'
  #       run: |
  #         sudo add-apt-repository -y ppa:dysfunctionalprogramming/minisign
  #         sudo apt-get -qq update
  #         sudo apt-get -qq install minisign
  #     - name: restore prebuilt binaries (android)
  #       id: cache-libsodium-bins
  #       if: matrix.platform == 'android'
  #       uses: actions/cache@v2
  #       with:
  #         path: packages/sodium_libs/android/src/main/jniLibs
  #         key: libsodium-${{ matrix.platform }}-${{ hashFiles('packages/sodium_libs/libsodium_version.json') }}
  #     - name: fetch libsodium (android)
  #       if: matrix.platform == 'android' && steps.cache-libsodium-bins.outputs.cache-hit != 'true'
  #       run: dart run scripts/fetch_libsodium.dart ${{ matrix.platform }}
  #       working-directory: .
  #     # Clean project
  #     - run: flutter doctor -v
  #     - uses: ./.github/actions/dependency_clean
  #       with:
  #         package: ${{ env.PACKAGE_NAME }},${{ env.PACKAGE_NAME }}_example
  #     # Build and verify
  #     - run: flutter pub get
  #     - run: flutter analyze
  #     - run: flutter format -n --set-exit-if-changed .
  #     - run: dart run tool/publish.dart --dry-run
  #     # Run integration tests on example app
  #     - name: fetch sodium.js (web)
  #       if: matrix.platform == 'web'
  #       run: flutter pub run sodium_libs:update_web --sumo
  #       working-directory: packages/sodium_libs/example
  #     - run: flutter build ${{ matrix.build }} --release
  #       working-directory: packages/sodium_libs/example
  #     - name: run integration tests (vm)
  #       if: matrix.drive != '' && matrix.platform != 'web'
  #       run: >-
  #         ${{ matrix.drive-prelude }}
  #         flutter test -d ${{ matrix.drive }} integration_test
  #       working-directory: packages/sodium_libs/example
  #     - name: run integration tests (web)
  #       if: matrix.drive != '' && matrix.platform == 'web'
  #       run: >-
  #         ${{ matrix.drive-prelude }}
  #         flutter drive
  #         --driver=test_driver/integration_test.dart
  #         --target=integration_test/app_test.dart
  #         -d ${{ matrix.drive }}
  #         --release
  #         --browser-name=${{ matrix.drive }}
  #       working-directory: packages/sodium_libs/example

  # release:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test
  #   if: github.ref == 'refs/heads/main'
  #   outputs:
  #     update: ${{ steps.version.outputs.update }}
  #     tag_name: ${{ steps.version.outputs.tag_name }}
  #   steps:
  #     - uses: subosito/flutter-action@v1
  #     - uses: actions/checkout@v2
  #     - uses: Skycoder42/action-dart-release@v1
  #       id: version
  #       with:
  #         src_dir: packages/${{ env.PACKAGE_NAME }}
  #     - name: Create Release
  #       if: steps.version.outputs.update == 'true'
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ env.PACKAGE_NAME }}/v${{ steps.version.outputs.tag_name }}
  #         release_name: ${{ env.PACKAGE_NAME }} - ${{ steps.version.outputs.release_name }}
  #         body_path: ${{ steps.version.outputs.body_path }}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - release
  #   if: needs.release.outputs.update == 'true'
  #   steps:
  #     - uses: subosito/flutter-action@v1
  #     - uses: actions/checkout@v2
  #     - uses: ./.github/actions/dependency_clean
  #       with:
  #         package: ${{ env.PACKAGE_NAME }}
  #     - name: restore cached prebuilt binaries (android)
  #       id: cache-libsodium-bins
  #       uses: actions/cache@v2
  #       with:
  #         path: packages/sodium_libs/android/src/main/jniLibs
  #         key: libsodium-android-${{ hashFiles('packages/sodium_libs/libsodium_version.json') }}
  #     - name: check cache was restored
  #       if: steps.cache-libsodium-bins.outputs.cache-hit != 'true'
  #       run: |
  #         echo '::error::Failed to restore binaries from cache!'
  #         exit 1
  #     - run: flutter pub get
  #     - name: store credentials
  #       run: |
  #         mkdir -p ~/.pub-cache
  #         echo '${{ secrets.PUB_DEV_CREDENTIALS }}' > ~/.pub-cache/credentials.json
  #     - run: dart run tool/publish.dart --force
  #     - name: clean up credentials
  #       if: always()
  #       run: shred -fzvu ~/.pub-cache/credentials.json

  # doc:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - release
  #   if: needs.release.outputs.update == 'true'
  #   steps:
  #     - uses: subosito/flutter-action@v1
  #     - uses: actions/checkout@v2
  #     - uses: ./.github/actions/dependency_clean
  #       with:
  #         package: ${{ env.PACKAGE_NAME }}
  #     - run: flutter pub get
  #     - run: dartdoc --show-progress
  #     - name: upload doc
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: packages/${{ env.PACKAGE_NAME }}/doc/api
  #         commit_message: Updated documentation to v${{ needs.release.outputs.tag_name }}
  #         destination_dir: ${{ env.PACKAGE_NAME }}
