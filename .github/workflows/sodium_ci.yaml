name: Continous Integration for package sodium

env:
  PACKAGE_NAME: sodium

on:
  workflow_dispatch:
  push:
    branches:
      - "*"
    paths:
      - "packages/sodium/**"
      - ".github/workflows/sodium_ci.yaml"
  pull_request:
    branches:
      - "*"
    paths:
      - "packages/sodium/**"
      - ".github/workflows/sodium_ci.yaml"

defaults:
  run:
    working-directory: packages/sodium

jobs:
  dart_ci:
    uses: Skycoder42/dart_test_tools/.github/workflows/dart.yml@main
    with:
      workingDirectory: packages/sodium
      buildRunner: true
      publishExclude: lib/src/.gitignore
      unitTestPaths: test/unit
      coverageExclude: >-
        **/*.freezed.dart
        **/*.ffi.dart
        **/*.js.dart
      integrationTestPaths: test/integration
      integrationTestSetup: >-
        {
          "linux": "sudo apt-get -qq install libsodium-dev",
          "windows": "choco install minisign -y && cd ../.. && pwd && dart run scripts/fetch_libsodium.dart windows",
          "macos": "brew install libsodium",
          "web": "cd ../.. && pwd && dart run scripts/fetch_libsodium.dart web"
        }

  # release:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test
  #   if: github.ref == 'refs/heads/main'
  #   outputs:
  #     update: ${{ steps.version.outputs.update }}
  #     tag_name: ${{ steps.version.outputs.tag_name }}
  #   steps:
  #     - uses: dart-lang/setup-dart@v1
  #     - uses: actions/checkout@v2
  #     - uses: Skycoder42/action-dart-release@v1
  #       id: version
  #       with:
  #         src_dir: packages/${{ env.PACKAGE_NAME }}
  #     - name: Create Release
  #       if: steps.version.outputs.update == 'true'
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ env.PACKAGE_NAME }}/v${{ steps.version.outputs.tag_name }}
  #         release_name: ${{ env.PACKAGE_NAME }} - ${{ steps.version.outputs.release_name }}
  #         body_path: ${{ steps.version.outputs.body_path }}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - release
  #   if: needs.release.outputs.update == 'true'
  #   steps:
  #     - uses: dart-lang/setup-dart@v1
  #     - uses: actions/checkout@v2
  #     - run: dart pub get
  #     - run: dart run build_runner build
  #     - name: store credentials
  #       run: |
  #         mkdir -p ~/.pub-cache
  #         echo '${{ secrets.PUB_DEV_CREDENTIALS }}' > ~/.pub-cache/credentials.json
  #     - run: dart run tool/publish.dart --force
  #     - name: clean up credentials
  #       if: always()
  #       run: shred -fzvu ~/.pub-cache/credentials.json

  # doc:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - release
  #   if: needs.release.outputs.update == 'true'
  #   steps:
  #     - uses: dart-lang/setup-dart@v1
  #     - uses: actions/checkout@v2
  #     - run: dart pub get
  #     - run: dart run build_runner build
  #     - run: dartdoc --show-progress
  #     - name: upload doc
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: packages/${{ env.PACKAGE_NAME }}/doc/api
  #         commit_message: Updated documentation to v${{ needs.release.outputs.tag_name }}
  #         destination_dir: ${{ env.PACKAGE_NAME }}
